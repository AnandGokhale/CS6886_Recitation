Extract tasks...
fn (%input0: Tensor[(1, 3, 224, 224), float32], %weight.1: Tensor[(32, 3, 5, 5), float32], %v4: Tensor[(32), float32], %weight: Tensor[(10, 1548800), float32], %bias: Tensor[(10), float32]) -> Tensor[(1, 10), float32] {
  %0 = nn.conv2d(%input0, %weight.1, padding=[0, 0, 0, 0], channels=32, kernel_size=[5, 5]) /* ty=Tensor[(1, 32, 220, 220), float32] */;
  %1 = nn.bias_add(%0, %v4) /* ty=Tensor[(1, 32, 220, 220), float32] */;
  %2 = nn.relu(%1) /* ty=Tensor[(1, 32, 220, 220), float32] */;
  %3 = reshape(%2, newshape=[-1, 1548800]) /* ty=Tensor[(1, 1548800), float32] */;
  %4 = multiply(%3, 1f /* ty=float32 */) /* ty=Tensor[(1, 1548800), float32] */;
  %5 = transpose(%weight, axes=[1, 0]) /* ty=Tensor[(1548800, 10), float32] */;
  %6 = multiply(%5, 1f /* ty=float32 */) /* ty=Tensor[(1548800, 10), float32] */;
  %7 = transpose(%6, axes=[1, 0]) /* ty=Tensor[(10, 1548800), float32] */;
  %8 = nn.dense(%4, %7, units=10) /* ty=Tensor[(1, 10), float32] */;
  %9 = nn.bias_add(%8, %bias) /* ty=Tensor[(1, 10), float32] */;
  %10 = nn.softmax(%9, axis=1) /* ty=Tensor[(1, 10), float32] */;
  nn.softmax(%10) /* ty=Tensor[(1, 10), float32] */
}
Compile...
; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32*, i32 }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }
%4 = type { i8*, i8* }
%5 = type { i8*, i8*, float* }
%6 = type { i8*, i8* }
%7 = type { i8*, i8* }
%8 = type { i8*, i8*, i8*, i8*, i32 }

@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@__TVMBackendParallelLaunch = linkonce dllexport local_unnamed_addr global i32 (i32 (i32, %0*, i8*)*, i8*, i32)* null, align 8
@.str = private constant [75 x i8] c"Assert fail: (num_args == 2), fused_reshape_multiply: num_args should be 2\00", align 1
@.str.1 = private constant [150 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_reshape_multiply: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [150 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_reshape_multiply: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [55 x i8] c"Assert fail: (dev_type == 1), device_type need to be 1\00", align 1
@.str.4 = private constant [81 x i8] c"Assert fail: (4 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 4\00", align 1
@.str.5 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg0, 0, 5) == (uint8)2) && (tvm_struct_get(arg0, 0, 6) == (uint8)32)) && (tvm_struct_get(arg0, 0, 7) == (uint16)1)), arg0.dtype is expected to be float32\00", align 1
@.str.6 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[0])), Argument arg0.shape[0] has an unsatisfied constraint\00", align 1
@.str.7 = private constant [96 x i8] c"Assert fail: (32 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.8 = private constant [97 x i8] c"Assert fail: (220 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.9 = private constant [97 x i8] c"Assert fail: (220 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.10 = private constant [204 x i8] c"Assert fail: ((((1 == int32(arg0.strides[3])) && (220 == int32(arg0.strides[2]))) && (48400 == int32(arg0.strides[1]))) && (1548800 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.11 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg0, 0, 8)), Argument arg0.byte_offset has an unsatisfied constraint\00", align 1
@.str.12 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 2\00", align 1
@.str.13 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg1, 0, 5) == (uint8)2) && (tvm_struct_get(arg1, 0, 6) == (uint8)32)) && (tvm_struct_get(arg1, 0, 7) == (uint16)1)), arg1.dtype is expected to be float32\00", align 1
@.str.14 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.15 = private constant [101 x i8] c"Assert fail: (1548800 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.16 = private constant [128 x i8] c"Assert fail: ((1 == int32(arg1.strides[1])) && (1548800 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.17 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg1, 0, 8)), Argument arg1.byte_offset has an unsatisfied constraint\00", align 1
@.str.18 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg1, 0, 10)), Argument arg1.device_type has an unsatisfied constraint\00", align 1
@.str.19 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg1, 0, 9)), Argument arg1.device_id has an unsatisfied constraint\00", align 1
@.str.20 = private constant [87 x i8] c"Assert fail: (num_args == 2), fused_transpose_multiply_transpose: num_args should be 2\00", align 1
@.str.21 = private constant [162 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_transpose_multiply_transpose: Expect arg[0] to be pointer\00", align 1
@.str.22 = private constant [162 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_transpose_multiply_transpose: Expect arg[1] to be pointer\00", align 1
@.str.23 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 2\00", align 1
@.str.24 = private constant [96 x i8] c"Assert fail: (10 == int32(arg0.shape[0])), Argument arg0.shape[0] has an unsatisfied constraint\00", align 1
@.str.25 = private constant [101 x i8] c"Assert fail: (1548800 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.26 = private constant [128 x i8] c"Assert fail: ((1 == int32(arg0.strides[1])) && (1548800 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.27 = private constant [96 x i8] c"Assert fail: (10 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.28 = private constant [79 x i8] c"Assert fail: (num_args == 4), fused_nn_dense_nn_bias_add: num_args should be 4\00", align 1
@.str.29 = private constant [154 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_dense_nn_bias_add: Expect arg[0] to be pointer\00", align 1
@.str.30 = private constant [154 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_dense_nn_bias_add: Expect arg[1] to be pointer\00", align 1
@.str.31 = private constant [154 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_dense_nn_bias_add: Expect arg[2] to be pointer\00", align 1
@.str.32 = private constant [154 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_dense_nn_bias_add: Expect arg[3] to be pointer\00", align 1
@.str.33 = private constant [81 x i8] c"Assert fail: (1 == tvm_struct_get(arg2, 0, 4)), arg2.ndim is expected to equal 1\00", align 1
@.str.34 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg2, 0, 5) == (uint8)2) && (tvm_struct_get(arg2, 0, 6) == (uint8)32)) && (tvm_struct_get(arg2, 0, 7) == (uint16)1)), arg2.dtype is expected to be float32\00", align 1
@.str.35 = private constant [96 x i8] c"Assert fail: (10 == int32(arg2.shape[0])), Argument arg2.shape[0] has an unsatisfied constraint\00", align 1
@.str.36 = private constant [87 x i8] c"Assert fail: (1 == int32(arg2.strides[0])), arg2.strides: expected to be compact array\00", align 1
@.str.37 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg2, 0, 8)), Argument arg2.byte_offset has an unsatisfied constraint\00", align 1
@.str.38 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg2, 0, 10)), Argument arg2.device_type has an unsatisfied constraint\00", align 1
@.str.39 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg2, 0, 9)), Argument arg2.device_id has an unsatisfied constraint\00", align 1
@.str.40 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg3, 0, 4)), arg3.ndim is expected to equal 2\00", align 1
@.str.41 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg3, 0, 5) == (uint8)2) && (tvm_struct_get(arg3, 0, 6) == (uint8)32)) && (tvm_struct_get(arg3, 0, 7) == (uint16)1)), arg3.dtype is expected to be float32\00", align 1
@.str.42 = private constant [95 x i8] c"Assert fail: (1 == int32(arg3.shape[0])), Argument arg3.shape[0] has an unsatisfied constraint\00", align 1
@.str.43 = private constant [96 x i8] c"Assert fail: (10 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.44 = private constant [123 x i8] c"Assert fail: ((1 == int32(arg3.strides[1])) && (10 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.45 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg3, 0, 8)), Argument arg3.byte_offset has an unsatisfied constraint\00", align 1
@.str.46 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg3, 0, 10)), Argument arg3.device_type has an unsatisfied constraint\00", align 1
@.str.47 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg3, 0, 9)), Argument arg3.device_id has an unsatisfied constraint\00", align 1
@.str.49 = private constant [71 x i8] c"Assert fail: (num_args == 2), fused_nn_softmax_1: num_args should be 2\00", align 1
@.str.50 = private constant [146 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_softmax_1: Expect arg[0] to be pointer\00", align 1
@.str.51 = private constant [146 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_softmax_1: Expect arg[1] to be pointer\00", align 1
@.str.52 = private constant [96 x i8] c"Assert fail: (10 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.53 = private constant [123 x i8] c"Assert fail: ((1 == int32(arg0.strides[1])) && (10 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.54 = private constant [96 x i8] c"Assert fail: (10 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.55 = private constant [123 x i8] c"Assert fail: ((1 == int32(arg1.strides[1])) && (10 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.56 = private constant [88 x i8] c"Assert fail: (num_args == 4), fused_nn_conv2d_nn_bias_add_nn_relu: num_args should be 4\00", align 1
@.str.57 = private constant [163 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_conv2d_nn_bias_add_nn_relu: Expect arg[0] to be pointer\00", align 1
@.str.58 = private constant [163 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_conv2d_nn_bias_add_nn_relu: Expect arg[1] to be pointer\00", align 1
@.str.59 = private constant [163 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_conv2d_nn_bias_add_nn_relu: Expect arg[2] to be pointer\00", align 1
@.str.60 = private constant [163 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_conv2d_nn_bias_add_nn_relu: Expect arg[3] to be pointer\00", align 1
@.str.61 = private constant [95 x i8] c"Assert fail: (3 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.62 = private constant [97 x i8] c"Assert fail: (224 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.63 = private constant [97 x i8] c"Assert fail: (224 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.64 = private constant [203 x i8] c"Assert fail: ((((1 == int32(arg0.strides[3])) && (224 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (150528 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.65 = private constant [81 x i8] c"Assert fail: (4 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 4\00", align 1
@.str.66 = private constant [96 x i8] c"Assert fail: (32 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.67 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.68 = private constant [95 x i8] c"Assert fail: (5 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.69 = private constant [95 x i8] c"Assert fail: (5 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.70 = private constant [194 x i8] c"Assert fail: ((((1 == int32(arg1.strides[3])) && (5 == int32(arg1.strides[2]))) && (25 == int32(arg1.strides[1]))) && (75 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.71 = private constant [96 x i8] c"Assert fail: (32 == int32(arg2.shape[0])), Argument arg2.shape[0] has an unsatisfied constraint\00", align 1
@.str.72 = private constant [81 x i8] c"Assert fail: (4 == tvm_struct_get(arg3, 0, 4)), arg3.ndim is expected to equal 4\00", align 1
@.str.73 = private constant [96 x i8] c"Assert fail: (32 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.74 = private constant [97 x i8] c"Assert fail: (220 == int32(arg3.shape[2])), Argument arg3.shape[2] has an unsatisfied constraint\00", align 1
@.str.75 = private constant [97 x i8] c"Assert fail: (220 == int32(arg3.shape[3])), Argument arg3.shape[3] has an unsatisfied constraint\00", align 1
@.str.76 = private constant [204 x i8] c"Assert fail: ((((1 == int32(arg3.strides[3])) && (220 == int32(arg3.strides[2]))) && (48400 == int32(arg3.strides[1]))) && (1548800 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@__TVMBackendAllocWorkspace = linkonce dllexport local_unnamed_addr global i8* (i32, i32, i64, i32, i32)* null, align 8
@__TVMBackendFreeWorkspace = linkonce dllexport local_unnamed_addr global i32 (i32, i32, i8*)* null, align 8
@.str.80 = private constant [69 x i8] c"Assert fail: (num_args == 2), fused_nn_softmax: num_args should be 2\00", align 1
@.str.81 = private constant [144 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_softmax: Expect arg[0] to be pointer\00", align 1
@.str.82 = private constant [144 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_softmax: Expect arg[1] to be pointer\00", align 1

define dllexport i32 @fused_reshape_multiply(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !9
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([150 x i8], [150 x i8]* @.str.1, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !23
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([150 x i8], [150 x i8]* @.str.2, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 4
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 1
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 2
  %50 = and i1 %46, %49
  %51 = and i1 %43, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !25
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !39
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 32
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !41
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 220
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !44
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 220
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = icmp eq i64* %19, null
  br i1 %72, label %if_end, label %if_then, !prof !46

if_then:                                          ; preds = %assert_end18
  %73 = bitcast i64* %19 to <4 x i64>*
  %74 = load <4 x i64>, <4 x i64>* %73, align 8, !tbaa !47
  %75 = trunc <4 x i64> %74 to <4 x i32>
  %76 = icmp eq <4 x i32> %75, <i32 1548800, i32 48400, i32 220, i32 1>
  %rdx.shuf = shufflevector <4 x i1> %76, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %76, %rdx.shuf
  %rdx.shuf41 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx42 = and <4 x i1> %bin.rdx, %rdx.shuf41
  %77 = extractelement <4 x i1> %bin.rdx42, i32 0
  br i1 %77, label %if_end, label %assert_fail19, !prof !5

if_end:                                           ; preds = %assert_end18, %if_then
  %78 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %assert_end22, label %assert_fail21, !prof !5

assert_fail19:                                    ; preds = %if_then
  %81 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %81(i8* getelementptr inbounds ([204 x i8], [204 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_fail21:                                    ; preds = %if_end
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %if_end
  %83 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 2
  br i1 %85, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %86(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %87 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 32
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 2
  %96 = and i1 %92, %95
  %97 = and i1 %89, %96
  br i1 %97, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %99 = load i64, i64* %27, align 8, !tbaa !59
  %100 = trunc i64 %99 to i32
  %101 = icmp eq i32 %100, 1
  br i1 %101, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %102 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %102(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %103 = getelementptr inbounds i64, i64* %27, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !73
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 1548800
  br i1 %106, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %107 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %107(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %108 = icmp eq i64* %29, null
  br i1 %108, label %if_end32, label %if_then31, !prof !46

if_then31:                                        ; preds = %assert_end30
  %109 = load i64, i64* %29, align 8, !tbaa !75
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1548800
  %112 = getelementptr inbounds i64, i64* %29, i64 1
  %113 = load i64, i64* %112, align 8, !tbaa !89
  %114 = trunc i64 %113 to i32
  %115 = icmp eq i32 %114, 1
  %116 = and i1 %111, %115
  br i1 %116, label %if_end32, label %assert_fail33, !prof !5

if_end32:                                         ; preds = %assert_end30, %if_then31
  %117 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %118 = load i64, i64* %117, align 8
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %assert_end36, label %assert_fail35, !prof !5

assert_fail33:                                    ; preds = %if_then31
  %120 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %120(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_fail35:                                    ; preds = %if_end32
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %if_end32
  %122 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %123 = load i32, i32* %122, align 4
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %126 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %23, %127
  br i1 %128, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %129 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %129(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  tail call fastcc void @fused_reshape_multiply_compute_(i8* %25, i8* %15)
  ret i32 0
}

; Function Attrs: nofree noinline norecurse nounwind
define private fastcc void @fused_reshape_multiply_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #0 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %0, i8* align 64 %1, i64 6195200, i1 false)
  ret void
}

define dllexport i32 @fused_transpose_multiply_transpose(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.20, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !91
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([162 x i8], [162 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !105
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([162 x i8], [162 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 1
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 2
  %50 = and i1 %46, %49
  %51 = and i1 %43, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !107
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 10
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.24, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !121
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 1548800
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = icmp eq i64* %19, null
  br i1 %62, label %if_end, label %if_then, !prof !46

if_then:                                          ; preds = %assert_end14
  %63 = load i64, i64* %19, align 8, !tbaa !123
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 1548800
  %66 = getelementptr inbounds i64, i64* %19, i64 1
  %67 = load i64, i64* %66, align 8, !tbaa !137
  %68 = trunc i64 %67 to i32
  %69 = icmp eq i32 %68, 1
  %70 = and i1 %65, %69
  br i1 %70, label %if_end, label %assert_fail15, !prof !5

if_end:                                           ; preds = %assert_end14, %if_then
  %71 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %assert_end18, label %assert_fail17, !prof !5

assert_fail15:                                    ; preds = %if_then
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_fail17:                                    ; preds = %if_end
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %if_end
  %76 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 2
  br i1 %78, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %80 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %81 = load i16, i16* %80, align 2
  %82 = icmp eq i16 %81, 1
  %83 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 2
  %89 = and i1 %85, %88
  %90 = and i1 %82, %89
  br i1 %90, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %92 = load i64, i64* %27, align 8, !tbaa !139
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 10
  br i1 %94, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %96 = getelementptr inbounds i64, i64* %27, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !153
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 1548800
  br i1 %99, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %101 = icmp eq i64* %29, null
  br i1 %101, label %if_end28, label %if_then27, !prof !46

if_then27:                                        ; preds = %assert_end26
  %102 = load i64, i64* %29, align 8, !tbaa !155
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 1548800
  %105 = getelementptr inbounds i64, i64* %29, i64 1
  %106 = load i64, i64* %105, align 8, !tbaa !169
  %107 = trunc i64 %106 to i32
  %108 = icmp eq i32 %107, 1
  %109 = and i1 %104, %108
  br i1 %109, label %if_end28, label %assert_fail29, !prof !5

if_end28:                                         ; preds = %assert_end26, %if_then27
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then27
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end28
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %114(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end28
  %115 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %119 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %23, %120
  br i1 %121, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %123 = tail call fastcc i32 @fused_transpose_multiply_transpose_compute_(i8* %25, i8* %15)
  ret i32 %123
}

; Function Attrs: noinline
define private fastcc i32 @fused_transpose_multiply_transpose_compute_(i8* noalias, i8* noalias) unnamed_addr #1 {
entry:
  %2 = alloca %4, align 8
  %3 = getelementptr inbounds %4, %4* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %4, %4* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = bitcast %4* %2 to i8*
  %6 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %7 = call i32 %6(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda, i8* nonnull %5, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 9
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 10
  %15 = select i1 %14, i32 %13, i32 10
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 10
  %18 = select i1 %17, i32 %16, i32 10
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv5 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next6, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv5, 1548800
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %23 = shl i64 %indvars.iv, 4
  %24 = add nsw i64 %23, %22
  %25 = getelementptr inbounds float, float* %7, i64 %24
  %26 = bitcast float* %25 to <16 x float>*
  %27 = load <16 x float>, <16 x float>* %26, align 64, !tbaa !171
  %28 = getelementptr inbounds float, float* %4, i64 %24
  %29 = bitcast float* %28 to <16 x float>*
  store <16 x float> %27, <16 x float>* %29, align 64, !tbaa !174
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 96800
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !46

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next6 = add nsw i64 %indvars.iv5, 1
  %30 = icmp slt i64 %indvars.iv.next6, %21
  br i1 %30, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_dense_nn_bias_add(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.28, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !177
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !191
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !194
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %54 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %54(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.29, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %55 = getelementptr inbounds i8, i8* %1, i64 4
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 4, !tbaa !196
  switch i32 %57, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.30, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %59 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %59(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.31, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %60(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %61 = icmp eq i32 %33, 1
  br i1 %61, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 2
  br i1 %65, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %67 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %68 = load i16, i16* %67, align 2
  %69 = icmp eq i16 %68, 1
  %70 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 32
  %73 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 2
  %76 = and i1 %72, %75
  %77 = and i1 %69, %76
  br i1 %77, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %79 = load i64, i64* %29, align 8, !tbaa !198
  %80 = trunc i64 %79 to i32
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %83 = getelementptr inbounds i64, i64* %29, i64 1
  %84 = load i64, i64* %83, align 8, !tbaa !212
  %85 = trunc i64 %84 to i32
  %86 = icmp eq i32 %85, 1548800
  br i1 %86, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %87(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %88 = icmp eq i64* %31, null
  br i1 %88, label %if_end, label %if_then, !prof !46

if_then:                                          ; preds = %assert_end18
  %89 = load i64, i64* %31, align 8, !tbaa !214
  %90 = trunc i64 %89 to i32
  %91 = icmp eq i32 %90, 1548800
  %92 = getelementptr inbounds i64, i64* %31, i64 1
  %93 = load i64, i64* %92, align 8, !tbaa !228
  %94 = trunc i64 %93 to i32
  %95 = icmp eq i32 %94, 1
  %96 = and i1 %91, %95
  br i1 %96, label %if_end, label %assert_fail19, !prof !5

if_end:                                           ; preds = %assert_end18, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end22, label %assert_fail21, !prof !5

assert_fail19:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_fail21:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 2
  br i1 %104, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %107 = load i16, i16* %106, align 2
  %108 = icmp eq i16 %107, 1
  %109 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 32
  %112 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %113 = load i8, i8* %112, align 1
  %114 = icmp eq i8 %113, 2
  %115 = and i1 %111, %114
  %116 = and i1 %108, %115
  br i1 %116, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %118 = load i64, i64* %39, align 8, !tbaa !230
  %119 = trunc i64 %118 to i32
  %120 = icmp eq i32 %119, 10
  br i1 %120, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %122 = getelementptr inbounds i64, i64* %39, i64 1
  %123 = load i64, i64* %122, align 8, !tbaa !244
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 1548800
  br i1 %125, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %127 = icmp eq i64* %41, null
  br i1 %127, label %if_end32, label %if_then31, !prof !46

if_then31:                                        ; preds = %assert_end30
  %128 = load i64, i64* %41, align 8, !tbaa !246
  %129 = trunc i64 %128 to i32
  %130 = icmp eq i32 %129, 1548800
  %131 = getelementptr inbounds i64, i64* %41, i64 1
  %132 = load i64, i64* %131, align 8, !tbaa !260
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 1
  %135 = and i1 %130, %134
  br i1 %135, label %if_end32, label %assert_fail33, !prof !5

if_end32:                                         ; preds = %assert_end30, %if_then31
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %137 = load i64, i64* %136, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %assert_end36, label %assert_fail35, !prof !5

assert_fail33:                                    ; preds = %if_then31
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_fail35:                                    ; preds = %if_end32
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %if_end32
  %141 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %35, %146
  br i1 %147, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %149 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.33, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %153 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %154 = load i16, i16* %153, align 2
  %155 = icmp eq i16 %154, 1
  %156 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %157 = load i8, i8* %156, align 1
  %158 = icmp eq i8 %157, 32
  %159 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %160 = load i8, i8* %159, align 1
  %161 = icmp eq i8 %160, 2
  %162 = and i1 %158, %161
  %163 = and i1 %155, %162
  br i1 %163, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %165 = load i64, i64* %45, align 8, !tbaa !262
  %166 = trunc i64 %165 to i32
  %167 = icmp eq i32 %166, 10
  br i1 %167, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %168 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %168(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %169 = icmp eq i64* %47, null
  br i1 %169, label %if_end48, label %if_then47, !prof !46

if_then47:                                        ; preds = %assert_end46
  %170 = load i64, i64* %47, align 8, !tbaa !276
  %171 = trunc i64 %170 to i32
  %172 = icmp eq i32 %171, 1
  br i1 %172, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %173 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %174 = load i64, i64* %173, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %177(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.37, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %178 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = icmp eq i32 %179, 1
  br i1 %180, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %181 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %181(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %182 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = icmp eq i32 %35, %183
  br i1 %184, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %185(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %186 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %187 = load i32, i32* %186, align 4
  %188 = icmp eq i32 %187, 2
  br i1 %188, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %190 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %191 = load i16, i16* %190, align 2
  %192 = icmp eq i16 %191, 1
  %193 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %194 = load i8, i8* %193, align 1
  %195 = icmp eq i8 %194, 32
  %196 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %197 = load i8, i8* %196, align 1
  %198 = icmp eq i8 %197, 2
  %199 = and i1 %195, %198
  %200 = and i1 %192, %199
  br i1 %200, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.41, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %202 = load i64, i64* %51, align 8, !tbaa !290
  %203 = trunc i64 %202 to i32
  %204 = icmp eq i32 %203, 1
  br i1 %204, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %206 = getelementptr inbounds i64, i64* %51, i64 1
  %207 = load i64, i64* %206, align 8, !tbaa !304
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %208, 10
  br i1 %209, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %211 = icmp eq i64* %53, null
  br i1 %211, label %if_end66, label %if_then65, !prof !46

if_then65:                                        ; preds = %assert_end64
  %212 = load i64, i64* %53, align 8, !tbaa !306
  %213 = trunc i64 %212 to i32
  %214 = icmp eq i32 %213, 10
  %215 = getelementptr inbounds i64, i64* %53, i64 1
  %216 = load i64, i64* %215, align 8, !tbaa !320
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 1
  %219 = and i1 %214, %218
  br i1 %219, label %if_end66, label %assert_fail67, !prof !5

if_end66:                                         ; preds = %assert_end64, %if_then65
  %220 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %221 = load i64, i64* %220, align 8
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %assert_end70, label %assert_fail69, !prof !5

assert_fail67:                                    ; preds = %if_then65
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_fail69:                                    ; preds = %if_end66
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.45, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %if_end66
  %225 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %226 = load i32, i32* %225, align 4
  %227 = icmp eq i32 %226, 1
  br i1 %227, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %228 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %228(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %229 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = icmp eq i32 %35, %230
  br i1 %231, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %232 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %232(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %233 = tail call fastcc i32 @fused_nn_dense_nn_bias_add_compute_(i8* %27, i8* %37, i8* %49, i8* %43)
  ret i32 %233
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_dense_nn_bias_add_compute_(i8* noalias, i8* noalias, i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #1 {
entry:
  %4 = alloca [10 x float], align 16
  %5 = alloca %5, align 8
  %.sub = getelementptr inbounds [10 x float], [10 x float]* %4, i64 0, i64 0
  %6 = getelementptr inbounds %5, %5* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %5, %5* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %5, %5* %5, i64 0, i32 2
  store float* %.sub, float** %8, align 8
  %9 = bitcast %5* %5 to i8*
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.48, i8* nonnull %9, i32 0)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %for_begin.preheader, label %call_fail, !prof !5

for_begin.preheader:                              ; preds = %entry
  %13 = bitcast i8* %3 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !322
  %15 = bitcast [10 x float]* %4 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 16, !tbaa !325
  %17 = fadd <4 x float> %14, %16
  %18 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %17, <4 x float>* %18, align 4, !tbaa !328
  %19 = getelementptr inbounds i8, i8* %3, i64 16
  %20 = getelementptr inbounds [10 x float], [10 x float]* %4, i64 0, i64 4
  %21 = getelementptr inbounds i8, i8* %2, i64 16
  %22 = bitcast i8* %19 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !322
  %24 = bitcast float* %20 to <4 x float>*
  %25 = load <4 x float>, <4 x float>* %24, align 16, !tbaa !325
  %26 = fadd <4 x float> %23, %25
  %27 = bitcast i8* %21 to <4 x float>*
  store <4 x float> %26, <4 x float>* %27, align 4, !tbaa !328
  %28 = getelementptr inbounds i8, i8* %3, i64 32
  %29 = bitcast i8* %28 to float*
  %30 = load float, float* %29, align 4, !tbaa !322
  %31 = getelementptr inbounds [10 x float], [10 x float]* %4, i64 0, i64 8
  %32 = load float, float* %31, align 16, !tbaa !325
  %33 = fadd float %30, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 32
  %35 = bitcast i8* %34 to float*
  store float %33, float* %35, align 4, !tbaa !328
  %36 = getelementptr inbounds i8, i8* %3, i64 36
  %37 = bitcast i8* %36 to float*
  %38 = load float, float* %37, align 4, !tbaa !322
  %39 = getelementptr inbounds [10 x float], [10 x float]* %4, i64 0, i64 9
  %40 = load float, float* %39, align 4, !tbaa !325
  %41 = fadd float %38, %40
  %42 = getelementptr inbounds i8, i8* %2, i64 36
  %43 = bitcast i8* %42 to float*
  store float %41, float* %43, align 4, !tbaa !328
  br label %call_fail

call_fail:                                        ; preds = %for_begin.preheader, %entry
  ret i32 %11
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.48(i32, %0* nocapture readonly, i8* nocapture readonly) #3 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 9
  %14 = sdiv i32 %13, %12
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %14, %15
  %17 = icmp slt i32 %16, 10
  %18 = select i1 %17, i32 %16, i32 10
  %19 = mul nsw i32 %14, %0
  %20 = icmp slt i32 %19, 10
  %21 = select i1 %20, i32 %19, i32 10
  %22 = icmp slt i32 %21, %18
  br i1 %22, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %23 = sext i32 %21 to i64
  %24 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %23, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %25 = mul nsw i64 %indvars.iv7, 1548800
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %.06 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %34, %for_body2 ]
  %26 = shl nsw i64 %indvars.iv, 4
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = bitcast float* %27 to <16 x float>*
  %29 = load <16 x float>, <16 x float>* %28, align 64, !tbaa !331
  %30 = add nsw i64 %26, %25
  %31 = getelementptr inbounds float, float* %7, i64 %30
  %32 = bitcast float* %31 to <16 x float>*
  %33 = load <16 x float>, <16 x float>* %32, align 64, !tbaa !334
  %34 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %29, <16 x float> %33, <16 x float> %.06)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 96800
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !46

for_end3:                                         ; preds = %for_body2
  %35 = getelementptr inbounds float, float* %10, i64 %indvars.iv7
  %.0.vec.extract = extractelement <16 x float> %34, i32 0
  %36 = fadd float %.0.vec.extract, 0.000000e+00
  %.4.vec.extract = extractelement <16 x float> %34, i32 1
  %37 = fadd float %.4.vec.extract, %36
  %.8.vec.extract = extractelement <16 x float> %34, i32 2
  %38 = fadd float %.8.vec.extract, %37
  %.12.vec.extract = extractelement <16 x float> %34, i32 3
  %39 = fadd float %.12.vec.extract, %38
  %.16.vec.extract = extractelement <16 x float> %34, i32 4
  %40 = fadd float %.16.vec.extract, %39
  %.20.vec.extract = extractelement <16 x float> %34, i32 5
  %41 = fadd float %.20.vec.extract, %40
  %.24.vec.extract = extractelement <16 x float> %34, i32 6
  %42 = fadd float %.24.vec.extract, %41
  %.28.vec.extract = extractelement <16 x float> %34, i32 7
  %43 = fadd float %.28.vec.extract, %42
  %.32.vec.extract = extractelement <16 x float> %34, i32 8
  %44 = fadd float %.32.vec.extract, %43
  %.36.vec.extract = extractelement <16 x float> %34, i32 9
  %45 = fadd float %.36.vec.extract, %44
  %.40.vec.extract = extractelement <16 x float> %34, i32 10
  %46 = fadd float %.40.vec.extract, %45
  %.44.vec.extract = extractelement <16 x float> %34, i32 11
  %47 = fadd float %.44.vec.extract, %46
  %.48.vec.extract = extractelement <16 x float> %34, i32 12
  %48 = fadd float %.48.vec.extract, %47
  %.52.vec.extract = extractelement <16 x float> %34, i32 13
  %49 = fadd float %.52.vec.extract, %48
  %.56.vec.extract = extractelement <16 x float> %34, i32 14
  %50 = fadd float %.56.vec.extract, %49
  %.60.vec.extract = extractelement <16 x float> %34, i32 15
  %51 = fadd float %.60.vec.extract, %50
  store float %51, float* %35, align 4, !tbaa !325
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %52 = icmp slt i64 %indvars.iv.next8, %24
  br i1 %52, label %for_begin1.preheader, label %for_end, !prof !5
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fmuladd.v16f32(<16 x float>, <16 x float>, <16 x float>) #4

define dllexport i32 @fused_nn_softmax_1(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !337
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !351
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 1
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 2
  %50 = and i1 %46, %49
  %51 = and i1 %43, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !353
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !367
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 10
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.52, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = icmp eq i64* %19, null
  br i1 %62, label %if_end, label %if_then, !prof !46

if_then:                                          ; preds = %assert_end14
  %63 = load i64, i64* %19, align 8, !tbaa !369
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 10
  %66 = getelementptr inbounds i64, i64* %19, i64 1
  %67 = load i64, i64* %66, align 8, !tbaa !383
  %68 = trunc i64 %67 to i32
  %69 = icmp eq i32 %68, 1
  %70 = and i1 %65, %69
  br i1 %70, label %if_end, label %assert_fail15, !prof !5

if_end:                                           ; preds = %assert_end14, %if_then
  %71 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %assert_end18, label %assert_fail17, !prof !5

assert_fail15:                                    ; preds = %if_then
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_fail17:                                    ; preds = %if_end
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %if_end
  %76 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 2
  br i1 %78, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %80 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %81 = load i16, i16* %80, align 2
  %82 = icmp eq i16 %81, 1
  %83 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 2
  %89 = and i1 %85, %88
  %90 = and i1 %82, %89
  br i1 %90, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %92 = load i64, i64* %27, align 8, !tbaa !385
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %96 = getelementptr inbounds i64, i64* %27, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !399
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 10
  br i1 %99, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %101 = icmp eq i64* %29, null
  br i1 %101, label %if_end28, label %if_then27, !prof !46

if_then27:                                        ; preds = %assert_end26
  %102 = load i64, i64* %29, align 8, !tbaa !401
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 10
  %105 = getelementptr inbounds i64, i64* %29, i64 1
  %106 = load i64, i64* %105, align 8, !tbaa !415
  %107 = trunc i64 %106 to i32
  %108 = icmp eq i32 %107, 1
  %109 = and i1 %104, %108
  br i1 %109, label %if_end28, label %assert_fail29, !prof !5

if_end28:                                         ; preds = %assert_end26, %if_then27
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then27
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end28
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %114(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end28
  %115 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %119 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %23, %120
  br i1 %121, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  tail call fastcc void @fused_nn_softmax_1_compute_(i8* %15, i8* %25)
  ret i32 0
}

; Function Attrs: nofree noinline nounwind
define private fastcc void @fused_nn_softmax_1_compute_(i8* noalias nocapture readonly, i8* noalias nocapture) unnamed_addr #5 {
entry:
  %2 = bitcast i8* %0 to <4 x float>*
  %3 = load <4 x float>, <4 x float>* %2, align 4, !tbaa !417
  %4 = extractelement <4 x float> %3, i32 0
  %5 = fcmp olt float %4, 0xC7EFFFFFE0000000
  %6 = select i1 %5, float 0xC7EFFFFFE0000000, float %4
  %7 = extractelement <4 x float> %3, i32 1
  %8 = fcmp ogt float %6, %7
  %9 = select i1 %8, float %6, float %7
  %10 = extractelement <4 x float> %3, i32 2
  %11 = fcmp ogt float %9, %10
  %12 = select i1 %11, float %9, float %10
  %13 = extractelement <4 x float> %3, i32 3
  %14 = fcmp ogt float %12, %13
  %15 = select i1 %14, float %12, float %13
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !417
  %19 = extractelement <4 x float> %18, i32 0
  %20 = fcmp ogt float %15, %19
  %21 = select i1 %20, float %15, float %19
  %22 = extractelement <4 x float> %18, i32 1
  %23 = fcmp ogt float %21, %22
  %24 = select i1 %23, float %21, float %22
  %25 = extractelement <4 x float> %18, i32 2
  %26 = fcmp ogt float %24, %25
  %27 = select i1 %26, float %24, float %25
  %28 = extractelement <4 x float> %18, i32 3
  %29 = fcmp ogt float %27, %28
  %30 = select i1 %29, float %27, float %28
  %31 = getelementptr inbounds i8, i8* %0, i64 32
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4, !tbaa !417
  %34 = fcmp ogt float %30, %33
  %35 = select i1 %34, float %30, float %33
  %36 = getelementptr inbounds i8, i8* %0, i64 36
  %37 = bitcast i8* %36 to float*
  %38 = load float, float* %37, align 4, !tbaa !417
  %39 = fcmp ogt float %35, %38
  %40 = select i1 %39, float %35, float %38
  %41 = insertelement <4 x float> undef, float %40, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fsub <4 x float> %3, %42
  %44 = call <4 x float> @llvm.exp.v4f32(<4 x float> %43)
  %45 = fsub <4 x float> %18, %42
  %46 = call <4 x float> @llvm.exp.v4f32(<4 x float> %45)
  %47 = fsub float %33, %40
  %48 = tail call float @llvm.exp.f32(float %47)
  %49 = fsub float %38, %40
  %50 = tail call float @llvm.exp.f32(float %49)
  %51 = extractelement <4 x float> %44, i32 0
  %52 = fadd float %51, 0.000000e+00
  %53 = extractelement <4 x float> %44, i32 1
  %54 = fadd float %52, %53
  %55 = extractelement <4 x float> %44, i32 2
  %56 = fadd float %54, %55
  %57 = extractelement <4 x float> %44, i32 3
  %58 = fadd float %56, %57
  %59 = extractelement <4 x float> %46, i32 0
  %60 = fadd float %58, %59
  %61 = extractelement <4 x float> %46, i32 1
  %62 = fadd float %60, %61
  %63 = extractelement <4 x float> %46, i32 2
  %64 = fadd float %62, %63
  %65 = extractelement <4 x float> %46, i32 3
  %66 = fadd float %64, %65
  %67 = fadd float %66, %48
  %68 = fadd float %67, %50
  %69 = insertelement <4 x float> undef, float %68, i32 0
  %70 = shufflevector <4 x float> %69, <4 x float> undef, <4 x i32> zeroinitializer
  %71 = fdiv <4 x float> %44, %70
  %72 = bitcast i8* %1 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !420
  %73 = getelementptr inbounds i8, i8* %1, i64 16
  %74 = fdiv <4 x float> %46, %70
  %75 = bitcast i8* %73 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 4, !tbaa !420
  %76 = fdiv float %48, %68
  %77 = getelementptr inbounds i8, i8* %1, i64 32
  %78 = bitcast i8* %77 to float*
  store float %76, float* %78, align 4, !tbaa !420
  %79 = fdiv float %50, %68
  %80 = getelementptr inbounds i8, i8* %1, i64 36
  %81 = bitcast i8* %80 to float*
  store float %79, float* %81, align 4, !tbaa !420
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.exp.f32(float) #4

define dllexport i32 @fused_nn_conv2d_nn_bias_add_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !423
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !437
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !440
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %54 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %54(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %55 = getelementptr inbounds i8, i8* %1, i64 4
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 4, !tbaa !442
  switch i32 %57, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %59 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %59(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %60(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.60, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %61 = icmp eq i32 %33, 1
  br i1 %61, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 4
  br i1 %65, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %67 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %68 = load i16, i16* %67, align 2
  %69 = icmp eq i16 %68, 1
  %70 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 32
  %73 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 2
  %76 = and i1 %72, %75
  %77 = and i1 %69, %76
  br i1 %77, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %79 = load i64, i64* %29, align 8, !tbaa !444
  %80 = trunc i64 %79 to i32
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %83 = getelementptr inbounds i64, i64* %29, i64 1
  %84 = load i64, i64* %83, align 8, !tbaa !458
  %85 = trunc i64 %84 to i32
  %86 = icmp eq i32 %85, 3
  br i1 %86, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %87(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %88 = getelementptr inbounds i64, i64* %29, i64 2
  %89 = load i64, i64* %88, align 8, !tbaa !460
  %90 = trunc i64 %89 to i32
  %91 = icmp eq i32 %90, 224
  br i1 %91, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %93 = getelementptr inbounds i64, i64* %29, i64 3
  %94 = load i64, i64* %93, align 8, !tbaa !463
  %95 = trunc i64 %94 to i32
  %96 = icmp eq i32 %95, 224
  br i1 %96, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %97(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %98 = icmp eq i64* %31, null
  br i1 %98, label %if_end, label %if_then, !prof !46

if_then:                                          ; preds = %assert_end22
  %99 = bitcast i64* %31 to <4 x i64>*
  %100 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !465
  %101 = trunc <4 x i64> %100 to <4 x i32>
  %102 = icmp eq <4 x i32> %101, <i32 150528, i32 50176, i32 224, i32 1>
  %rdx.shuf93 = shufflevector <4 x i1> %102, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx94 = and <4 x i1> %102, %rdx.shuf93
  %rdx.shuf95 = shufflevector <4 x i1> %bin.rdx94, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx96 = and <4 x i1> %bin.rdx94, %rdx.shuf95
  %103 = extractelement <4 x i1> %bin.rdx96, i32 0
  br i1 %103, label %if_end, label %assert_fail23, !prof !5

if_end:                                           ; preds = %assert_end22, %if_then
  %104 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %105 = load i64, i64* %104, align 8
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %assert_end26, label %assert_fail25, !prof !5

assert_fail23:                                    ; preds = %if_then
  %107 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %107(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_fail25:                                    ; preds = %if_end
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %if_end
  %109 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 4
  br i1 %111, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %114 = load i16, i16* %113, align 2
  %115 = icmp eq i16 %114, 1
  %116 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 32
  %119 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 2
  %122 = and i1 %118, %121
  %123 = and i1 %115, %122
  br i1 %123, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %124 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %124(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %125 = load i64, i64* %39, align 8, !tbaa !477
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 32
  br i1 %127, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %128 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %128(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %129 = getelementptr inbounds i64, i64* %39, i64 1
  %130 = load i64, i64* %129, align 8, !tbaa !491
  %131 = trunc i64 %130 to i32
  %132 = icmp eq i32 %131, 3
  br i1 %132, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %133 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %133(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %134 = getelementptr inbounds i64, i64* %39, i64 2
  %135 = load i64, i64* %134, align 8, !tbaa !493
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %136, 5
  br i1 %137, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %138 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %138(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %139 = getelementptr inbounds i64, i64* %39, i64 3
  %140 = load i64, i64* %139, align 8, !tbaa !496
  %141 = trunc i64 %140 to i32
  %142 = icmp eq i32 %141, 5
  br i1 %142, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %143(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %144 = icmp eq i64* %41, null
  br i1 %144, label %if_end40, label %if_then39, !prof !46

if_then39:                                        ; preds = %assert_end38
  %145 = bitcast i64* %41 to <4 x i64>*
  %146 = load <4 x i64>, <4 x i64>* %145, align 8, !tbaa !498
  %147 = trunc <4 x i64> %146 to <4 x i32>
  %148 = icmp eq <4 x i32> %147, <i32 75, i32 25, i32 5, i32 1>
  %rdx.shuf89 = shufflevector <4 x i1> %148, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx90 = and <4 x i1> %148, %rdx.shuf89
  %rdx.shuf91 = shufflevector <4 x i1> %bin.rdx90, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx92 = and <4 x i1> %bin.rdx90, %rdx.shuf91
  %149 = extractelement <4 x i1> %bin.rdx92, i32 0
  br i1 %149, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %150 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %151 = load i64, i64* %150, align 8
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %153 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %153(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.70, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %154 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %154(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %155 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %156 = load i32, i32* %155, align 4
  %157 = icmp eq i32 %156, 1
  br i1 %157, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %158 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %158(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %159 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %35, %160
  br i1 %161, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %162 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %162(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %163 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %164 = load i32, i32* %163, align 4
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.33, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %167 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %168 = load i16, i16* %167, align 2
  %169 = icmp eq i16 %168, 1
  %170 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %171 = load i8, i8* %170, align 1
  %172 = icmp eq i8 %171, 32
  %173 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %174 = load i8, i8* %173, align 1
  %175 = icmp eq i8 %174, 2
  %176 = and i1 %172, %175
  %177 = and i1 %169, %176
  br i1 %177, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %178(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %179 = load i64, i64* %45, align 8, !tbaa !510
  %180 = trunc i64 %179 to i32
  %181 = icmp eq i32 %180, 32
  br i1 %181, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.71, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %183 = icmp eq i64* %47, null
  br i1 %183, label %if_end56, label %if_then55, !prof !46

if_then55:                                        ; preds = %assert_end54
  %184 = load i64, i64* %47, align 8, !tbaa !524
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 1
  br i1 %186, label %if_end56, label %assert_fail57, !prof !5

if_end56:                                         ; preds = %assert_end54, %if_then55
  %187 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %188 = load i64, i64* %187, align 8
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %assert_end60, label %assert_fail59, !prof !5

assert_fail57:                                    ; preds = %if_then55
  %190 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %190(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_fail59:                                    ; preds = %if_end56
  %191 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %191(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.37, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %if_end56
  %192 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %193 = load i32, i32* %192, align 4
  %194 = icmp eq i32 %193, 1
  br i1 %194, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %195 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %195(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %196 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %197 = load i32, i32* %196, align 4
  %198 = icmp eq i32 %35, %197
  br i1 %198, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %199(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %200 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %201 = load i32, i32* %200, align 4
  %202 = icmp eq i32 %201, 4
  br i1 %202, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %203 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %203(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %204 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %205 = load i16, i16* %204, align 2
  %206 = icmp eq i16 %205, 1
  %207 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %208 = load i8, i8* %207, align 1
  %209 = icmp eq i8 %208, 32
  %210 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = and i1 %209, %212
  %214 = and i1 %206, %213
  br i1 %214, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %215 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %215(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.41, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %216 = load i64, i64* %51, align 8, !tbaa !538
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 1
  br i1 %218, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %219 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %219(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %220 = getelementptr inbounds i64, i64* %51, i64 1
  %221 = load i64, i64* %220, align 8, !tbaa !552
  %222 = trunc i64 %221 to i32
  %223 = icmp eq i32 %222, 32
  br i1 %223, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %225 = getelementptr inbounds i64, i64* %51, i64 2
  %226 = load i64, i64* %225, align 8, !tbaa !554
  %227 = trunc i64 %226 to i32
  %228 = icmp eq i32 %227, 220
  br i1 %228, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %229 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %229(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %230 = getelementptr inbounds i64, i64* %51, i64 3
  %231 = load i64, i64* %230, align 8, !tbaa !557
  %232 = trunc i64 %231 to i32
  %233 = icmp eq i32 %232, 220
  br i1 %233, label %assert_end76, label %assert_fail75, !prof !5

assert_fail75:                                    ; preds = %assert_end74
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %assert_end74
  %235 = icmp eq i64* %53, null
  br i1 %235, label %if_end78, label %if_then77, !prof !46

if_then77:                                        ; preds = %assert_end76
  %236 = bitcast i64* %53 to <4 x i64>*
  %237 = load <4 x i64>, <4 x i64>* %236, align 8, !tbaa !559
  %238 = trunc <4 x i64> %237 to <4 x i32>
  %239 = icmp eq <4 x i32> %238, <i32 1548800, i32 48400, i32 220, i32 1>
  %rdx.shuf = shufflevector <4 x i1> %239, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %239, %rdx.shuf
  %rdx.shuf87 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx88 = and <4 x i1> %bin.rdx, %rdx.shuf87
  %240 = extractelement <4 x i1> %bin.rdx88, i32 0
  br i1 %240, label %if_end78, label %assert_fail79, !prof !5

if_end78:                                         ; preds = %assert_end76, %if_then77
  %241 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %242 = load i64, i64* %241, align 8
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %assert_end82, label %assert_fail81, !prof !5

assert_fail79:                                    ; preds = %if_then77
  %244 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %244(i8* getelementptr inbounds ([204 x i8], [204 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_fail81:                                    ; preds = %if_end78
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.45, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %if_end78
  %246 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %247 = load i32, i32* %246, align 4
  %248 = icmp eq i32 %247, 1
  br i1 %248, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %249 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %249(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %250 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %251 = load i32, i32* %250, align 4
  %252 = icmp eq i32 %35, %251
  br i1 %252, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %254 = tail call fastcc i32 @fused_nn_conv2d_nn_bias_add_nn_relu_compute_(i8* %27, i8* %37, i8* %49, i8* %43, i32 %35)
  ret i32 %254
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_conv2d_nn_bias_add_nn_relu_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #1 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 602112, i32 2, i32 32)
  %7 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %8 = tail call i8* %7(i32 1, i32 %4, i64 9600, i32 2, i32 32)
  %9 = alloca %6, align 8
  %10 = getelementptr inbounds %6, %6* %9, i64 0, i32 0
  store i8* %6, i8** %10, align 8
  %11 = getelementptr inbounds %6, %6* %9, i64 0, i32 1
  store i8* %0, i8** %11, align 8
  %12 = bitcast %6* %9 to i8*
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.77, i8* nonnull %12, i32 0)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end4, %call_end, %call_end6, %entry
  %merge = phi i32 [ %14, %entry ], [ 0, %call_end6 ], [ %21, %call_end ], [ %31, %call_end4 ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %16 = alloca %7, align 8
  %17 = getelementptr inbounds %7, %7* %16, i64 0, i32 0
  store i8* %8, i8** %17, align 8
  %18 = getelementptr inbounds %7, %7* %16, i64 0, i32 1
  store i8* %1, i8** %18, align 8
  %19 = bitcast %7* %16 to i8*
  %20 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %21 = call i32 %20(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.78, i8* nonnull %19, i32 0)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %call_end4, label %call_fail, !prof !5

call_end4:                                        ; preds = %call_end
  %23 = alloca %8, align 8
  %24 = getelementptr inbounds %8, %8* %23, i64 0, i32 0
  store i8* %6, i8** %24, align 8
  %25 = getelementptr inbounds %8, %8* %23, i64 0, i32 1
  store i8* %8, i8** %25, align 8
  %26 = getelementptr inbounds %8, %8* %23, i64 0, i32 2
  store i8* %2, i8** %26, align 8
  %27 = getelementptr inbounds %8, %8* %23, i64 0, i32 3
  store i8* %3, i8** %27, align 8
  %28 = getelementptr inbounds %8, %8* %23, i64 0, i32 4
  store i32 %4, i32* %28, align 8
  %29 = bitcast %8* %23 to i8*
  %30 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %31 = call i32 %30(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.79, i8* nonnull %29, i32 0)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %call_end6, label %call_fail, !prof !5

call_end6:                                        ; preds = %call_end4
  %33 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %34 = call i32 %33(i32 1, i32 %4, i8* %8)
  %35 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %36 = call i32 %35(i32 1, i32 %4, i8* %6)
  br label %call_fail
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.77(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 223
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 224
  %15 = select i1 %14, i32 %13, i32 224
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 224
  %18 = select i1 %17, i32 %16, i32 224
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  %22 = mul i32 %18, 224
  %23 = add i32 %22, 50176
  %24 = add i32 %22, 100352
  %25 = getelementptr inbounds float, float* %4, i64 -2
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %indvars.iv7 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %26 = mul i32 %indvar, 224
  %27 = mul nsw i64 %indvars.iv7, 672
  %28 = trunc i64 %indvars.iv7 to i32
  %29 = mul i32 %28, 224
  %30 = add i32 %24, %26
  %31 = add i32 %23, %26
  %32 = add i32 %22, %26
  %33 = icmp sgt i32 %32, 2147483424
  %34 = icmp sgt i32 %31, 2147483424
  %35 = or i1 %33, %34
  %36 = icmp sgt i32 %30, 2147483424
  %37 = or i1 %35, %36
  br i1 %37, label %for_begin4.preheader, label %vector.body

vector.body:                                      ; preds = %for_begin1.preheader, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %for_begin1.preheader ]
  %38 = mul nuw nsw i64 %index, 3
  %39 = add nsw i64 %38, %27
  %40 = trunc i64 %index to i32
  %41 = add i32 %29, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, float* %7, i64 %42
  %44 = bitcast float* %43 to <4 x i32>*
  %wide.load = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !571
  %45 = add i32 %41, 50176
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %7, i64 %46
  %48 = bitcast float* %47 to <4 x i32>*
  %wide.load18 = load <4 x i32>, <4 x i32>* %48, align 4, !tbaa !571
  %49 = or i64 %39, 2
  %50 = add i32 %41, 100352
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = bitcast float* %52 to <4 x i32>*
  %wide.load19 = load <4 x i32>, <4 x i32>* %53, align 4, !tbaa !571
  %54 = getelementptr inbounds float, float* %25, i64 %49
  %55 = bitcast float* %54 to <12 x i32>*
  %56 = shufflevector <4 x i32> %wide.load, <4 x i32> %wide.load18, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %57 = shufflevector <4 x i32> %wide.load19, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %interleaved.vec = shufflevector <8 x i32> %56, <8 x i32> %57, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x i32> %interleaved.vec, <12 x i32>* %55, align 4, !tbaa !574
  %index.next = add i64 %index, 4
  %58 = icmp eq i64 %index.next, 224
  br i1 %58, label %for_end3, label %vector.body, !llvm.loop !577

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_begin1.preheader, %for_begin4.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for_begin4.preheader ], [ 0, %for_begin1.preheader ]
  %59 = mul nuw nsw i64 %indvars.iv, 3
  %60 = add nsw i64 %59, %27
  %61 = trunc i64 %indvars.iv to i32
  %62 = add i32 %29, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = bitcast float* %64 to i32*
  %66 = load i32, i32* %65, align 4, !tbaa !571
  %67 = getelementptr inbounds float, float* %4, i64 %60
  %68 = bitcast float* %67 to i32*
  store i32 %66, i32* %68, align 4, !tbaa !574
  %69 = add nsw i64 %60, 1
  %70 = add i32 %62, 50176
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = bitcast float* %72 to i32*
  %74 = load i32, i32* %73, align 4, !tbaa !571
  %75 = getelementptr inbounds float, float* %4, i64 %69
  %76 = bitcast float* %75 to i32*
  store i32 %74, i32* %76, align 4, !tbaa !574
  %77 = add nsw i64 %60, 2
  %78 = add i32 %62, 100352
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %7, i64 %79
  %81 = bitcast float* %80 to i32*
  %82 = load i32, i32* %81, align 4, !tbaa !571
  %83 = getelementptr inbounds float, float* %4, i64 %77
  %84 = bitcast float* %83 to i32*
  store i32 %82, i32* %84, align 4, !tbaa !574
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 224
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !46, !llvm.loop !579

for_end3:                                         ; preds = %vector.body, %for_begin4.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %85 = icmp slt i64 %indvars.iv.next8, %21
  %indvar.next = add i32 %indvar, 1
  br i1 %85, label %for_begin1.preheader, label %for_end, !prof !5
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.78(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 19
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 20
  %15 = select i1 %14, i32 %13, i32 20
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 20
  %18 = select i1 %17, i32 %16, i32 20
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv7, 120
  %23 = trunc i64 %indvars.iv7 to i32
  %24 = srem i32 %23, 5
  %25 = mul nsw i32 %24, 5
  %26 = sdiv i32 %23, 5
  %27 = mul nsw i32 %26, 600
  %28 = add i32 %25, %27
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %29 = mul nuw nsw i64 %indvars.iv, 24
  %30 = add nsw i64 %29, %22
  %31 = trunc i64 %indvars.iv to i32
  %32 = add i32 %28, %31
  %33 = add nsw i32 %32, 75
  %34 = add nsw i32 %32, 150
  %35 = add nsw i32 %32, 225
  %36 = add nsw i32 %32, 300
  %37 = add nsw i32 %32, 375
  %38 = add nsw i32 %32, 450
  %39 = add nsw i32 %32, 525
  %40 = sext i32 %32 to i64
  %41 = getelementptr inbounds float, float* %7, i64 %40
  %42 = load float, float* %41, align 4, !tbaa !580
  %43 = insertelement <8 x float> undef, float %42, i32 0
  %44 = sext i32 %33 to i64
  %45 = getelementptr inbounds float, float* %7, i64 %44
  %46 = load float, float* %45, align 4, !tbaa !580
  %47 = insertelement <8 x float> %43, float %46, i32 1
  %48 = sext i32 %34 to i64
  %49 = getelementptr inbounds float, float* %7, i64 %48
  %50 = load float, float* %49, align 4, !tbaa !580
  %51 = insertelement <8 x float> %47, float %50, i32 2
  %52 = sext i32 %35 to i64
  %53 = getelementptr inbounds float, float* %7, i64 %52
  %54 = load float, float* %53, align 4, !tbaa !580
  %55 = insertelement <8 x float> %51, float %54, i32 3
  %56 = sext i32 %36 to i64
  %57 = getelementptr inbounds float, float* %7, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !580
  %59 = insertelement <8 x float> %55, float %58, i32 4
  %60 = sext i32 %37 to i64
  %61 = getelementptr inbounds float, float* %7, i64 %60
  %62 = load float, float* %61, align 4, !tbaa !580
  %63 = insertelement <8 x float> %59, float %62, i32 5
  %64 = sext i32 %38 to i64
  %65 = getelementptr inbounds float, float* %7, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !580
  %67 = insertelement <8 x float> %63, float %66, i32 6
  %68 = sext i32 %39 to i64
  %69 = getelementptr inbounds float, float* %7, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !580
  %71 = insertelement <8 x float> %67, float %70, i32 7
  %72 = getelementptr inbounds float, float* %4, i64 %30
  %73 = bitcast float* %72 to <8 x float>*
  store <8 x float> %71, <8 x float>* %73, align 32, !tbaa !583
  %74 = add nsw i64 %30, 8
  %75 = add i32 %32, 25
  %76 = add i32 %32, 100
  %77 = add i32 %32, 175
  %78 = add i32 %32, 250
  %79 = add i32 %32, 325
  %80 = add i32 %32, 400
  %81 = add i32 %32, 475
  %82 = add i32 %32, 550
  %83 = sext i32 %75 to i64
  %84 = getelementptr inbounds float, float* %7, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !580
  %86 = insertelement <8 x float> undef, float %85, i32 0
  %87 = sext i32 %76 to i64
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = load float, float* %88, align 4, !tbaa !580
  %90 = insertelement <8 x float> %86, float %89, i32 1
  %91 = sext i32 %77 to i64
  %92 = getelementptr inbounds float, float* %7, i64 %91
  %93 = load float, float* %92, align 4, !tbaa !580
  %94 = insertelement <8 x float> %90, float %93, i32 2
  %95 = sext i32 %78 to i64
  %96 = getelementptr inbounds float, float* %7, i64 %95
  %97 = load float, float* %96, align 4, !tbaa !580
  %98 = insertelement <8 x float> %94, float %97, i32 3
  %99 = sext i32 %79 to i64
  %100 = getelementptr inbounds float, float* %7, i64 %99
  %101 = load float, float* %100, align 4, !tbaa !580
  %102 = insertelement <8 x float> %98, float %101, i32 4
  %103 = sext i32 %80 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !580
  %106 = insertelement <8 x float> %102, float %105, i32 5
  %107 = sext i32 %81 to i64
  %108 = getelementptr inbounds float, float* %7, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !580
  %110 = insertelement <8 x float> %106, float %109, i32 6
  %111 = sext i32 %82 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !580
  %114 = insertelement <8 x float> %110, float %113, i32 7
  %115 = getelementptr inbounds float, float* %4, i64 %74
  %116 = bitcast float* %115 to <8 x float>*
  store <8 x float> %114, <8 x float>* %116, align 32, !tbaa !583
  %117 = add nsw i64 %30, 16
  %118 = add i32 %32, 50
  %119 = add i32 %32, 125
  %120 = add i32 %32, 200
  %121 = add i32 %32, 275
  %122 = add i32 %32, 350
  %123 = add i32 %32, 425
  %124 = add i32 %32, 500
  %125 = add i32 %32, 575
  %126 = sext i32 %118 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !580
  %129 = insertelement <8 x float> undef, float %128, i32 0
  %130 = sext i32 %119 to i64
  %131 = getelementptr inbounds float, float* %7, i64 %130
  %132 = load float, float* %131, align 4, !tbaa !580
  %133 = insertelement <8 x float> %129, float %132, i32 1
  %134 = sext i32 %120 to i64
  %135 = getelementptr inbounds float, float* %7, i64 %134
  %136 = load float, float* %135, align 4, !tbaa !580
  %137 = insertelement <8 x float> %133, float %136, i32 2
  %138 = sext i32 %121 to i64
  %139 = getelementptr inbounds float, float* %7, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !580
  %141 = insertelement <8 x float> %137, float %140, i32 3
  %142 = sext i32 %122 to i64
  %143 = getelementptr inbounds float, float* %7, i64 %142
  %144 = load float, float* %143, align 4, !tbaa !580
  %145 = insertelement <8 x float> %141, float %144, i32 4
  %146 = sext i32 %123 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !580
  %149 = insertelement <8 x float> %145, float %148, i32 5
  %150 = sext i32 %124 to i64
  %151 = getelementptr inbounds float, float* %7, i64 %150
  %152 = load float, float* %151, align 4, !tbaa !580
  %153 = insertelement <8 x float> %149, float %152, i32 6
  %154 = sext i32 %125 to i64
  %155 = getelementptr inbounds float, float* %7, i64 %154
  %156 = load float, float* %155, align 4, !tbaa !580
  %157 = insertelement <8 x float> %153, float %156, i32 7
  %158 = getelementptr inbounds float, float* %4, i64 %117
  %159 = bitcast float* %158 to <8 x float>*
  store <8 x float> %157, <8 x float>* %159, align 32, !tbaa !583
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 5
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !46

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %160 = icmp slt i64 %indvars.iv.next8, %21
  br i1 %160, label %for_begin1.preheader, label %for_end, !prof !5
}

define private i32 @__tvm_parallel_lambda.79(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 879
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 880
  %24 = select i1 %23, i32 %22, i32 880
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 880
  %27 = select i1 %26, i32 %25, i32 880
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end18
  %29 = phi i32 [ %290, %for_end18 ], [ %27, %entry ]
  %30 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %31 = tail call i8* %30(i32 1, i32 %16, i64 7040, i32 2, i32 32)
  %32 = srem i32 %29, 220
  %33 = sdiv i32 %29, 220
  %34 = mul nsw i32 %33, 600
  %35 = bitcast i8* %31 to float*
  %36 = sext i32 %34 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end18, %entry
  ret i32 0

for_begin16.preheader:                            ; preds = %for_begin13.preheader
  %37 = mul nsw i32 %32, 220
  %38 = mul nsw i32 %33, 387200
  %39 = add nsw i32 %38, %37
  %40 = shl nsw i32 %33, 3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %13, i64 %41
  %43 = bitcast float* %42 to <8 x float>*
  %44 = load <8 x float>, <8 x float>* %43, align 32, !tbaa !586
  %45 = sext i32 %39 to i64
  br label %for_begin19.preheader

for_body2:                                        ; preds = %for_begin13.preheader, %for_body
  %indvar = phi i64 [ 0, %for_body ], [ %indvar.next, %for_begin13.preheader ]
  %46 = trunc i64 %indvar to i32
  %47 = mul i32 %46, 66
  br label %for_begin7.preheader

for_begin13.preheader:                            ; preds = %for_end9
  %48 = mul nuw nsw i64 %indvar, 176
  %49 = getelementptr inbounds float, float* %35, i64 %48
  %50 = bitcast float* %49 to <8 x float>*
  store <8 x float> %158, <8 x float>* %50, align 32, !tbaa !589
  %51 = or i64 %48, 8
  %52 = getelementptr inbounds float, float* %35, i64 %51
  %53 = bitcast float* %52 to <8 x float>*
  store <8 x float> %164, <8 x float>* %53, align 32, !tbaa !589
  %54 = add nuw nsw i64 %48, 16
  %55 = getelementptr inbounds float, float* %35, i64 %54
  %56 = bitcast float* %55 to <8 x float>*
  store <8 x float> %170, <8 x float>* %56, align 32, !tbaa !589
  %57 = add nuw nsw i64 %48, 24
  %58 = getelementptr inbounds float, float* %35, i64 %57
  %59 = bitcast float* %58 to <8 x float>*
  store <8 x float> %176, <8 x float>* %59, align 32, !tbaa !589
  %60 = add nuw nsw i64 %48, 32
  %61 = getelementptr inbounds float, float* %35, i64 %60
  %62 = bitcast float* %61 to <8 x float>*
  store <8 x float> %182, <8 x float>* %62, align 32, !tbaa !589
  %63 = add nuw nsw i64 %48, 40
  %64 = getelementptr inbounds float, float* %35, i64 %63
  %65 = bitcast float* %64 to <8 x float>*
  store <8 x float> %188, <8 x float>* %65, align 32, !tbaa !589
  %66 = add nuw nsw i64 %48, 48
  %67 = getelementptr inbounds float, float* %35, i64 %66
  %68 = bitcast float* %67 to <8 x float>*
  store <8 x float> %194, <8 x float>* %68, align 32, !tbaa !589
  %69 = add nuw nsw i64 %48, 56
  %70 = getelementptr inbounds float, float* %35, i64 %69
  %71 = bitcast float* %70 to <8 x float>*
  store <8 x float> %200, <8 x float>* %71, align 32, !tbaa !589
  %72 = add nuw nsw i64 %48, 64
  %73 = getelementptr inbounds float, float* %35, i64 %72
  %74 = bitcast float* %73 to <8 x float>*
  store <8 x float> %206, <8 x float>* %74, align 32, !tbaa !589
  %75 = add nuw nsw i64 %48, 72
  %76 = getelementptr inbounds float, float* %35, i64 %75
  %77 = bitcast float* %76 to <8 x float>*
  store <8 x float> %212, <8 x float>* %77, align 32, !tbaa !589
  %78 = add nuw nsw i64 %48, 80
  %79 = getelementptr inbounds float, float* %35, i64 %78
  %80 = bitcast float* %79 to <8 x float>*
  store <8 x float> %218, <8 x float>* %80, align 32, !tbaa !589
  %81 = add nuw nsw i64 %48, 88
  %82 = getelementptr inbounds float, float* %35, i64 %81
  %83 = bitcast float* %82 to <8 x float>*
  store <8 x float> %224, <8 x float>* %83, align 32, !tbaa !589
  %84 = add nuw nsw i64 %48, 96
  %85 = getelementptr inbounds float, float* %35, i64 %84
  %86 = bitcast float* %85 to <8 x float>*
  store <8 x float> %230, <8 x float>* %86, align 32, !tbaa !589
  %87 = add nuw nsw i64 %48, 104
  %88 = getelementptr inbounds float, float* %35, i64 %87
  %89 = bitcast float* %88 to <8 x float>*
  store <8 x float> %236, <8 x float>* %89, align 32, !tbaa !589
  %90 = add nuw nsw i64 %48, 112
  %91 = getelementptr inbounds float, float* %35, i64 %90
  %92 = bitcast float* %91 to <8 x float>*
  store <8 x float> %242, <8 x float>* %92, align 32, !tbaa !589
  %93 = add nuw nsw i64 %48, 120
  %94 = getelementptr inbounds float, float* %35, i64 %93
  %95 = bitcast float* %94 to <8 x float>*
  store <8 x float> %248, <8 x float>* %95, align 32, !tbaa !589
  %96 = add nuw nsw i64 %48, 128
  %97 = getelementptr inbounds float, float* %35, i64 %96
  %98 = bitcast float* %97 to <8 x float>*
  store <8 x float> %254, <8 x float>* %98, align 32, !tbaa !589
  %99 = add nuw nsw i64 %48, 136
  %100 = getelementptr inbounds float, float* %35, i64 %99
  %101 = bitcast float* %100 to <8 x float>*
  store <8 x float> %260, <8 x float>* %101, align 32, !tbaa !589
  %102 = add nuw nsw i64 %48, 144
  %103 = getelementptr inbounds float, float* %35, i64 %102
  %104 = bitcast float* %103 to <8 x float>*
  store <8 x float> %266, <8 x float>* %104, align 32, !tbaa !589
  %105 = add nuw nsw i64 %48, 152
  %106 = getelementptr inbounds float, float* %35, i64 %105
  %107 = bitcast float* %106 to <8 x float>*
  store <8 x float> %272, <8 x float>* %107, align 32, !tbaa !589
  %108 = add nuw nsw i64 %48, 160
  %109 = getelementptr inbounds float, float* %35, i64 %108
  %110 = bitcast float* %109 to <8 x float>*
  store <8 x float> %278, <8 x float>* %110, align 32, !tbaa !589
  %111 = add nuw nsw i64 %48, 168
  %112 = getelementptr inbounds float, float* %35, i64 %111
  %113 = bitcast float* %112 to <8 x float>*
  store <8 x float> %284, <8 x float>* %113, align 32, !tbaa !589
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond184 = icmp eq i64 %indvar.next, 10
  br i1 %exitcond184, label %for_begin16.preheader, label %for_body2, !prof !46

for_begin7.preheader:                             ; preds = %for_end9, %for_body2
  %indvars.iv178 = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next179, %for_end9 ]
  %.lcssa68.lcssa153 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %284, %for_end9 ]
  %.lcssa66.lcssa151 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %278, %for_end9 ]
  %.lcssa64.lcssa149 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %272, %for_end9 ]
  %.lcssa62.lcssa147 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %266, %for_end9 ]
  %.lcssa60.lcssa145 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %260, %for_end9 ]
  %.lcssa58.lcssa143 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %254, %for_end9 ]
  %.lcssa56.lcssa141 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %248, %for_end9 ]
  %.lcssa54.lcssa139 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %242, %for_end9 ]
  %.lcssa52.lcssa137 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %236, %for_end9 ]
  %.lcssa50.lcssa135 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %230, %for_end9 ]
  %.lcssa48.lcssa133 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %224, %for_end9 ]
  %.lcssa46.lcssa131 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %218, %for_end9 ]
  %.lcssa44.lcssa129 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %212, %for_end9 ]
  %.lcssa42.lcssa127 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %206, %for_end9 ]
  %.lcssa40.lcssa125 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %200, %for_end9 ]
  %.lcssa38.lcssa123 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %194, %for_end9 ]
  %.lcssa36.lcssa121 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %188, %for_end9 ]
  %.lcssa34.lcssa119 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %182, %for_end9 ]
  %.lcssa32.lcssa117 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %176, %for_end9 ]
  %.lcssa30.lcssa116 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %170, %for_end9 ]
  %.lcssa28.lcssa114 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %164, %for_end9 ]
  %.lcssa.lcssa112 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %158, %for_end9 ]
  %114 = phi i32 [ 0, %for_body2 ], [ %125, %for_end9 ]
  %115 = add nsw i32 %114, %32
  %116 = mul i32 %115, 672
  %117 = add nsw i32 %116, %47
  %118 = mul nuw nsw i64 %indvars.iv178, 120
  %119 = add nsw i64 %118, %36
  %120 = sext i32 %117 to i64
  br label %for_begin10.preheader

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv175 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next176, %for_end12 ]
  %.lcssa68111 = phi <8 x float> [ %.lcssa68.lcssa153, %for_begin7.preheader ], [ %284, %for_end12 ]
  %.lcssa66109 = phi <8 x float> [ %.lcssa66.lcssa151, %for_begin7.preheader ], [ %278, %for_end12 ]
  %.lcssa64107 = phi <8 x float> [ %.lcssa64.lcssa149, %for_begin7.preheader ], [ %272, %for_end12 ]
  %.lcssa62105 = phi <8 x float> [ %.lcssa62.lcssa147, %for_begin7.preheader ], [ %266, %for_end12 ]
  %.lcssa60103 = phi <8 x float> [ %.lcssa60.lcssa145, %for_begin7.preheader ], [ %260, %for_end12 ]
  %.lcssa58101 = phi <8 x float> [ %.lcssa58.lcssa143, %for_begin7.preheader ], [ %254, %for_end12 ]
  %.lcssa5699 = phi <8 x float> [ %.lcssa56.lcssa141, %for_begin7.preheader ], [ %248, %for_end12 ]
  %.lcssa5497 = phi <8 x float> [ %.lcssa54.lcssa139, %for_begin7.preheader ], [ %242, %for_end12 ]
  %.lcssa5295 = phi <8 x float> [ %.lcssa52.lcssa137, %for_begin7.preheader ], [ %236, %for_end12 ]
  %.lcssa5093 = phi <8 x float> [ %.lcssa50.lcssa135, %for_begin7.preheader ], [ %230, %for_end12 ]
  %.lcssa4891 = phi <8 x float> [ %.lcssa48.lcssa133, %for_begin7.preheader ], [ %224, %for_end12 ]
  %.lcssa4689 = phi <8 x float> [ %.lcssa46.lcssa131, %for_begin7.preheader ], [ %218, %for_end12 ]
  %.lcssa4487 = phi <8 x float> [ %.lcssa44.lcssa129, %for_begin7.preheader ], [ %212, %for_end12 ]
  %.lcssa4285 = phi <8 x float> [ %.lcssa42.lcssa127, %for_begin7.preheader ], [ %206, %for_end12 ]
  %.lcssa4083 = phi <8 x float> [ %.lcssa40.lcssa125, %for_begin7.preheader ], [ %200, %for_end12 ]
  %.lcssa3881 = phi <8 x float> [ %.lcssa38.lcssa123, %for_begin7.preheader ], [ %194, %for_end12 ]
  %.lcssa3679 = phi <8 x float> [ %.lcssa36.lcssa121, %for_begin7.preheader ], [ %188, %for_end12 ]
  %.lcssa3477 = phi <8 x float> [ %.lcssa34.lcssa119, %for_begin7.preheader ], [ %182, %for_end12 ]
  %.lcssa3275 = phi <8 x float> [ %.lcssa32.lcssa117, %for_begin7.preheader ], [ %176, %for_end12 ]
  %.lcssa3073 = phi <8 x float> [ %.lcssa30.lcssa116, %for_begin7.preheader ], [ %170, %for_end12 ]
  %.lcssa2872 = phi <8 x float> [ %.lcssa28.lcssa114, %for_begin7.preheader ], [ %164, %for_end12 ]
  %.lcssa70 = phi <8 x float> [ %.lcssa.lcssa112, %for_begin7.preheader ], [ %158, %for_end12 ]
  %121 = mul nuw nsw i64 %indvars.iv175, 3
  %122 = add nsw i64 %121, %120
  %123 = mul nuw nsw i64 %indvars.iv175, 24
  %124 = add nsw i64 %119, %123
  br label %for_body11

for_end9:                                         ; preds = %for_end12
  %indvars.iv.next179 = add nuw nsw i64 %indvars.iv178, 1
  %125 = add nuw nsw i32 %114, 1
  %exitcond180 = icmp eq i64 %indvars.iv.next179, 5
  br i1 %exitcond180, label %for_begin13.preheader, label %for_begin7.preheader, !prof !46

for_body11:                                       ; preds = %for_body11, %for_begin10.preheader
  %indvars.iv = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next, %for_body11 ]
  %126 = phi <8 x float> [ %.lcssa68111, %for_begin10.preheader ], [ %284, %for_body11 ]
  %127 = phi <8 x float> [ %.lcssa66109, %for_begin10.preheader ], [ %278, %for_body11 ]
  %128 = phi <8 x float> [ %.lcssa64107, %for_begin10.preheader ], [ %272, %for_body11 ]
  %129 = phi <8 x float> [ %.lcssa62105, %for_begin10.preheader ], [ %266, %for_body11 ]
  %130 = phi <8 x float> [ %.lcssa60103, %for_begin10.preheader ], [ %260, %for_body11 ]
  %131 = phi <8 x float> [ %.lcssa58101, %for_begin10.preheader ], [ %254, %for_body11 ]
  %132 = phi <8 x float> [ %.lcssa5699, %for_begin10.preheader ], [ %248, %for_body11 ]
  %133 = phi <8 x float> [ %.lcssa5497, %for_begin10.preheader ], [ %242, %for_body11 ]
  %134 = phi <8 x float> [ %.lcssa5295, %for_begin10.preheader ], [ %236, %for_body11 ]
  %135 = phi <8 x float> [ %.lcssa5093, %for_begin10.preheader ], [ %230, %for_body11 ]
  %136 = phi <8 x float> [ %.lcssa4891, %for_begin10.preheader ], [ %224, %for_body11 ]
  %137 = phi <8 x float> [ %.lcssa4689, %for_begin10.preheader ], [ %218, %for_body11 ]
  %138 = phi <8 x float> [ %.lcssa4487, %for_begin10.preheader ], [ %212, %for_body11 ]
  %139 = phi <8 x float> [ %.lcssa4285, %for_begin10.preheader ], [ %206, %for_body11 ]
  %140 = phi <8 x float> [ %.lcssa4083, %for_begin10.preheader ], [ %200, %for_body11 ]
  %141 = phi <8 x float> [ %.lcssa3881, %for_begin10.preheader ], [ %194, %for_body11 ]
  %142 = phi <8 x float> [ %.lcssa3679, %for_begin10.preheader ], [ %188, %for_body11 ]
  %143 = phi <8 x float> [ %.lcssa3477, %for_begin10.preheader ], [ %182, %for_body11 ]
  %144 = phi <8 x float> [ %.lcssa3275, %for_begin10.preheader ], [ %176, %for_body11 ]
  %145 = phi <8 x float> [ %.lcssa3073, %for_begin10.preheader ], [ %170, %for_body11 ]
  %146 = phi <8 x float> [ %.lcssa2872, %for_begin10.preheader ], [ %164, %for_body11 ]
  %147 = phi <8 x float> [ %.lcssa70, %for_begin10.preheader ], [ %158, %for_body11 ]
  %148 = add nsw i64 %122, %indvars.iv
  %149 = getelementptr inbounds float, float* %4, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !574
  %151 = insertelement <8 x float> undef, float %150, i32 0
  %152 = shufflevector <8 x float> %151, <8 x float> undef, <8 x i32> zeroinitializer
  %153 = shl i64 %indvars.iv, 3
  %154 = add nsw i64 %124, %153
  %155 = getelementptr inbounds float, float* %7, i64 %154
  %156 = bitcast float* %155 to <8 x float>*
  %157 = load <8 x float>, <8 x float>* %156, align 32, !tbaa !583
  %158 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %152, <8 x float> %157, <8 x float> %147)
  %159 = add nsw i64 %148, 3
  %160 = getelementptr inbounds float, float* %4, i64 %159
  %161 = load float, float* %160, align 4, !tbaa !574
  %162 = insertelement <8 x float> undef, float %161, i32 0
  %163 = shufflevector <8 x float> %162, <8 x float> undef, <8 x i32> zeroinitializer
  %164 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %163, <8 x float> %157, <8 x float> %146)
  %165 = add nsw i64 %148, 6
  %166 = getelementptr inbounds float, float* %4, i64 %165
  %167 = load float, float* %166, align 4, !tbaa !574
  %168 = insertelement <8 x float> undef, float %167, i32 0
  %169 = shufflevector <8 x float> %168, <8 x float> undef, <8 x i32> zeroinitializer
  %170 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %169, <8 x float> %157, <8 x float> %145)
  %171 = add nsw i64 %148, 9
  %172 = getelementptr inbounds float, float* %4, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !574
  %174 = insertelement <8 x float> undef, float %173, i32 0
  %175 = shufflevector <8 x float> %174, <8 x float> undef, <8 x i32> zeroinitializer
  %176 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %175, <8 x float> %157, <8 x float> %144)
  %177 = add nsw i64 %148, 12
  %178 = getelementptr inbounds float, float* %4, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !574
  %180 = insertelement <8 x float> undef, float %179, i32 0
  %181 = shufflevector <8 x float> %180, <8 x float> undef, <8 x i32> zeroinitializer
  %182 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %181, <8 x float> %157, <8 x float> %143)
  %183 = add nsw i64 %148, 15
  %184 = getelementptr inbounds float, float* %4, i64 %183
  %185 = load float, float* %184, align 4, !tbaa !574
  %186 = insertelement <8 x float> undef, float %185, i32 0
  %187 = shufflevector <8 x float> %186, <8 x float> undef, <8 x i32> zeroinitializer
  %188 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %187, <8 x float> %157, <8 x float> %142)
  %189 = add nsw i64 %148, 18
  %190 = getelementptr inbounds float, float* %4, i64 %189
  %191 = load float, float* %190, align 4, !tbaa !574
  %192 = insertelement <8 x float> undef, float %191, i32 0
  %193 = shufflevector <8 x float> %192, <8 x float> undef, <8 x i32> zeroinitializer
  %194 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %193, <8 x float> %157, <8 x float> %141)
  %195 = add nsw i64 %148, 21
  %196 = getelementptr inbounds float, float* %4, i64 %195
  %197 = load float, float* %196, align 4, !tbaa !574
  %198 = insertelement <8 x float> undef, float %197, i32 0
  %199 = shufflevector <8 x float> %198, <8 x float> undef, <8 x i32> zeroinitializer
  %200 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %199, <8 x float> %157, <8 x float> %140)
  %201 = add nsw i64 %148, 24
  %202 = getelementptr inbounds float, float* %4, i64 %201
  %203 = load float, float* %202, align 4, !tbaa !574
  %204 = insertelement <8 x float> undef, float %203, i32 0
  %205 = shufflevector <8 x float> %204, <8 x float> undef, <8 x i32> zeroinitializer
  %206 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %205, <8 x float> %157, <8 x float> %139)
  %207 = add nsw i64 %148, 27
  %208 = getelementptr inbounds float, float* %4, i64 %207
  %209 = load float, float* %208, align 4, !tbaa !574
  %210 = insertelement <8 x float> undef, float %209, i32 0
  %211 = shufflevector <8 x float> %210, <8 x float> undef, <8 x i32> zeroinitializer
  %212 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %211, <8 x float> %157, <8 x float> %138)
  %213 = add nsw i64 %148, 30
  %214 = getelementptr inbounds float, float* %4, i64 %213
  %215 = load float, float* %214, align 4, !tbaa !574
  %216 = insertelement <8 x float> undef, float %215, i32 0
  %217 = shufflevector <8 x float> %216, <8 x float> undef, <8 x i32> zeroinitializer
  %218 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %217, <8 x float> %157, <8 x float> %137)
  %219 = add nsw i64 %148, 33
  %220 = getelementptr inbounds float, float* %4, i64 %219
  %221 = load float, float* %220, align 4, !tbaa !574
  %222 = insertelement <8 x float> undef, float %221, i32 0
  %223 = shufflevector <8 x float> %222, <8 x float> undef, <8 x i32> zeroinitializer
  %224 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %223, <8 x float> %157, <8 x float> %136)
  %225 = add nsw i64 %148, 36
  %226 = getelementptr inbounds float, float* %4, i64 %225
  %227 = load float, float* %226, align 4, !tbaa !574
  %228 = insertelement <8 x float> undef, float %227, i32 0
  %229 = shufflevector <8 x float> %228, <8 x float> undef, <8 x i32> zeroinitializer
  %230 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %229, <8 x float> %157, <8 x float> %135)
  %231 = add nsw i64 %148, 39
  %232 = getelementptr inbounds float, float* %4, i64 %231
  %233 = load float, float* %232, align 4, !tbaa !574
  %234 = insertelement <8 x float> undef, float %233, i32 0
  %235 = shufflevector <8 x float> %234, <8 x float> undef, <8 x i32> zeroinitializer
  %236 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %235, <8 x float> %157, <8 x float> %134)
  %237 = add nsw i64 %148, 42
  %238 = getelementptr inbounds float, float* %4, i64 %237
  %239 = load float, float* %238, align 4, !tbaa !574
  %240 = insertelement <8 x float> undef, float %239, i32 0
  %241 = shufflevector <8 x float> %240, <8 x float> undef, <8 x i32> zeroinitializer
  %242 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %241, <8 x float> %157, <8 x float> %133)
  %243 = add nsw i64 %148, 45
  %244 = getelementptr inbounds float, float* %4, i64 %243
  %245 = load float, float* %244, align 4, !tbaa !574
  %246 = insertelement <8 x float> undef, float %245, i32 0
  %247 = shufflevector <8 x float> %246, <8 x float> undef, <8 x i32> zeroinitializer
  %248 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %247, <8 x float> %157, <8 x float> %132)
  %249 = add nsw i64 %148, 48
  %250 = getelementptr inbounds float, float* %4, i64 %249
  %251 = load float, float* %250, align 4, !tbaa !574
  %252 = insertelement <8 x float> undef, float %251, i32 0
  %253 = shufflevector <8 x float> %252, <8 x float> undef, <8 x i32> zeroinitializer
  %254 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %253, <8 x float> %157, <8 x float> %131)
  %255 = add nsw i64 %148, 51
  %256 = getelementptr inbounds float, float* %4, i64 %255
  %257 = load float, float* %256, align 4, !tbaa !574
  %258 = insertelement <8 x float> undef, float %257, i32 0
  %259 = shufflevector <8 x float> %258, <8 x float> undef, <8 x i32> zeroinitializer
  %260 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %259, <8 x float> %157, <8 x float> %130)
  %261 = add nsw i64 %148, 54
  %262 = getelementptr inbounds float, float* %4, i64 %261
  %263 = load float, float* %262, align 4, !tbaa !574
  %264 = insertelement <8 x float> undef, float %263, i32 0
  %265 = shufflevector <8 x float> %264, <8 x float> undef, <8 x i32> zeroinitializer
  %266 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %265, <8 x float> %157, <8 x float> %129)
  %267 = add nsw i64 %148, 57
  %268 = getelementptr inbounds float, float* %4, i64 %267
  %269 = load float, float* %268, align 4, !tbaa !574
  %270 = insertelement <8 x float> undef, float %269, i32 0
  %271 = shufflevector <8 x float> %270, <8 x float> undef, <8 x i32> zeroinitializer
  %272 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %271, <8 x float> %157, <8 x float> %128)
  %273 = add nsw i64 %148, 60
  %274 = getelementptr inbounds float, float* %4, i64 %273
  %275 = load float, float* %274, align 4, !tbaa !574
  %276 = insertelement <8 x float> undef, float %275, i32 0
  %277 = shufflevector <8 x float> %276, <8 x float> undef, <8 x i32> zeroinitializer
  %278 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %277, <8 x float> %157, <8 x float> %127)
  %279 = add nsw i64 %148, 63
  %280 = getelementptr inbounds float, float* %4, i64 %279
  %281 = load float, float* %280, align 4, !tbaa !574
  %282 = insertelement <8 x float> undef, float %281, i32 0
  %283 = shufflevector <8 x float> %282, <8 x float> undef, <8 x i32> zeroinitializer
  %284 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %283, <8 x float> %157, <8 x float> %126)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %for_end12, label %for_body11, !prof !46

for_end12:                                        ; preds = %for_body11
  %indvars.iv.next176 = add nuw nsw i64 %indvars.iv175, 1
  %exitcond177 = icmp eq i64 %indvars.iv.next176, 5
  br i1 %exitcond177, label %for_end9, label %for_begin10.preheader, !prof !46

for_begin19.preheader:                            ; preds = %for_end21, %for_begin16.preheader
  %indvars.iv188 = phi i64 [ 0, %for_begin16.preheader ], [ %indvars.iv.next189, %for_end21 ]
  %285 = mul nuw nsw i64 %indvars.iv188, 22
  %286 = add nsw i64 %285, %45
  %287 = mul nuw nsw i64 %indvars.iv188, 176
  br label %for_body20

for_end18:                                        ; preds = %for_end21
  %288 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %289 = tail call i32 %288(i32 1, i32 %16, i8* nonnull %31)
  %290 = add nsw i32 %29, 1
  %291 = icmp slt i32 %290, %24
  br i1 %291, label %for_body, label %for_end, !prof !5

for_body20:                                       ; preds = %for_body20, %for_begin19.preheader
  %indvars.iv185 = phi i64 [ 0, %for_begin19.preheader ], [ %indvars.iv.next186, %for_body20 ]
  %292 = add nsw i64 %286, %indvars.iv185
  %293 = add nsw i64 %292, 48400
  %294 = add nsw i64 %292, 96800
  %295 = add nsw i64 %292, 145200
  %296 = add nsw i64 %292, 193600
  %297 = add nsw i64 %292, 242000
  %298 = add nsw i64 %292, 290400
  %299 = add nsw i64 %292, 338800
  %300 = shl i64 %indvars.iv185, 3
  %301 = add nuw nsw i64 %300, %287
  %302 = getelementptr inbounds float, float* %35, i64 %301
  %303 = bitcast float* %302 to <8 x float>*
  %304 = load <8 x float>, <8 x float>* %303, align 32, !tbaa !589
  %305 = fadd <8 x float> %44, %304
  %306 = fcmp ogt <8 x float> %305, zeroinitializer
  %307 = select <8 x i1> %306, <8 x float> %305, <8 x float> zeroinitializer
  %308 = getelementptr inbounds float, float* %10, i64 %292
  %309 = extractelement <8 x float> %307, i64 0
  store float %309, float* %308, align 4, !tbaa !592
  %310 = getelementptr inbounds float, float* %10, i64 %293
  %311 = extractelement <8 x float> %307, i64 1
  store float %311, float* %310, align 4, !tbaa !592
  %312 = getelementptr inbounds float, float* %10, i64 %294
  %313 = extractelement <8 x float> %307, i64 2
  store float %313, float* %312, align 4, !tbaa !592
  %314 = getelementptr inbounds float, float* %10, i64 %295
  %315 = extractelement <8 x float> %307, i64 3
  store float %315, float* %314, align 4, !tbaa !592
  %316 = getelementptr inbounds float, float* %10, i64 %296
  %317 = extractelement <8 x float> %307, i64 4
  store float %317, float* %316, align 4, !tbaa !592
  %318 = getelementptr inbounds float, float* %10, i64 %297
  %319 = extractelement <8 x float> %307, i64 5
  store float %319, float* %318, align 4, !tbaa !592
  %320 = getelementptr inbounds float, float* %10, i64 %298
  %321 = extractelement <8 x float> %307, i64 6
  store float %321, float* %320, align 4, !tbaa !592
  %322 = getelementptr inbounds float, float* %10, i64 %299
  %323 = extractelement <8 x float> %307, i64 7
  store float %323, float* %322, align 4, !tbaa !592
  %indvars.iv.next186 = add nuw nsw i64 %indvars.iv185, 1
  %exitcond187 = icmp eq i64 %indvars.iv.next186, 22
  br i1 %exitcond187, label %for_end21, label %for_body20, !prof !46

for_end21:                                        ; preds = %for_body20
  %indvars.iv.next189 = add nuw nsw i64 %indvars.iv188, 1
  %exitcond190 = icmp eq i64 %indvars.iv.next189, 10
  br i1 %exitcond190, label %for_end18, label %for_begin19.preheader, !prof !46
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fmuladd.v8f32(<8 x float>, <8 x float>, <8 x float>) #4

define dllexport i32 @fused_nn_softmax(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.80, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !595
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.81, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !609
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.82, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 1
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 2
  %50 = and i1 %46, %49
  %51 = and i1 %43, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !611
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !625
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 10
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.52, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = icmp eq i64* %19, null
  br i1 %62, label %if_end, label %if_then, !prof !46

if_then:                                          ; preds = %assert_end14
  %63 = load i64, i64* %19, align 8, !tbaa !627
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 10
  %66 = getelementptr inbounds i64, i64* %19, i64 1
  %67 = load i64, i64* %66, align 8, !tbaa !641
  %68 = trunc i64 %67 to i32
  %69 = icmp eq i32 %68, 1
  %70 = and i1 %65, %69
  br i1 %70, label %if_end, label %assert_fail15, !prof !5

if_end:                                           ; preds = %assert_end14, %if_then
  %71 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %assert_end18, label %assert_fail17, !prof !5

assert_fail15:                                    ; preds = %if_then
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_fail17:                                    ; preds = %if_end
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %if_end
  %76 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 2
  br i1 %78, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %80 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %81 = load i16, i16* %80, align 2
  %82 = icmp eq i16 %81, 1
  %83 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 2
  %89 = and i1 %85, %88
  %90 = and i1 %82, %89
  br i1 %90, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %92 = load i64, i64* %27, align 8, !tbaa !643
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %96 = getelementptr inbounds i64, i64* %27, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !657
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 10
  br i1 %99, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %101 = icmp eq i64* %29, null
  br i1 %101, label %if_end28, label %if_then27, !prof !46

if_then27:                                        ; preds = %assert_end26
  %102 = load i64, i64* %29, align 8, !tbaa !659
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 10
  %105 = getelementptr inbounds i64, i64* %29, i64 1
  %106 = load i64, i64* %105, align 8, !tbaa !673
  %107 = trunc i64 %106 to i32
  %108 = icmp eq i32 %107, 1
  %109 = and i1 %104, %108
  br i1 %109, label %if_end28, label %assert_fail29, !prof !5

if_end28:                                         ; preds = %assert_end26, %if_then27
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then27
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end28
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %114(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end28
  %115 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %119 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %23, %120
  br i1 %121, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  tail call fastcc void @fused_nn_softmax_compute_(i8* %15, i8* %25)
  ret i32 0
}

; Function Attrs: nofree noinline nounwind
define private fastcc void @fused_nn_softmax_compute_(i8* noalias nocapture readonly, i8* noalias nocapture) unnamed_addr #5 {
entry:
  %2 = bitcast i8* %0 to <4 x float>*
  %3 = load <4 x float>, <4 x float>* %2, align 4, !tbaa !675
  %4 = extractelement <4 x float> %3, i32 0
  %5 = fcmp olt float %4, 0xC7EFFFFFE0000000
  %6 = select i1 %5, float 0xC7EFFFFFE0000000, float %4
  %7 = extractelement <4 x float> %3, i32 1
  %8 = fcmp ogt float %6, %7
  %9 = select i1 %8, float %6, float %7
  %10 = extractelement <4 x float> %3, i32 2
  %11 = fcmp ogt float %9, %10
  %12 = select i1 %11, float %9, float %10
  %13 = extractelement <4 x float> %3, i32 3
  %14 = fcmp ogt float %12, %13
  %15 = select i1 %14, float %12, float %13
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !675
  %19 = extractelement <4 x float> %18, i32 0
  %20 = fcmp ogt float %15, %19
  %21 = select i1 %20, float %15, float %19
  %22 = extractelement <4 x float> %18, i32 1
  %23 = fcmp ogt float %21, %22
  %24 = select i1 %23, float %21, float %22
  %25 = extractelement <4 x float> %18, i32 2
  %26 = fcmp ogt float %24, %25
  %27 = select i1 %26, float %24, float %25
  %28 = extractelement <4 x float> %18, i32 3
  %29 = fcmp ogt float %27, %28
  %30 = select i1 %29, float %27, float %28
  %31 = getelementptr inbounds i8, i8* %0, i64 32
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4, !tbaa !675
  %34 = fcmp ogt float %30, %33
  %35 = select i1 %34, float %30, float %33
  %36 = getelementptr inbounds i8, i8* %0, i64 36
  %37 = bitcast i8* %36 to float*
  %38 = load float, float* %37, align 4, !tbaa !675
  %39 = fcmp ogt float %35, %38
  %40 = select i1 %39, float %35, float %38
  %41 = insertelement <4 x float> undef, float %40, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fsub <4 x float> %3, %42
  %44 = call <4 x float> @llvm.exp.v4f32(<4 x float> %43)
  %45 = fsub <4 x float> %18, %42
  %46 = call <4 x float> @llvm.exp.v4f32(<4 x float> %45)
  %47 = fsub float %33, %40
  %48 = tail call float @llvm.exp.f32(float %47)
  %49 = fsub float %38, %40
  %50 = tail call float @llvm.exp.f32(float %49)
  %51 = extractelement <4 x float> %44, i32 0
  %52 = fadd float %51, 0.000000e+00
  %53 = extractelement <4 x float> %44, i32 1
  %54 = fadd float %52, %53
  %55 = extractelement <4 x float> %44, i32 2
  %56 = fadd float %54, %55
  %57 = extractelement <4 x float> %44, i32 3
  %58 = fadd float %56, %57
  %59 = extractelement <4 x float> %46, i32 0
  %60 = fadd float %58, %59
  %61 = extractelement <4 x float> %46, i32 1
  %62 = fadd float %60, %61
  %63 = extractelement <4 x float> %46, i32 2
  %64 = fadd float %62, %63
  %65 = extractelement <4 x float> %46, i32 3
  %66 = fadd float %64, %65
  %67 = fadd float %66, %48
  %68 = fadd float %67, %50
  %69 = insertelement <4 x float> undef, float %68, i32 0
  %70 = shufflevector <4 x float> %69, <4 x float> undef, <4 x i32> zeroinitializer
  %71 = fdiv <4 x float> %44, %70
  %72 = bitcast i8* %1 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !678
  %73 = getelementptr inbounds i8, i8* %1, i64 16
  %74 = fdiv <4 x float> %46, %70
  %75 = bitcast i8* %73 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 4, !tbaa !678
  %76 = fdiv float %48, %68
  %77 = getelementptr inbounds i8, i8* %1, i64 32
  %78 = bitcast i8* %77 to float*
  store float %76, float* %78, align 4, !tbaa !678
  %79 = fdiv float %50, %68
  %80 = getelementptr inbounds i8, i8* %1, i64 36
  %81 = bitcast i8* %80 to float*
  store float %79, float* %81, align 4, !tbaa !678
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.exp.v4f32(<4 x float>) #4

attributes #0 = { nofree noinline norecurse nounwind }
attributes #1 = { noinline }
attributes #2 = { nofree norecurse nounwind }
attributes #3 = { nofree nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree noinline nounwind }
attributes #6 = { argmemonly nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, dwoId: 1)
!1 = !DIFile(filename: "model.tvm", directory: "/tmp/")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = !{!"branch_weights", i32 1048576, i32 1}
!6 = !{!7, !7, i64 0}
!7 = !{!"ctx_ptr", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"0x55ddceb13e60.w1.b0", !11, i64 0}
!11 = !{!"0x55ddceb13e60.w2.b0", !12, i64 0}
!12 = !{!"0x55ddceb13e60.w4.b0", !13, i64 0}
!13 = !{!"0x55ddceb13e60.w8.b0", !14, i64 0}
!14 = !{!"0x55ddceb13e60.w16.b0", !15, i64 0}
!15 = !{!"0x55ddceb13e60.w32.b0", !16, i64 0}
!16 = !{!"0x55ddceb13e60.w64.b0", !17, i64 0}
!17 = !{!"0x55ddceb13e60.w128.b0", !18, i64 0}
!18 = !{!"0x55ddceb13e60.w256.b0", !19, i64 0}
!19 = !{!"0x55ddceb13e60.w512.b0", !20, i64 0}
!20 = !{!"0x55ddceb13e60.w1024.b0", !21, i64 0}
!21 = !{!"int32", !22, i64 0}
!22 = !{!"0x55ddceb13e60", !8, i64 0}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x55ddceb13e60.w1.b1", !11, i64 0}
!25 = !{!26, !26, i64 0}
!26 = !{!"0x55ddceb155c0.w1.b0", !27, i64 0}
!27 = !{!"0x55ddceb155c0.w2.b0", !28, i64 0}
!28 = !{!"0x55ddceb155c0.w4.b0", !29, i64 0}
!29 = !{!"0x55ddceb155c0.w8.b0", !30, i64 0}
!30 = !{!"0x55ddceb155c0.w16.b0", !31, i64 0}
!31 = !{!"0x55ddceb155c0.w32.b0", !32, i64 0}
!32 = !{!"0x55ddceb155c0.w64.b0", !33, i64 0}
!33 = !{!"0x55ddceb155c0.w128.b0", !34, i64 0}
!34 = !{!"0x55ddceb155c0.w256.b0", !35, i64 0}
!35 = !{!"0x55ddceb155c0.w512.b0", !36, i64 0}
!36 = !{!"0x55ddceb155c0.w1024.b0", !37, i64 0}
!37 = !{!"int64", !38, i64 0}
!38 = !{!"0x55ddceb155c0", !8, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x55ddceb155c0.w1.b1", !27, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x55ddceb155c0.w1.b2", !43, i64 0}
!43 = !{!"0x55ddceb155c0.w2.b2", !28, i64 0}
!44 = !{!45, !45, i64 0}
!45 = !{!"0x55ddceb155c0.w1.b3", !43, i64 0}
!46 = !{!"branch_weights", i32 1, i32 1048576}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x55ddceb15940.w4.b0", !49, i64 0}
!49 = !{!"0x55ddceb15940.w8.b0", !50, i64 0}
!50 = !{!"0x55ddceb15940.w16.b0", !51, i64 0}
!51 = !{!"0x55ddceb15940.w32.b0", !52, i64 0}
!52 = !{!"0x55ddceb15940.w64.b0", !53, i64 0}
!53 = !{!"0x55ddceb15940.w128.b0", !54, i64 0}
!54 = !{!"0x55ddceb15940.w256.b0", !55, i64 0}
!55 = !{!"0x55ddceb15940.w512.b0", !56, i64 0}
!56 = !{!"0x55ddceb15940.w1024.b0", !57, i64 0}
!57 = !{!"int64", !58, i64 0}
!58 = !{!"0x55ddceb15940", !8, i64 0}
!59 = !{!60, !60, i64 0}
!60 = !{!"0x55ddceb15b90.w1.b0", !61, i64 0}
!61 = !{!"0x55ddceb15b90.w2.b0", !62, i64 0}
!62 = !{!"0x55ddceb15b90.w4.b0", !63, i64 0}
!63 = !{!"0x55ddceb15b90.w8.b0", !64, i64 0}
!64 = !{!"0x55ddceb15b90.w16.b0", !65, i64 0}
!65 = !{!"0x55ddceb15b90.w32.b0", !66, i64 0}
!66 = !{!"0x55ddceb15b90.w64.b0", !67, i64 0}
!67 = !{!"0x55ddceb15b90.w128.b0", !68, i64 0}
!68 = !{!"0x55ddceb15b90.w256.b0", !69, i64 0}
!69 = !{!"0x55ddceb15b90.w512.b0", !70, i64 0}
!70 = !{!"0x55ddceb15b90.w1024.b0", !71, i64 0}
!71 = !{!"int64", !72, i64 0}
!72 = !{!"0x55ddceb15b90", !8, i64 0}
!73 = !{!74, !74, i64 0}
!74 = !{!"0x55ddceb15b90.w1.b1", !61, i64 0}
!75 = !{!76, !76, i64 0}
!76 = !{!"0x55ddceb15b40.w1.b0", !77, i64 0}
!77 = !{!"0x55ddceb15b40.w2.b0", !78, i64 0}
!78 = !{!"0x55ddceb15b40.w4.b0", !79, i64 0}
!79 = !{!"0x55ddceb15b40.w8.b0", !80, i64 0}
!80 = !{!"0x55ddceb15b40.w16.b0", !81, i64 0}
!81 = !{!"0x55ddceb15b40.w32.b0", !82, i64 0}
!82 = !{!"0x55ddceb15b40.w64.b0", !83, i64 0}
!83 = !{!"0x55ddceb15b40.w128.b0", !84, i64 0}
!84 = !{!"0x55ddceb15b40.w256.b0", !85, i64 0}
!85 = !{!"0x55ddceb15b40.w512.b0", !86, i64 0}
!86 = !{!"0x55ddceb15b40.w1024.b0", !87, i64 0}
!87 = !{!"int64", !88, i64 0}
!88 = !{!"0x55ddceb15b40", !8, i64 0}
!89 = !{!90, !90, i64 0}
!90 = !{!"0x55ddceb15b40.w1.b1", !77, i64 0}
!91 = !{!92, !92, i64 0}
!92 = !{!"0x55ddceb46100.w1.b0", !93, i64 0}
!93 = !{!"0x55ddceb46100.w2.b0", !94, i64 0}
!94 = !{!"0x55ddceb46100.w4.b0", !95, i64 0}
!95 = !{!"0x55ddceb46100.w8.b0", !96, i64 0}
!96 = !{!"0x55ddceb46100.w16.b0", !97, i64 0}
!97 = !{!"0x55ddceb46100.w32.b0", !98, i64 0}
!98 = !{!"0x55ddceb46100.w64.b0", !99, i64 0}
!99 = !{!"0x55ddceb46100.w128.b0", !100, i64 0}
!100 = !{!"0x55ddceb46100.w256.b0", !101, i64 0}
!101 = !{!"0x55ddceb46100.w512.b0", !102, i64 0}
!102 = !{!"0x55ddceb46100.w1024.b0", !103, i64 0}
!103 = !{!"int32", !104, i64 0}
!104 = !{!"0x55ddceb46100", !8, i64 0}
!105 = !{!106, !106, i64 0}
!106 = !{!"0x55ddceb46100.w1.b1", !93, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"0x55ddceb47340.w1.b0", !109, i64 0}
!109 = !{!"0x55ddceb47340.w2.b0", !110, i64 0}
!110 = !{!"0x55ddceb47340.w4.b0", !111, i64 0}
!111 = !{!"0x55ddceb47340.w8.b0", !112, i64 0}
!112 = !{!"0x55ddceb47340.w16.b0", !113, i64 0}
!113 = !{!"0x55ddceb47340.w32.b0", !114, i64 0}
!114 = !{!"0x55ddceb47340.w64.b0", !115, i64 0}
!115 = !{!"0x55ddceb47340.w128.b0", !116, i64 0}
!116 = !{!"0x55ddceb47340.w256.b0", !117, i64 0}
!117 = !{!"0x55ddceb47340.w512.b0", !118, i64 0}
!118 = !{!"0x55ddceb47340.w1024.b0", !119, i64 0}
!119 = !{!"int64", !120, i64 0}
!120 = !{!"0x55ddceb47340", !8, i64 0}
!121 = !{!122, !122, i64 0}
!122 = !{!"0x55ddceb47340.w1.b1", !109, i64 0}
!123 = !{!124, !124, i64 0}
!124 = !{!"0x55ddceb47540.w1.b0", !125, i64 0}
!125 = !{!"0x55ddceb47540.w2.b0", !126, i64 0}
!126 = !{!"0x55ddceb47540.w4.b0", !127, i64 0}
!127 = !{!"0x55ddceb47540.w8.b0", !128, i64 0}
!128 = !{!"0x55ddceb47540.w16.b0", !129, i64 0}
!129 = !{!"0x55ddceb47540.w32.b0", !130, i64 0}
!130 = !{!"0x55ddceb47540.w64.b0", !131, i64 0}
!131 = !{!"0x55ddceb47540.w128.b0", !132, i64 0}
!132 = !{!"0x55ddceb47540.w256.b0", !133, i64 0}
!133 = !{!"0x55ddceb47540.w512.b0", !134, i64 0}
!134 = !{!"0x55ddceb47540.w1024.b0", !135, i64 0}
!135 = !{!"int64", !136, i64 0}
!136 = !{!"0x55ddceb47540", !8, i64 0}
!137 = !{!138, !138, i64 0}
!138 = !{!"0x55ddceb47540.w1.b1", !125, i64 0}
!139 = !{!140, !140, i64 0}
!140 = !{!"0x55ddceb48d60.w1.b0", !141, i64 0}
!141 = !{!"0x55ddceb48d60.w2.b0", !142, i64 0}
!142 = !{!"0x55ddceb48d60.w4.b0", !143, i64 0}
!143 = !{!"0x55ddceb48d60.w8.b0", !144, i64 0}
!144 = !{!"0x55ddceb48d60.w16.b0", !145, i64 0}
!145 = !{!"0x55ddceb48d60.w32.b0", !146, i64 0}
!146 = !{!"0x55ddceb48d60.w64.b0", !147, i64 0}
!147 = !{!"0x55ddceb48d60.w128.b0", !148, i64 0}
!148 = !{!"0x55ddceb48d60.w256.b0", !149, i64 0}
!149 = !{!"0x55ddceb48d60.w512.b0", !150, i64 0}
!150 = !{!"0x55ddceb48d60.w1024.b0", !151, i64 0}
!151 = !{!"int64", !152, i64 0}
!152 = !{!"0x55ddceb48d60", !8, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"0x55ddceb48d60.w1.b1", !141, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"0x55ddceb47680.w1.b0", !157, i64 0}
!157 = !{!"0x55ddceb47680.w2.b0", !158, i64 0}
!158 = !{!"0x55ddceb47680.w4.b0", !159, i64 0}
!159 = !{!"0x55ddceb47680.w8.b0", !160, i64 0}
!160 = !{!"0x55ddceb47680.w16.b0", !161, i64 0}
!161 = !{!"0x55ddceb47680.w32.b0", !162, i64 0}
!162 = !{!"0x55ddceb47680.w64.b0", !163, i64 0}
!163 = !{!"0x55ddceb47680.w128.b0", !164, i64 0}
!164 = !{!"0x55ddceb47680.w256.b0", !165, i64 0}
!165 = !{!"0x55ddceb47680.w512.b0", !166, i64 0}
!166 = !{!"0x55ddceb47680.w1024.b0", !167, i64 0}
!167 = !{!"int64", !168, i64 0}
!168 = !{!"0x55ddceb47680", !8, i64 0}
!169 = !{!170, !170, i64 0}
!170 = !{!"0x55ddceb47680.w1.b1", !157, i64 0}
!171 = !{!172, !172, i64 0}
!172 = !{!"float32", !173, i64 0}
!173 = !{!"0x55ddceb45fc0", !8, i64 0}
!174 = !{!175, !175, i64 0}
!175 = !{!"float32", !176, i64 0}
!176 = !{!"0x55ddceb45f70", !8, i64 0}
!177 = !{!178, !178, i64 0}
!178 = !{!"0x55ddceb070b0.w1.b0", !179, i64 0}
!179 = !{!"0x55ddceb070b0.w2.b0", !180, i64 0}
!180 = !{!"0x55ddceb070b0.w4.b0", !181, i64 0}
!181 = !{!"0x55ddceb070b0.w8.b0", !182, i64 0}
!182 = !{!"0x55ddceb070b0.w16.b0", !183, i64 0}
!183 = !{!"0x55ddceb070b0.w32.b0", !184, i64 0}
!184 = !{!"0x55ddceb070b0.w64.b0", !185, i64 0}
!185 = !{!"0x55ddceb070b0.w128.b0", !186, i64 0}
!186 = !{!"0x55ddceb070b0.w256.b0", !187, i64 0}
!187 = !{!"0x55ddceb070b0.w512.b0", !188, i64 0}
!188 = !{!"0x55ddceb070b0.w1024.b0", !189, i64 0}
!189 = !{!"int32", !190, i64 0}
!190 = !{!"0x55ddceb070b0", !8, i64 0}
!191 = !{!192, !192, i64 0}
!192 = !{!"0x55ddceb070b0.w1.b2", !193, i64 0}
!193 = !{!"0x55ddceb070b0.w2.b2", !180, i64 0}
!194 = !{!195, !195, i64 0}
!195 = !{!"0x55ddceb070b0.w1.b3", !193, i64 0}
!196 = !{!197, !197, i64 0}
!197 = !{!"0x55ddceb070b0.w1.b1", !179, i64 0}
!198 = !{!199, !199, i64 0}
!199 = !{!"0x55ddceb0a220.w1.b0", !200, i64 0}
!200 = !{!"0x55ddceb0a220.w2.b0", !201, i64 0}
!201 = !{!"0x55ddceb0a220.w4.b0", !202, i64 0}
!202 = !{!"0x55ddceb0a220.w8.b0", !203, i64 0}
!203 = !{!"0x55ddceb0a220.w16.b0", !204, i64 0}
!204 = !{!"0x55ddceb0a220.w32.b0", !205, i64 0}
!205 = !{!"0x55ddceb0a220.w64.b0", !206, i64 0}
!206 = !{!"0x55ddceb0a220.w128.b0", !207, i64 0}
!207 = !{!"0x55ddceb0a220.w256.b0", !208, i64 0}
!208 = !{!"0x55ddceb0a220.w512.b0", !209, i64 0}
!209 = !{!"0x55ddceb0a220.w1024.b0", !210, i64 0}
!210 = !{!"int64", !211, i64 0}
!211 = !{!"0x55ddceb0a220", !8, i64 0}
!212 = !{!213, !213, i64 0}
!213 = !{!"0x55ddceb0a220.w1.b1", !200, i64 0}
!214 = !{!215, !215, i64 0}
!215 = !{!"0x55ddceb0a420.w1.b0", !216, i64 0}
!216 = !{!"0x55ddceb0a420.w2.b0", !217, i64 0}
!217 = !{!"0x55ddceb0a420.w4.b0", !218, i64 0}
!218 = !{!"0x55ddceb0a420.w8.b0", !219, i64 0}
!219 = !{!"0x55ddceb0a420.w16.b0", !220, i64 0}
!220 = !{!"0x55ddceb0a420.w32.b0", !221, i64 0}
!221 = !{!"0x55ddceb0a420.w64.b0", !222, i64 0}
!222 = !{!"0x55ddceb0a420.w128.b0", !223, i64 0}
!223 = !{!"0x55ddceb0a420.w256.b0", !224, i64 0}
!224 = !{!"0x55ddceb0a420.w512.b0", !225, i64 0}
!225 = !{!"0x55ddceb0a420.w1024.b0", !226, i64 0}
!226 = !{!"int64", !227, i64 0}
!227 = !{!"0x55ddceb0a420", !8, i64 0}
!228 = !{!229, !229, i64 0}
!229 = !{!"0x55ddceb0a420.w1.b1", !216, i64 0}
!230 = !{!231, !231, i64 0}
!231 = !{!"0x55ddceb0c040.w1.b0", !232, i64 0}
!232 = !{!"0x55ddceb0c040.w2.b0", !233, i64 0}
!233 = !{!"0x55ddceb0c040.w4.b0", !234, i64 0}
!234 = !{!"0x55ddceb0c040.w8.b0", !235, i64 0}
!235 = !{!"0x55ddceb0c040.w16.b0", !236, i64 0}
!236 = !{!"0x55ddceb0c040.w32.b0", !237, i64 0}
!237 = !{!"0x55ddceb0c040.w64.b0", !238, i64 0}
!238 = !{!"0x55ddceb0c040.w128.b0", !239, i64 0}
!239 = !{!"0x55ddceb0c040.w256.b0", !240, i64 0}
!240 = !{!"0x55ddceb0c040.w512.b0", !241, i64 0}
!241 = !{!"0x55ddceb0c040.w1024.b0", !242, i64 0}
!242 = !{!"int64", !243, i64 0}
!243 = !{!"0x55ddceb0c040", !8, i64 0}
!244 = !{!245, !245, i64 0}
!245 = !{!"0x55ddceb0c040.w1.b1", !232, i64 0}
!246 = !{!247, !247, i64 0}
!247 = !{!"0x55ddceb0a5a0.w1.b0", !248, i64 0}
!248 = !{!"0x55ddceb0a5a0.w2.b0", !249, i64 0}
!249 = !{!"0x55ddceb0a5a0.w4.b0", !250, i64 0}
!250 = !{!"0x55ddceb0a5a0.w8.b0", !251, i64 0}
!251 = !{!"0x55ddceb0a5a0.w16.b0", !252, i64 0}
!252 = !{!"0x55ddceb0a5a0.w32.b0", !253, i64 0}
!253 = !{!"0x55ddceb0a5a0.w64.b0", !254, i64 0}
!254 = !{!"0x55ddceb0a5a0.w128.b0", !255, i64 0}
!255 = !{!"0x55ddceb0a5a0.w256.b0", !256, i64 0}
!256 = !{!"0x55ddceb0a5a0.w512.b0", !257, i64 0}
!257 = !{!"0x55ddceb0a5a0.w1024.b0", !258, i64 0}
!258 = !{!"int64", !259, i64 0}
!259 = !{!"0x55ddceb0a5a0", !8, i64 0}
!260 = !{!261, !261, i64 0}
!261 = !{!"0x55ddceb0a5a0.w1.b1", !248, i64 0}
!262 = !{!263, !263, i64 0}
!263 = !{!"0x55ddceb0c540.w1.b0", !264, i64 0}
!264 = !{!"0x55ddceb0c540.w2.b0", !265, i64 0}
!265 = !{!"0x55ddceb0c540.w4.b0", !266, i64 0}
!266 = !{!"0x55ddceb0c540.w8.b0", !267, i64 0}
!267 = !{!"0x55ddceb0c540.w16.b0", !268, i64 0}
!268 = !{!"0x55ddceb0c540.w32.b0", !269, i64 0}
!269 = !{!"0x55ddceb0c540.w64.b0", !270, i64 0}
!270 = !{!"0x55ddceb0c540.w128.b0", !271, i64 0}
!271 = !{!"0x55ddceb0c540.w256.b0", !272, i64 0}
!272 = !{!"0x55ddceb0c540.w512.b0", !273, i64 0}
!273 = !{!"0x55ddceb0c540.w1024.b0", !274, i64 0}
!274 = !{!"int64", !275, i64 0}
!275 = !{!"0x55ddceb0c540", !8, i64 0}
!276 = !{!277, !277, i64 0}
!277 = !{!"0x55ddceb0c590.w1.b0", !278, i64 0}
!278 = !{!"0x55ddceb0c590.w2.b0", !279, i64 0}
!279 = !{!"0x55ddceb0c590.w4.b0", !280, i64 0}
!280 = !{!"0x55ddceb0c590.w8.b0", !281, i64 0}
!281 = !{!"0x55ddceb0c590.w16.b0", !282, i64 0}
!282 = !{!"0x55ddceb0c590.w32.b0", !283, i64 0}
!283 = !{!"0x55ddceb0c590.w64.b0", !284, i64 0}
!284 = !{!"0x55ddceb0c590.w128.b0", !285, i64 0}
!285 = !{!"0x55ddceb0c590.w256.b0", !286, i64 0}
!286 = !{!"0x55ddceb0c590.w512.b0", !287, i64 0}
!287 = !{!"0x55ddceb0c590.w1024.b0", !288, i64 0}
!288 = !{!"int64", !289, i64 0}
!289 = !{!"0x55ddceb0c590", !8, i64 0}
!290 = !{!291, !291, i64 0}
!291 = !{!"0x55ddceb0e420.w1.b0", !292, i64 0}
!292 = !{!"0x55ddceb0e420.w2.b0", !293, i64 0}
!293 = !{!"0x55ddceb0e420.w4.b0", !294, i64 0}
!294 = !{!"0x55ddceb0e420.w8.b0", !295, i64 0}
!295 = !{!"0x55ddceb0e420.w16.b0", !296, i64 0}
!296 = !{!"0x55ddceb0e420.w32.b0", !297, i64 0}
!297 = !{!"0x55ddceb0e420.w64.b0", !298, i64 0}
!298 = !{!"0x55ddceb0e420.w128.b0", !299, i64 0}
!299 = !{!"0x55ddceb0e420.w256.b0", !300, i64 0}
!300 = !{!"0x55ddceb0e420.w512.b0", !301, i64 0}
!301 = !{!"0x55ddceb0e420.w1024.b0", !302, i64 0}
!302 = !{!"int64", !303, i64 0}
!303 = !{!"0x55ddceb0e420", !8, i64 0}
!304 = !{!305, !305, i64 0}
!305 = !{!"0x55ddceb0e420.w1.b1", !292, i64 0}
!306 = !{!307, !307, i64 0}
!307 = !{!"0x55ddceb0e470.w1.b0", !308, i64 0}
!308 = !{!"0x55ddceb0e470.w2.b0", !309, i64 0}
!309 = !{!"0x55ddceb0e470.w4.b0", !310, i64 0}
!310 = !{!"0x55ddceb0e470.w8.b0", !311, i64 0}
!311 = !{!"0x55ddceb0e470.w16.b0", !312, i64 0}
!312 = !{!"0x55ddceb0e470.w32.b0", !313, i64 0}
!313 = !{!"0x55ddceb0e470.w64.b0", !314, i64 0}
!314 = !{!"0x55ddceb0e470.w128.b0", !315, i64 0}
!315 = !{!"0x55ddceb0e470.w256.b0", !316, i64 0}
!316 = !{!"0x55ddceb0e470.w512.b0", !317, i64 0}
!317 = !{!"0x55ddceb0e470.w1024.b0", !318, i64 0}
!318 = !{!"int64", !319, i64 0}
!319 = !{!"0x55ddceb0e470", !8, i64 0}
!320 = !{!321, !321, i64 0}
!321 = !{!"0x55ddceb0e470.w1.b1", !308, i64 0}
!322 = !{!323, !323, i64 0}
!323 = !{!"float32", !324, i64 0}
!324 = !{!"0x55ddceb071a0", !8, i64 0}
!325 = !{!326, !326, i64 0}
!326 = !{!"float32", !327, i64 0}
!327 = !{!"0x55ddceb06640", !8, i64 0}
!328 = !{!329, !329, i64 0}
!329 = !{!"float32", !330, i64 0}
!330 = !{!"0x55ddceb04e00", !8, i64 0}
!331 = !{!332, !332, i64 0}
!332 = !{!"float32", !333, i64 0}
!333 = !{!"0x55ddceb071f0", !8, i64 0}
!334 = !{!335, !335, i64 0}
!335 = !{!"float32", !336, i64 0}
!336 = !{!"0x55ddceb06b30", !8, i64 0}
!337 = !{!338, !338, i64 0}
!338 = !{!"0x55ddceaf95a0.w1.b0", !339, i64 0}
!339 = !{!"0x55ddceaf95a0.w2.b0", !340, i64 0}
!340 = !{!"0x55ddceaf95a0.w4.b0", !341, i64 0}
!341 = !{!"0x55ddceaf95a0.w8.b0", !342, i64 0}
!342 = !{!"0x55ddceaf95a0.w16.b0", !343, i64 0}
!343 = !{!"0x55ddceaf95a0.w32.b0", !344, i64 0}
!344 = !{!"0x55ddceaf95a0.w64.b0", !345, i64 0}
!345 = !{!"0x55ddceaf95a0.w128.b0", !346, i64 0}
!346 = !{!"0x55ddceaf95a0.w256.b0", !347, i64 0}
!347 = !{!"0x55ddceaf95a0.w512.b0", !348, i64 0}
!348 = !{!"0x55ddceaf95a0.w1024.b0", !349, i64 0}
!349 = !{!"int32", !350, i64 0}
!350 = !{!"0x55ddceaf95a0", !8, i64 0}
!351 = !{!352, !352, i64 0}
!352 = !{!"0x55ddceaf95a0.w1.b1", !339, i64 0}
!353 = !{!354, !354, i64 0}
!354 = !{!"0x55ddceaef660.w1.b0", !355, i64 0}
!355 = !{!"0x55ddceaef660.w2.b0", !356, i64 0}
!356 = !{!"0x55ddceaef660.w4.b0", !357, i64 0}
!357 = !{!"0x55ddceaef660.w8.b0", !358, i64 0}
!358 = !{!"0x55ddceaef660.w16.b0", !359, i64 0}
!359 = !{!"0x55ddceaef660.w32.b0", !360, i64 0}
!360 = !{!"0x55ddceaef660.w64.b0", !361, i64 0}
!361 = !{!"0x55ddceaef660.w128.b0", !362, i64 0}
!362 = !{!"0x55ddceaef660.w256.b0", !363, i64 0}
!363 = !{!"0x55ddceaef660.w512.b0", !364, i64 0}
!364 = !{!"0x55ddceaef660.w1024.b0", !365, i64 0}
!365 = !{!"int64", !366, i64 0}
!366 = !{!"0x55ddceaef660", !8, i64 0}
!367 = !{!368, !368, i64 0}
!368 = !{!"0x55ddceaef660.w1.b1", !355, i64 0}
!369 = !{!370, !370, i64 0}
!370 = !{!"0x55ddceaef710.w1.b0", !371, i64 0}
!371 = !{!"0x55ddceaef710.w2.b0", !372, i64 0}
!372 = !{!"0x55ddceaef710.w4.b0", !373, i64 0}
!373 = !{!"0x55ddceaef710.w8.b0", !374, i64 0}
!374 = !{!"0x55ddceaef710.w16.b0", !375, i64 0}
!375 = !{!"0x55ddceaef710.w32.b0", !376, i64 0}
!376 = !{!"0x55ddceaef710.w64.b0", !377, i64 0}
!377 = !{!"0x55ddceaef710.w128.b0", !378, i64 0}
!378 = !{!"0x55ddceaef710.w256.b0", !379, i64 0}
!379 = !{!"0x55ddceaef710.w512.b0", !380, i64 0}
!380 = !{!"0x55ddceaef710.w1024.b0", !381, i64 0}
!381 = !{!"int64", !382, i64 0}
!382 = !{!"0x55ddceaef710", !8, i64 0}
!383 = !{!384, !384, i64 0}
!384 = !{!"0x55ddceaef710.w1.b1", !371, i64 0}
!385 = !{!386, !386, i64 0}
!386 = !{!"0x55ddceaf0c10.w1.b0", !387, i64 0}
!387 = !{!"0x55ddceaf0c10.w2.b0", !388, i64 0}
!388 = !{!"0x55ddceaf0c10.w4.b0", !389, i64 0}
!389 = !{!"0x55ddceaf0c10.w8.b0", !390, i64 0}
!390 = !{!"0x55ddceaf0c10.w16.b0", !391, i64 0}
!391 = !{!"0x55ddceaf0c10.w32.b0", !392, i64 0}
!392 = !{!"0x55ddceaf0c10.w64.b0", !393, i64 0}
!393 = !{!"0x55ddceaf0c10.w128.b0", !394, i64 0}
!394 = !{!"0x55ddceaf0c10.w256.b0", !395, i64 0}
!395 = !{!"0x55ddceaf0c10.w512.b0", !396, i64 0}
!396 = !{!"0x55ddceaf0c10.w1024.b0", !397, i64 0}
!397 = !{!"int64", !398, i64 0}
!398 = !{!"0x55ddceaf0c10", !8, i64 0}
!399 = !{!400, !400, i64 0}
!400 = !{!"0x55ddceaf0c10.w1.b1", !387, i64 0}
!401 = !{!402, !402, i64 0}
!402 = !{!"0x55ddceaef760.w1.b0", !403, i64 0}
!403 = !{!"0x55ddceaef760.w2.b0", !404, i64 0}
!404 = !{!"0x55ddceaef760.w4.b0", !405, i64 0}
!405 = !{!"0x55ddceaef760.w8.b0", !406, i64 0}
!406 = !{!"0x55ddceaef760.w16.b0", !407, i64 0}
!407 = !{!"0x55ddceaef760.w32.b0", !408, i64 0}
!408 = !{!"0x55ddceaef760.w64.b0", !409, i64 0}
!409 = !{!"0x55ddceaef760.w128.b0", !410, i64 0}
!410 = !{!"0x55ddceaef760.w256.b0", !411, i64 0}
!411 = !{!"0x55ddceaef760.w512.b0", !412, i64 0}
!412 = !{!"0x55ddceaef760.w1024.b0", !413, i64 0}
!413 = !{!"int64", !414, i64 0}
!414 = !{!"0x55ddceaef760", !8, i64 0}
!415 = !{!416, !416, i64 0}
!416 = !{!"0x55ddceaef760.w1.b1", !403, i64 0}
!417 = !{!418, !418, i64 0}
!418 = !{!"float32", !419, i64 0}
!419 = !{!"0x55ddcead4f60", !8, i64 0}
!420 = !{!421, !421, i64 0}
!421 = !{!"float32", !422, i64 0}
!422 = !{!"0x55ddcead4e50", !8, i64 0}
!423 = !{!424, !424, i64 0}
!424 = !{!"0x55ddceb309d0.w1.b0", !425, i64 0}
!425 = !{!"0x55ddceb309d0.w2.b0", !426, i64 0}
!426 = !{!"0x55ddceb309d0.w4.b0", !427, i64 0}
!427 = !{!"0x55ddceb309d0.w8.b0", !428, i64 0}
!428 = !{!"0x55ddceb309d0.w16.b0", !429, i64 0}
!429 = !{!"0x55ddceb309d0.w32.b0", !430, i64 0}
!430 = !{!"0x55ddceb309d0.w64.b0", !431, i64 0}
!431 = !{!"0x55ddceb309d0.w128.b0", !432, i64 0}
!432 = !{!"0x55ddceb309d0.w256.b0", !433, i64 0}
!433 = !{!"0x55ddceb309d0.w512.b0", !434, i64 0}
!434 = !{!"0x55ddceb309d0.w1024.b0", !435, i64 0}
!435 = !{!"int32", !436, i64 0}
!436 = !{!"0x55ddceb309d0", !8, i64 0}
!437 = !{!438, !438, i64 0}
!438 = !{!"0x55ddceb309d0.w1.b2", !439, i64 0}
!439 = !{!"0x55ddceb309d0.w2.b2", !426, i64 0}
!440 = !{!441, !441, i64 0}
!441 = !{!"0x55ddceb309d0.w1.b3", !439, i64 0}
!442 = !{!443, !443, i64 0}
!443 = !{!"0x55ddceb309d0.w1.b1", !425, i64 0}
!444 = !{!445, !445, i64 0}
!445 = !{!"0x55ddceb3e960.w1.b0", !446, i64 0}
!446 = !{!"0x55ddceb3e960.w2.b0", !447, i64 0}
!447 = !{!"0x55ddceb3e960.w4.b0", !448, i64 0}
!448 = !{!"0x55ddceb3e960.w8.b0", !449, i64 0}
!449 = !{!"0x55ddceb3e960.w16.b0", !450, i64 0}
!450 = !{!"0x55ddceb3e960.w32.b0", !451, i64 0}
!451 = !{!"0x55ddceb3e960.w64.b0", !452, i64 0}
!452 = !{!"0x55ddceb3e960.w128.b0", !453, i64 0}
!453 = !{!"0x55ddceb3e960.w256.b0", !454, i64 0}
!454 = !{!"0x55ddceb3e960.w512.b0", !455, i64 0}
!455 = !{!"0x55ddceb3e960.w1024.b0", !456, i64 0}
!456 = !{!"int64", !457, i64 0}
!457 = !{!"0x55ddceb3e960", !8, i64 0}
!458 = !{!459, !459, i64 0}
!459 = !{!"0x55ddceb3e960.w1.b1", !446, i64 0}
!460 = !{!461, !461, i64 0}
!461 = !{!"0x55ddceb3e960.w1.b2", !462, i64 0}
!462 = !{!"0x55ddceb3e960.w2.b2", !447, i64 0}
!463 = !{!464, !464, i64 0}
!464 = !{!"0x55ddceb3e960.w1.b3", !462, i64 0}
!465 = !{!466, !466, i64 0}
!466 = !{!"0x55ddceb3ea00.w4.b0", !467, i64 0}
!467 = !{!"0x55ddceb3ea00.w8.b0", !468, i64 0}
!468 = !{!"0x55ddceb3ea00.w16.b0", !469, i64 0}
!469 = !{!"0x55ddceb3ea00.w32.b0", !470, i64 0}
!470 = !{!"0x55ddceb3ea00.w64.b0", !471, i64 0}
!471 = !{!"0x55ddceb3ea00.w128.b0", !472, i64 0}
!472 = !{!"0x55ddceb3ea00.w256.b0", !473, i64 0}
!473 = !{!"0x55ddceb3ea00.w512.b0", !474, i64 0}
!474 = !{!"0x55ddceb3ea00.w1024.b0", !475, i64 0}
!475 = !{!"int64", !476, i64 0}
!476 = !{!"0x55ddceb3ea00", !8, i64 0}
!477 = !{!478, !478, i64 0}
!478 = !{!"0x55ddceb3eaa0.w1.b0", !479, i64 0}
!479 = !{!"0x55ddceb3eaa0.w2.b0", !480, i64 0}
!480 = !{!"0x55ddceb3eaa0.w4.b0", !481, i64 0}
!481 = !{!"0x55ddceb3eaa0.w8.b0", !482, i64 0}
!482 = !{!"0x55ddceb3eaa0.w16.b0", !483, i64 0}
!483 = !{!"0x55ddceb3eaa0.w32.b0", !484, i64 0}
!484 = !{!"0x55ddceb3eaa0.w64.b0", !485, i64 0}
!485 = !{!"0x55ddceb3eaa0.w128.b0", !486, i64 0}
!486 = !{!"0x55ddceb3eaa0.w256.b0", !487, i64 0}
!487 = !{!"0x55ddceb3eaa0.w512.b0", !488, i64 0}
!488 = !{!"0x55ddceb3eaa0.w1024.b0", !489, i64 0}
!489 = !{!"int64", !490, i64 0}
!490 = !{!"0x55ddceb3eaa0", !8, i64 0}
!491 = !{!492, !492, i64 0}
!492 = !{!"0x55ddceb3eaa0.w1.b1", !479, i64 0}
!493 = !{!494, !494, i64 0}
!494 = !{!"0x55ddceb3eaa0.w1.b2", !495, i64 0}
!495 = !{!"0x55ddceb3eaa0.w2.b2", !480, i64 0}
!496 = !{!497, !497, i64 0}
!497 = !{!"0x55ddceb3eaa0.w1.b3", !495, i64 0}
!498 = !{!499, !499, i64 0}
!499 = !{!"0x55ddceb3ea50.w4.b0", !500, i64 0}
!500 = !{!"0x55ddceb3ea50.w8.b0", !501, i64 0}
!501 = !{!"0x55ddceb3ea50.w16.b0", !502, i64 0}
!502 = !{!"0x55ddceb3ea50.w32.b0", !503, i64 0}
!503 = !{!"0x55ddceb3ea50.w64.b0", !504, i64 0}
!504 = !{!"0x55ddceb3ea50.w128.b0", !505, i64 0}
!505 = !{!"0x55ddceb3ea50.w256.b0", !506, i64 0}
!506 = !{!"0x55ddceb3ea50.w512.b0", !507, i64 0}
!507 = !{!"0x55ddceb3ea50.w1024.b0", !508, i64 0}
!508 = !{!"int64", !509, i64 0}
!509 = !{!"0x55ddceb3ea50", !8, i64 0}
!510 = !{!511, !511, i64 0}
!511 = !{!"0x55ddceb3edd0.w1.b0", !512, i64 0}
!512 = !{!"0x55ddceb3edd0.w2.b0", !513, i64 0}
!513 = !{!"0x55ddceb3edd0.w4.b0", !514, i64 0}
!514 = !{!"0x55ddceb3edd0.w8.b0", !515, i64 0}
!515 = !{!"0x55ddceb3edd0.w16.b0", !516, i64 0}
!516 = !{!"0x55ddceb3edd0.w32.b0", !517, i64 0}
!517 = !{!"0x55ddceb3edd0.w64.b0", !518, i64 0}
!518 = !{!"0x55ddceb3edd0.w128.b0", !519, i64 0}
!519 = !{!"0x55ddceb3edd0.w256.b0", !520, i64 0}
!520 = !{!"0x55ddceb3edd0.w512.b0", !521, i64 0}
!521 = !{!"0x55ddceb3edd0.w1024.b0", !522, i64 0}
!522 = !{!"int64", !523, i64 0}
!523 = !{!"0x55ddceb3edd0", !8, i64 0}
!524 = !{!525, !525, i64 0}
!525 = !{!"0x55ddceb3f000.w1.b0", !526, i64 0}
!526 = !{!"0x55ddceb3f000.w2.b0", !527, i64 0}
!527 = !{!"0x55ddceb3f000.w4.b0", !528, i64 0}
!528 = !{!"0x55ddceb3f000.w8.b0", !529, i64 0}
!529 = !{!"0x55ddceb3f000.w16.b0", !530, i64 0}
!530 = !{!"0x55ddceb3f000.w32.b0", !531, i64 0}
!531 = !{!"0x55ddceb3f000.w64.b0", !532, i64 0}
!532 = !{!"0x55ddceb3f000.w128.b0", !533, i64 0}
!533 = !{!"0x55ddceb3f000.w256.b0", !534, i64 0}
!534 = !{!"0x55ddceb3f000.w512.b0", !535, i64 0}
!535 = !{!"0x55ddceb3f000.w1024.b0", !536, i64 0}
!536 = !{!"int64", !537, i64 0}
!537 = !{!"0x55ddceb3f000", !8, i64 0}
!538 = !{!539, !539, i64 0}
!539 = !{!"0x55ddceb3fbb0.w1.b0", !540, i64 0}
!540 = !{!"0x55ddceb3fbb0.w2.b0", !541, i64 0}
!541 = !{!"0x55ddceb3fbb0.w4.b0", !542, i64 0}
!542 = !{!"0x55ddceb3fbb0.w8.b0", !543, i64 0}
!543 = !{!"0x55ddceb3fbb0.w16.b0", !544, i64 0}
!544 = !{!"0x55ddceb3fbb0.w32.b0", !545, i64 0}
!545 = !{!"0x55ddceb3fbb0.w64.b0", !546, i64 0}
!546 = !{!"0x55ddceb3fbb0.w128.b0", !547, i64 0}
!547 = !{!"0x55ddceb3fbb0.w256.b0", !548, i64 0}
!548 = !{!"0x55ddceb3fbb0.w512.b0", !549, i64 0}
!549 = !{!"0x55ddceb3fbb0.w1024.b0", !550, i64 0}
!550 = !{!"int64", !551, i64 0}
!551 = !{!"0x55ddceb3fbb0", !8, i64 0}
!552 = !{!553, !553, i64 0}
!553 = !{!"0x55ddceb3fbb0.w1.b1", !540, i64 0}
!554 = !{!555, !555, i64 0}
!555 = !{!"0x55ddceb3fbb0.w1.b2", !556, i64 0}
!556 = !{!"0x55ddceb3fbb0.w2.b2", !541, i64 0}
!557 = !{!558, !558, i64 0}
!558 = !{!"0x55ddceb3fbb0.w1.b3", !556, i64 0}
!559 = !{!560, !560, i64 0}
!560 = !{!"0x55ddceb3fc00.w4.b0", !561, i64 0}
!561 = !{!"0x55ddceb3fc00.w8.b0", !562, i64 0}
!562 = !{!"0x55ddceb3fc00.w16.b0", !563, i64 0}
!563 = !{!"0x55ddceb3fc00.w32.b0", !564, i64 0}
!564 = !{!"0x55ddceb3fc00.w64.b0", !565, i64 0}
!565 = !{!"0x55ddceb3fc00.w128.b0", !566, i64 0}
!566 = !{!"0x55ddceb3fc00.w256.b0", !567, i64 0}
!567 = !{!"0x55ddceb3fc00.w512.b0", !568, i64 0}
!568 = !{!"0x55ddceb3fc00.w1024.b0", !569, i64 0}
!569 = !{!"int64", !570, i64 0}
!570 = !{!"0x55ddceb3fc00", !8, i64 0}
!571 = !{!572, !572, i64 0}
!572 = !{!"float32", !573, i64 0}
!573 = !{!"0x55ddceb30980", !8, i64 0}
!574 = !{!575, !575, i64 0}
!575 = !{!"float32", !576, i64 0}
!576 = !{!"0x55ddceb29800", !8, i64 0}
!577 = distinct !{!577, !578}
!578 = !{!"llvm.loop.isvectorized", i32 1}
!579 = distinct !{!579, !578}
!580 = !{!581, !581, i64 0}
!581 = !{!"float32", !582, i64 0}
!582 = !{!"0x55ddceb308f0", !8, i64 0}
!583 = !{!584, !584, i64 0}
!584 = !{!"float32", !585, i64 0}
!585 = !{!"0x55ddceb24360", !8, i64 0}
!586 = !{!587, !587, i64 0}
!587 = !{!"float32", !588, i64 0}
!588 = !{!"0x55ddceb30860", !8, i64 0}
!589 = !{!590, !590, i64 0}
!590 = !{!"float32", !591, i64 0}
!591 = !{!"0x55ddceb27760", !8, i64 0}
!592 = !{!593, !593, i64 0}
!593 = !{!"float32", !594, i64 0}
!594 = !{!"0x55ddceb2faa0", !8, i64 0}
!595 = !{!596, !596, i64 0}
!596 = !{!"0x55ddceaf3670.w1.b0", !597, i64 0}
!597 = !{!"0x55ddceaf3670.w2.b0", !598, i64 0}
!598 = !{!"0x55ddceaf3670.w4.b0", !599, i64 0}
!599 = !{!"0x55ddceaf3670.w8.b0", !600, i64 0}
!600 = !{!"0x55ddceaf3670.w16.b0", !601, i64 0}
!601 = !{!"0x55ddceaf3670.w32.b0", !602, i64 0}
!602 = !{!"0x55ddceaf3670.w64.b0", !603, i64 0}
!603 = !{!"0x55ddceaf3670.w128.b0", !604, i64 0}
!604 = !{!"0x55ddceaf3670.w256.b0", !605, i64 0}
!605 = !{!"0x55ddceaf3670.w512.b0", !606, i64 0}
!606 = !{!"0x55ddceaf3670.w1024.b0", !607, i64 0}
!607 = !{!"int32", !608, i64 0}
!608 = !{!"0x55ddceaf3670", !8, i64 0}
!609 = !{!610, !610, i64 0}
!610 = !{!"0x55ddceaf3670.w1.b1", !597, i64 0}
!611 = !{!612, !612, i64 0}
!612 = !{!"0x55ddceaf4370.w1.b0", !613, i64 0}
!613 = !{!"0x55ddceaf4370.w2.b0", !614, i64 0}
!614 = !{!"0x55ddceaf4370.w4.b0", !615, i64 0}
!615 = !{!"0x55ddceaf4370.w8.b0", !616, i64 0}
!616 = !{!"0x55ddceaf4370.w16.b0", !617, i64 0}
!617 = !{!"0x55ddceaf4370.w32.b0", !618, i64 0}
!618 = !{!"0x55ddceaf4370.w64.b0", !619, i64 0}
!619 = !{!"0x55ddceaf4370.w128.b0", !620, i64 0}
!620 = !{!"0x55ddceaf4370.w256.b0", !621, i64 0}
!621 = !{!"0x55ddceaf4370.w512.b0", !622, i64 0}
!622 = !{!"0x55ddceaf4370.w1024.b0", !623, i64 0}
!623 = !{!"int64", !624, i64 0}
!624 = !{!"0x55ddceaf4370", !8, i64 0}
!625 = !{!626, !626, i64 0}
!626 = !{!"0x55ddceaf4370.w1.b1", !613, i64 0}
!627 = !{!628, !628, i64 0}
!628 = !{!"0x55ddceaf4510.w1.b0", !629, i64 0}
!629 = !{!"0x55ddceaf4510.w2.b0", !630, i64 0}
!630 = !{!"0x55ddceaf4510.w4.b0", !631, i64 0}
!631 = !{!"0x55ddceaf4510.w8.b0", !632, i64 0}
!632 = !{!"0x55ddceaf4510.w16.b0", !633, i64 0}
!633 = !{!"0x55ddceaf4510.w32.b0", !634, i64 0}
!634 = !{!"0x55ddceaf4510.w64.b0", !635, i64 0}
!635 = !{!"0x55ddceaf4510.w128.b0", !636, i64 0}
!636 = !{!"0x55ddceaf4510.w256.b0", !637, i64 0}
!637 = !{!"0x55ddceaf4510.w512.b0", !638, i64 0}
!638 = !{!"0x55ddceaf4510.w1024.b0", !639, i64 0}
!639 = !{!"int64", !640, i64 0}
!640 = !{!"0x55ddceaf4510", !8, i64 0}
!641 = !{!642, !642, i64 0}
!642 = !{!"0x55ddceaf4510.w1.b1", !629, i64 0}
!643 = !{!644, !644, i64 0}
!644 = !{!"0x55ddceaf5ec0.w1.b0", !645, i64 0}
!645 = !{!"0x55ddceaf5ec0.w2.b0", !646, i64 0}
!646 = !{!"0x55ddceaf5ec0.w4.b0", !647, i64 0}
!647 = !{!"0x55ddceaf5ec0.w8.b0", !648, i64 0}
!648 = !{!"0x55ddceaf5ec0.w16.b0", !649, i64 0}
!649 = !{!"0x55ddceaf5ec0.w32.b0", !650, i64 0}
!650 = !{!"0x55ddceaf5ec0.w64.b0", !651, i64 0}
!651 = !{!"0x55ddceaf5ec0.w128.b0", !652, i64 0}
!652 = !{!"0x55ddceaf5ec0.w256.b0", !653, i64 0}
!653 = !{!"0x55ddceaf5ec0.w512.b0", !654, i64 0}
!654 = !{!"0x55ddceaf5ec0.w1024.b0", !655, i64 0}
!655 = !{!"int64", !656, i64 0}
!656 = !{!"0x55ddceaf5ec0", !8, i64 0}
!657 = !{!658, !658, i64 0}
!658 = !{!"0x55ddceaf5ec0.w1.b1", !645, i64 0}
!659 = !{!660, !660, i64 0}
!660 = !{!"0x55ddceaf4650.w1.b0", !661, i64 0}
!661 = !{!"0x55ddceaf4650.w2.b0", !662, i64 0}
!662 = !{!"0x55ddceaf4650.w4.b0", !663, i64 0}
!663 = !{!"0x55ddceaf4650.w8.b0", !664, i64 0}
!664 = !{!"0x55ddceaf4650.w16.b0", !665, i64 0}
!665 = !{!"0x55ddceaf4650.w32.b0", !666, i64 0}
!666 = !{!"0x55ddceaf4650.w64.b0", !667, i64 0}
!667 = !{!"0x55ddceaf4650.w128.b0", !668, i64 0}
!668 = !{!"0x55ddceaf4650.w256.b0", !669, i64 0}
!669 = !{!"0x55ddceaf4650.w512.b0", !670, i64 0}
!670 = !{!"0x55ddceaf4650.w1024.b0", !671, i64 0}
!671 = !{!"int64", !672, i64 0}
!672 = !{!"0x55ddceaf4650", !8, i64 0}
!673 = !{!674, !674, i64 0}
!674 = !{!"0x55ddceaf4650.w1.b1", !661, i64 0}
!675 = !{!676, !676, i64 0}
!676 = !{!"float32", !677, i64 0}
!677 = !{!"0x55ddce9768f0", !8, i64 0}
!678 = !{!679, !679, i64 0}
!679 = !{!"float32", !680, i64 0}
!680 = !{!"0x55ddcead10c0", !8, i64 0}

Evaluate inference time cost...
Mean inference time (std dev): 41.78 ms (0.54 ms)
