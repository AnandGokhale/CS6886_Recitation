Extract tasks...
fn (%input0: Tensor[(1, 3, 224, 224), float32], %weight.1: Tensor[(32, 3, 3, 3), float32], %v4: Tensor[(32), float32], %weight: Tensor[(10, 1577088), float32], %bias: Tensor[(10), float32]) -> Tensor[(1, 10), float32] {
  %0 = nn.conv2d(%input0, %weight.1, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 222, 222), float32] */;
  %1 = nn.bias_add(%0, %v4) /* ty=Tensor[(1, 32, 222, 222), float32] */;
  %2 = nn.relu(%1) /* ty=Tensor[(1, 32, 222, 222), float32] */;
  %3 = reshape(%2, newshape=[-1, 1577088]) /* ty=Tensor[(1, 1577088), float32] */;
  %4 = multiply(%3, 1f /* ty=float32 */) /* ty=Tensor[(1, 1577088), float32] */;
  %5 = transpose(%weight, axes=[1, 0]) /* ty=Tensor[(1577088, 10), float32] */;
  %6 = multiply(%5, 1f /* ty=float32 */) /* ty=Tensor[(1577088, 10), float32] */;
  %7 = transpose(%6, axes=[1, 0]) /* ty=Tensor[(10, 1577088), float32] */;
  %8 = nn.dense(%4, %7, units=10) /* ty=Tensor[(1, 10), float32] */;
  %9 = nn.bias_add(%8, %bias) /* ty=Tensor[(1, 10), float32] */;
  %10 = nn.softmax(%9, axis=1) /* ty=Tensor[(1, 10), float32] */;
  nn.softmax(%10) /* ty=Tensor[(1, 10), float32] */
}
[Task  1/ 1]  Current/Best:    0.00/   0.00 GFLOPS | Progress: (0/120) | 0.00 s[Task  1/ 1]  Current/Best:    8.33/  25.88 GFLOPS | Progress: (4/120) | 7.72 s[Task  1/ 1]  Current/Best:   11.98/  25.88 GFLOPS | Progress: (8/120) | 15.35 s[Task  1/ 1]  Current/Best:   23.17/  25.88 GFLOPS | Progress: (12/120) | 23.17 s[Task  1/ 1]  Current/Best:    9.28/  25.88 GFLOPS | Progress: (16/120) | 28.84 s[Task  1/ 1]  Current/Best:   12.97/  25.88 GFLOPS | Progress: (20/120) | 34.54 s[Task  1/ 1]  Current/Best:    9.23/  25.88 GFLOPS | Progress: (24/120) | 41.64 s[Task  1/ 1]  Current/Best:    7.39/  25.88 GFLOPS | Progress: (28/120) | 49.17 s[Task  1/ 1]  Current/Best:    5.90/  25.88 GFLOPS | Progress: (32/120) | 54.79 s[Task  1/ 1]  Current/Best:   22.20/  25.88 GFLOPS | Progress: (36/120) | 60.17 s[Task  1/ 1]  Current/Best:   20.24/  26.17 GFLOPS | Progress: (40/120) | 68.15 s[Task  1/ 1]  Current/Best:   26.20/  26.20 GFLOPS | Progress: (44/120) | 74.92 s[Task  1/ 1]  Current/Best:    4.61/  26.20 GFLOPS | Progress: (48/120) | 80.40 s[Task  1/ 1]  Current/Best:   17.09/  26.99 GFLOPS | Progress: (52/120) | 87.29 s[Task  1/ 1]  Current/Best:   17.78/  26.99 GFLOPS | Progress: (56/120) | 95.01 s[Task  1/ 1]  Current/Best:   22.31/  26.99 GFLOPS | Progress: (60/120) | 100.39 s[Task  1/ 1]  Current/Best:   23.87/  26.99 GFLOPS | Progress: (64/120) | 107.39 s[Task  1/ 1]  Current/Best:    6.99/  26.99 GFLOPS | Progress: (68/120) | 112.99 s[Task  1/ 1]  Current/Best:   23.40/  26.99 GFLOPS | Progress: (72/120) | 119.80 s[Task  1/ 1]  Current/Best:    7.52/  26.99 GFLOPS | Progress: (76/120) | 127.11 s[Task  1/ 1]  Current/Best:   11.14/  26.99 GFLOPS | Progress: (80/120) | 135.65 s[Task  1/ 1]  Current/Best:    5.91/  26.99 GFLOPS | Progress: (84/120) | 141.47 s[Task  1/ 1]  Current/Best:   18.34/  26.99 GFLOPS | Progress: (88/120) | 147.03 s[Task  1/ 1]  Current/Best:    9.88/  26.99 GFLOPS | Progress: (92/120) | 155.55 s[Task  1/ 1]  Current/Best:   11.21/  26.99 GFLOPS | Progress: (96/120) | 162.52 s[Task  1/ 1]  Current/Best:   12.92/  26.99 GFLOPS | Progress: (100/120) | 167.98 s[Task  1/ 1]  Current/Best:   17.24/  26.99 GFLOPS | Progress: (104/120) | 173.40 s[Task  1/ 1]  Current/Best:   22.90/  26.99 GFLOPS | Progress: (108/120) | 180.53 s[Task  1/ 1]  Current/Best:   16.44/  26.99 GFLOPS | Progress: (112/120) | 188.79 s[Task  1/ 1]  Current/Best:    5.91/  26.99 GFLOPS | Progress: (116/120) | 198.65 s[Task  1/ 1]  Current/Best:   16.86/  26.99 GFLOPS | Progress: (120/120) | 205.37 s Done.
Compile...
; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32*, i32 }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }
%4 = type { i8*, i8*, i8*, i8*, i32 }
%5 = type { i8*, i8* }
%6 = type { i8*, i8*, float* }

@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@__TVMBackendParallelLaunch = linkonce dllexport local_unnamed_addr global i32 (i32 (i32, %0*, i8*)*, i8*, i32)* null, align 8
@.str = private constant [94 x i8] c"Assert fail: (num_args == 4), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: num_args should be 4\00", align 1
@.str.1 = private constant [169 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [169 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [169 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [169 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_nn_relu: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [55 x i8] c"Assert fail: (dev_type == 1), device_type need to be 1\00", align 1
@.str.6 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 5\00", align 1
@.str.7 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg0, 0, 5) == (uint8)2) && (tvm_struct_get(arg0, 0, 6) == (uint8)32)) && (tvm_struct_get(arg0, 0, 7) == (uint16)1)), arg0.dtype is expected to be float32\00", align 1
@.str.8 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[0])), Argument arg0.shape[0] has an unsatisfied constraint\00", align 1
@.str.9 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.10 = private constant [97 x i8] c"Assert fail: (224 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.11 = private constant [97 x i8] c"Assert fail: (224 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.12 = private constant [95 x i8] c"Assert fail: (3 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.13 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (3 == int32(arg0.strides[3]))) && (672 == int32(arg0.strides[2]))) && (150528 == int32(arg0.strides[1]))) && (150528 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.14 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg0, 0, 8)), Argument arg0.byte_offset has an unsatisfied constraint\00", align 1
@.str.15 = private constant [81 x i8] c"Assert fail: (6 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 6\00", align 1
@.str.16 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg1, 0, 5) == (uint8)2) && (tvm_struct_get(arg1, 0, 6) == (uint8)32)) && (tvm_struct_get(arg1, 0, 7) == (uint16)1)), arg1.dtype is expected to be float32\00", align 1
@.str.17 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.18 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.19 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.20 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.21 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.22 = private constant [96 x i8] c"Assert fail: (32 == int32(arg1.shape[5])), Argument arg1.shape[5] has an unsatisfied constraint\00", align 1
@.str.23 = private constant [270 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (96 == int32(arg1.strides[3]))) && (288 == int32(arg1.strides[2]))) && (864 == int32(arg1.strides[1]))) && (864 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.24 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg1, 0, 8)), Argument arg1.byte_offset has an unsatisfied constraint\00", align 1
@.str.25 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg1, 0, 10)), Argument arg1.device_type has an unsatisfied constraint\00", align 1
@.str.26 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg1, 0, 9)), Argument arg1.device_id has an unsatisfied constraint\00", align 1
@.str.27 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg2, 0, 4)), arg2.ndim is expected to equal 5\00", align 1
@.str.28 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg2, 0, 5) == (uint8)2) && (tvm_struct_get(arg2, 0, 6) == (uint8)32)) && (tvm_struct_get(arg2, 0, 7) == (uint16)1)), arg2.dtype is expected to be float32\00", align 1
@.str.29 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[0])), Argument arg2.shape[0] has an unsatisfied constraint\00", align 1
@.str.30 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.31 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[2])), Argument arg2.shape[2] has an unsatisfied constraint\00", align 1
@.str.32 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[3])), Argument arg2.shape[3] has an unsatisfied constraint\00", align 1
@.str.33 = private constant [96 x i8] c"Assert fail: (32 == int32(arg2.shape[4])), Argument arg2.shape[4] has an unsatisfied constraint\00", align 1
@.str.34 = private constant [231 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (32 == int32(arg2.strides[2]))) && (32 == int32(arg2.strides[1]))) && (32 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.35 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg2, 0, 8)), Argument arg2.byte_offset has an unsatisfied constraint\00", align 1
@.str.36 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg2, 0, 10)), Argument arg2.device_type has an unsatisfied constraint\00", align 1
@.str.37 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg2, 0, 9)), Argument arg2.device_id has an unsatisfied constraint\00", align 1
@.str.38 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg3, 0, 4)), arg3.ndim is expected to equal 5\00", align 1
@.str.39 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg3, 0, 5) == (uint8)2) && (tvm_struct_get(arg3, 0, 6) == (uint8)32)) && (tvm_struct_get(arg3, 0, 7) == (uint16)1)), arg3.dtype is expected to be float32\00", align 1
@.str.40 = private constant [95 x i8] c"Assert fail: (1 == int32(arg3.shape[0])), Argument arg3.shape[0] has an unsatisfied constraint\00", align 1
@.str.41 = private constant [95 x i8] c"Assert fail: (1 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.42 = private constant [97 x i8] c"Assert fail: (222 == int32(arg3.shape[2])), Argument arg3.shape[2] has an unsatisfied constraint\00", align 1
@.str.43 = private constant [97 x i8] c"Assert fail: (222 == int32(arg3.shape[3])), Argument arg3.shape[3] has an unsatisfied constraint\00", align 1
@.str.44 = private constant [96 x i8] c"Assert fail: (32 == int32(arg3.shape[4])), Argument arg3.shape[4] has an unsatisfied constraint\00", align 1
@.str.45 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (32 == int32(arg3.strides[3]))) && (7104 == int32(arg3.strides[2]))) && (1577088 == int32(arg3.strides[1]))) && (1577088 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.46 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg3, 0, 8)), Argument arg3.byte_offset has an unsatisfied constraint\00", align 1
@.str.47 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg3, 0, 10)), Argument arg3.device_type has an unsatisfied constraint\00", align 1
@.str.48 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg3, 0, 9)), Argument arg3.device_id has an unsatisfied constraint\00", align 1
@__TVMBackendAllocWorkspace = linkonce dllexport local_unnamed_addr global i8* (i32, i32, i64, i32, i32)* null, align 8
@__TVMBackendFreeWorkspace = linkonce dllexport local_unnamed_addr global i32 (i32, i32, i8*)* null, align 8
@.str.49 = private constant [77 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_2: num_args should be 2\00", align 1
@.str.50 = private constant [152 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_2: Expect arg[0] to be pointer\00", align 1
@.str.51 = private constant [152 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_2: Expect arg[1] to be pointer\00", align 1
@.str.52 = private constant [81 x i8] c"Assert fail: (4 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 4\00", align 1
@.str.53 = private constant [95 x i8] c"Assert fail: (3 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.54 = private constant [203 x i8] c"Assert fail: ((((1 == int32(arg0.strides[3])) && (224 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (150528 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.55 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 5\00", align 1
@.str.56 = private constant [97 x i8] c"Assert fail: (224 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.57 = private constant [97 x i8] c"Assert fail: (224 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.58 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (3 == int32(arg1.strides[3]))) && (672 == int32(arg1.strides[2]))) && (150528 == int32(arg1.strides[1]))) && (150528 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.60 = private constant [92 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_reshape_multiply: num_args should be 2\00", align 1
@.str.61 = private constant [167 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_reshape_multiply: Expect arg[0] to be pointer\00", align 1
@.str.62 = private constant [167 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_reshape_multiply: Expect arg[1] to be pointer\00", align 1
@.str.63 = private constant [97 x i8] c"Assert fail: (222 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.64 = private constant [97 x i8] c"Assert fail: (222 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.65 = private constant [96 x i8] c"Assert fail: (32 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.66 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (7104 == int32(arg0.strides[2]))) && (1577088 == int32(arg0.strides[1]))) && (1577088 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.67 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 2\00", align 1
@.str.68 = private constant [101 x i8] c"Assert fail: (1577088 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.69 = private constant [128 x i8] c"Assert fail: ((1 == int32(arg1.strides[1])) && (1577088 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.70 = private constant [71 x i8] c"Assert fail: (num_args == 4), fused_nn_dense_add: num_args should be 4\00", align 1
@.str.71 = private constant [146 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_dense_add: Expect arg[0] to be pointer\00", align 1
@.str.72 = private constant [146 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_dense_add: Expect arg[1] to be pointer\00", align 1
@.str.73 = private constant [146 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_dense_add: Expect arg[2] to be pointer\00", align 1
@.str.74 = private constant [146 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_dense_add: Expect arg[3] to be pointer\00", align 1
@.str.75 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 2\00", align 1
@.str.76 = private constant [101 x i8] c"Assert fail: (1577088 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.77 = private constant [128 x i8] c"Assert fail: ((1 == int32(arg0.strides[1])) && (1577088 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.78 = private constant [96 x i8] c"Assert fail: (10 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.79 = private constant [81 x i8] c"Assert fail: (1 == tvm_struct_get(arg2, 0, 4)), arg2.ndim is expected to equal 1\00", align 1
@.str.80 = private constant [96 x i8] c"Assert fail: (10 == int32(arg2.shape[0])), Argument arg2.shape[0] has an unsatisfied constraint\00", align 1
@.str.81 = private constant [87 x i8] c"Assert fail: (1 == int32(arg2.strides[0])), arg2.strides: expected to be compact array\00", align 1
@.str.82 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg3, 0, 4)), arg3.ndim is expected to equal 2\00", align 1
@.str.83 = private constant [96 x i8] c"Assert fail: (10 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.84 = private constant [123 x i8] c"Assert fail: ((1 == int32(arg3.strides[1])) && (10 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.86 = private constant [71 x i8] c"Assert fail: (num_args == 2), fused_nn_softmax_3: num_args should be 2\00", align 1
@.str.87 = private constant [146 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_softmax_3: Expect arg[0] to be pointer\00", align 1
@.str.88 = private constant [146 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_softmax_3: Expect arg[1] to be pointer\00", align 1
@.str.89 = private constant [96 x i8] c"Assert fail: (10 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.90 = private constant [123 x i8] c"Assert fail: ((1 == int32(arg0.strides[1])) && (10 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.91 = private constant [96 x i8] c"Assert fail: (10 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.92 = private constant [123 x i8] c"Assert fail: ((1 == int32(arg1.strides[1])) && (10 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.93 = private constant [71 x i8] c"Assert fail: (num_args == 2), fused_nn_softmax_2: num_args should be 2\00", align 1
@.str.94 = private constant [146 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_softmax_2: Expect arg[0] to be pointer\00", align 1
@.str.95 = private constant [146 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_softmax_2: Expect arg[1] to be pointer\00", align 1

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !9
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !23
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !26
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %54 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %54(i8* getelementptr inbounds ([169 x i8], [169 x i8]* @.str.1, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %55 = getelementptr inbounds i8, i8* %1, i64 4
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 4, !tbaa !28
  switch i32 %57, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([169 x i8], [169 x i8]* @.str.2, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %59 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %59(i8* getelementptr inbounds ([169 x i8], [169 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %60(i8* getelementptr inbounds ([169 x i8], [169 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %61 = icmp eq i32 %33, 1
  br i1 %61, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 5
  br i1 %65, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %67 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %68 = load i16, i16* %67, align 2
  %69 = icmp eq i16 %68, 1
  %70 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 32
  %73 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 2
  %76 = and i1 %72, %75
  %77 = and i1 %69, %76
  br i1 %77, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %79 = load i64, i64* %29, align 8, !tbaa !30
  %80 = trunc i64 %79 to i32
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %83 = getelementptr inbounds i64, i64* %29, i64 1
  %84 = load i64, i64* %83, align 8, !tbaa !44
  %85 = trunc i64 %84 to i32
  %86 = icmp eq i32 %85, 1
  br i1 %86, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %87(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %88 = getelementptr inbounds i64, i64* %29, i64 2
  %89 = load i64, i64* %88, align 8, !tbaa !46
  %90 = trunc i64 %89 to i32
  %91 = icmp eq i32 %90, 224
  br i1 %91, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %93 = getelementptr inbounds i64, i64* %29, i64 3
  %94 = load i64, i64* %93, align 8, !tbaa !49
  %95 = trunc i64 %94 to i32
  %96 = icmp eq i32 %95, 224
  br i1 %96, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %97(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %98 = getelementptr inbounds i64, i64* %29, i64 4
  %99 = load i64, i64* %98, align 8, !tbaa !51
  %100 = trunc i64 %99 to i32
  %101 = icmp eq i32 %100, 3
  br i1 %101, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %102 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %102(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %103 = icmp eq i64* %31, null
  br i1 %103, label %if_end, label %if_then, !prof !55

if_then:                                          ; preds = %assert_end24
  %104 = bitcast i64* %31 to <4 x i64>*
  %105 = load <4 x i64>, <4 x i64>* %104, align 8, !tbaa !56
  %106 = trunc <4 x i64> %105 to <4 x i32>
  %107 = icmp eq <4 x i32> %106, <i32 150528, i32 150528, i32 672, i32 3>
  %108 = getelementptr inbounds i64, i64* %31, i64 4
  %109 = load i64, i64* %108, align 8, !tbaa !68
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  %rdx.shuf113 = shufflevector <4 x i1> %107, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx114 = and <4 x i1> %107, %rdx.shuf113
  %rdx.shuf115 = shufflevector <4 x i1> %bin.rdx114, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx116 = and <4 x i1> %bin.rdx114, %rdx.shuf115
  %112 = extractelement <4 x i1> %bin.rdx116, i32 0
  %113 = and i1 %112, %111
  br i1 %113, label %if_end, label %assert_fail25, !prof !5

if_end:                                           ; preds = %assert_end24, %if_then
  %114 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %115 = load i64, i64* %114, align 8
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %assert_end28, label %assert_fail27, !prof !5

assert_fail25:                                    ; preds = %if_then
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_fail27:                                    ; preds = %if_end
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %if_end
  %119 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, 6
  br i1 %121, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %123 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %124 = load i16, i16* %123, align 2
  %125 = icmp eq i16 %124, 1
  %126 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %127 = load i8, i8* %126, align 1
  %128 = icmp eq i8 %127, 32
  %129 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %130 = load i8, i8* %129, align 1
  %131 = icmp eq i8 %130, 2
  %132 = and i1 %128, %131
  %133 = and i1 %125, %132
  br i1 %133, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %134 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %134(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %135 = load i64, i64* %39, align 8, !tbaa !72
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %136, 1
  br i1 %137, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %138 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %138(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %139 = getelementptr inbounds i64, i64* %39, i64 1
  %140 = load i64, i64* %139, align 8, !tbaa !86
  %141 = trunc i64 %140 to i32
  %142 = icmp eq i32 %141, 1
  br i1 %142, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %143(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %144 = getelementptr inbounds i64, i64* %39, i64 2
  %145 = load i64, i64* %144, align 8, !tbaa !88
  %146 = trunc i64 %145 to i32
  %147 = icmp eq i32 %146, 3
  br i1 %147, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %149 = getelementptr inbounds i64, i64* %39, i64 3
  %150 = load i64, i64* %149, align 8, !tbaa !91
  %151 = trunc i64 %150 to i32
  %152 = icmp eq i32 %151, 3
  br i1 %152, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %153 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %153(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.20, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %154 = getelementptr inbounds i64, i64* %39, i64 4
  %155 = load i64, i64* %154, align 8, !tbaa !93
  %156 = trunc i64 %155 to i32
  %157 = icmp eq i32 %156, 3
  br i1 %157, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %158 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %158(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %159 = getelementptr inbounds i64, i64* %39, i64 5
  %160 = load i64, i64* %159, align 8, !tbaa !97
  %161 = trunc i64 %160 to i32
  %162 = icmp eq i32 %161, 32
  br i1 %162, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %163 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %163(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %164 = icmp eq i64* %41, null
  br i1 %164, label %if_end46, label %if_then45, !prof !55

if_then45:                                        ; preds = %assert_end44
  %165 = bitcast i64* %41 to <4 x i64>*
  %166 = load <4 x i64>, <4 x i64>* %165, align 8, !tbaa !99
  %167 = trunc <4 x i64> %166 to <4 x i32>
  %168 = icmp eq <4 x i32> %167, <i32 864, i32 864, i32 288, i32 96>
  %169 = getelementptr inbounds i64, i64* %41, i64 4
  %170 = load i64, i64* %169, align 8, !tbaa !111
  %171 = trunc i64 %170 to i32
  %172 = icmp eq i32 %171, 32
  %173 = getelementptr inbounds i64, i64* %41, i64 5
  %174 = load i64, i64* %173, align 8, !tbaa !115
  %175 = trunc i64 %174 to i32
  %176 = icmp eq i32 %175, 1
  %rdx.shuf109 = shufflevector <4 x i1> %168, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx110 = and <4 x i1> %168, %rdx.shuf109
  %rdx.shuf111 = shufflevector <4 x i1> %bin.rdx110, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx112 = and <4 x i1> %bin.rdx110, %rdx.shuf111
  %177 = extractelement <4 x i1> %bin.rdx112, i32 0
  %178 = and i1 %177, %172
  %179 = and i1 %178, %176
  br i1 %179, label %if_end46, label %assert_fail47, !prof !5

if_end46:                                         ; preds = %assert_end44, %if_then45
  %180 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %181 = load i64, i64* %180, align 8
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %assert_end50, label %assert_fail49, !prof !5

assert_fail47:                                    ; preds = %if_then45
  %183 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %183(i8* getelementptr inbounds ([270 x i8], [270 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_fail49:                                    ; preds = %if_end46
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.24, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %if_end46
  %185 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %186 = load i32, i32* %185, align 4
  %187 = icmp eq i32 %186, 1
  br i1 %187, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %188 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %188(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %189 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %190 = load i32, i32* %189, align 4
  %191 = icmp eq i32 %35, %190
  br i1 %191, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %192 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %192(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %193 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %194 = load i32, i32* %193, align 4
  %195 = icmp eq i32 %194, 5
  br i1 %195, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %197 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %198 = load i16, i16* %197, align 2
  %199 = icmp eq i16 %198, 1
  %200 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %201 = load i8, i8* %200, align 1
  %202 = icmp eq i8 %201, 32
  %203 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %204 = load i8, i8* %203, align 1
  %205 = icmp eq i8 %204, 2
  %206 = and i1 %202, %205
  %207 = and i1 %199, %206
  br i1 %207, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %208 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %208(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.28, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %209 = load i64, i64* %45, align 8, !tbaa !117
  %210 = trunc i64 %209 to i32
  %211 = icmp eq i32 %210, 1
  br i1 %211, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %212 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %212(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.29, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %213 = getelementptr inbounds i64, i64* %45, i64 1
  %214 = load i64, i64* %213, align 8, !tbaa !131
  %215 = trunc i64 %214 to i32
  %216 = icmp eq i32 %215, 1
  br i1 %216, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %217 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %217(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.30, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %218 = getelementptr inbounds i64, i64* %45, i64 2
  %219 = load i64, i64* %218, align 8, !tbaa !133
  %220 = trunc i64 %219 to i32
  %221 = icmp eq i32 %220, 1
  br i1 %221, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.31, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %223 = getelementptr inbounds i64, i64* %45, i64 3
  %224 = load i64, i64* %223, align 8, !tbaa !136
  %225 = trunc i64 %224 to i32
  %226 = icmp eq i32 %225, 1
  br i1 %226, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %227(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %228 = getelementptr inbounds i64, i64* %45, i64 4
  %229 = load i64, i64* %228, align 8, !tbaa !138
  %230 = trunc i64 %229 to i32
  %231 = icmp eq i32 %230, 32
  br i1 %231, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %232 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %232(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.33, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %233 = icmp eq i64* %47, null
  br i1 %233, label %if_end70, label %if_then69, !prof !55

if_then69:                                        ; preds = %assert_end68
  %234 = bitcast i64* %47 to <4 x i64>*
  %235 = load <4 x i64>, <4 x i64>* %234, align 8, !tbaa !142
  %236 = trunc <4 x i64> %235 to <4 x i32>
  %237 = icmp eq <4 x i32> %236, <i32 32, i32 32, i32 32, i32 32>
  %238 = getelementptr inbounds i64, i64* %47, i64 4
  %239 = load i64, i64* %238, align 8, !tbaa !154
  %240 = trunc i64 %239 to i32
  %241 = icmp eq i32 %240, 1
  %rdx.shuf105 = shufflevector <4 x i1> %237, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx106 = and <4 x i1> %237, %rdx.shuf105
  %rdx.shuf107 = shufflevector <4 x i1> %bin.rdx106, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx108 = and <4 x i1> %bin.rdx106, %rdx.shuf107
  %242 = extractelement <4 x i1> %bin.rdx108, i32 0
  %243 = and i1 %242, %241
  br i1 %243, label %if_end70, label %assert_fail71, !prof !5

if_end70:                                         ; preds = %assert_end68, %if_then69
  %244 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %245 = load i64, i64* %244, align 8
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %assert_end74, label %assert_fail73, !prof !5

assert_fail71:                                    ; preds = %if_then69
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %247(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_fail73:                                    ; preds = %if_end70
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %if_end70
  %249 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %250 = load i32, i32* %249, align 4
  %251 = icmp eq i32 %250, 1
  br i1 %251, label %assert_end76, label %assert_fail75, !prof !5

assert_fail75:                                    ; preds = %assert_end74
  %252 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %252(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %assert_end74
  %253 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %254 = load i32, i32* %253, align 4
  %255 = icmp eq i32 %35, %254
  br i1 %255, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %256(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.37, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %257 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %258 = load i32, i32* %257, align 4
  %259 = icmp eq i32 %258, 5
  br i1 %259, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %261 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %262 = load i16, i16* %261, align 2
  %263 = icmp eq i16 %262, 1
  %264 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %265 = load i8, i8* %264, align 1
  %266 = icmp eq i8 %265, 32
  %267 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %268 = load i8, i8* %267, align 1
  %269 = icmp eq i8 %268, 2
  %270 = and i1 %266, %269
  %271 = and i1 %263, %270
  br i1 %271, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %272 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %272(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %273 = load i64, i64* %51, align 8, !tbaa !158
  %274 = trunc i64 %273 to i32
  %275 = icmp eq i32 %274, 1
  br i1 %275, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %276 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %276(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %277 = getelementptr inbounds i64, i64* %51, i64 1
  %278 = load i64, i64* %277, align 8, !tbaa !172
  %279 = trunc i64 %278 to i32
  %280 = icmp eq i32 %279, 1
  br i1 %280, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %281 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %281(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.41, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %282 = getelementptr inbounds i64, i64* %51, i64 2
  %283 = load i64, i64* %282, align 8, !tbaa !174
  %284 = trunc i64 %283 to i32
  %285 = icmp eq i32 %284, 222
  br i1 %285, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %287 = getelementptr inbounds i64, i64* %51, i64 3
  %288 = load i64, i64* %287, align 8, !tbaa !177
  %289 = trunc i64 %288 to i32
  %290 = icmp eq i32 %289, 222
  br i1 %290, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %292 = getelementptr inbounds i64, i64* %51, i64 4
  %293 = load i64, i64* %292, align 8, !tbaa !179
  %294 = trunc i64 %293 to i32
  %295 = icmp eq i32 %294, 32
  br i1 %295, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %296 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %296(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %297 = icmp eq i64* %53, null
  br i1 %297, label %if_end94, label %if_then93, !prof !55

if_then93:                                        ; preds = %assert_end92
  %298 = bitcast i64* %53 to <4 x i64>*
  %299 = load <4 x i64>, <4 x i64>* %298, align 8, !tbaa !183
  %300 = trunc <4 x i64> %299 to <4 x i32>
  %301 = icmp eq <4 x i32> %300, <i32 1577088, i32 1577088, i32 7104, i32 32>
  %302 = getelementptr inbounds i64, i64* %53, i64 4
  %303 = load i64, i64* %302, align 8, !tbaa !195
  %304 = trunc i64 %303 to i32
  %305 = icmp eq i32 %304, 1
  %rdx.shuf = shufflevector <4 x i1> %301, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %301, %rdx.shuf
  %rdx.shuf103 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx104 = and <4 x i1> %bin.rdx, %rdx.shuf103
  %306 = extractelement <4 x i1> %bin.rdx104, i32 0
  %307 = and i1 %306, %305
  br i1 %307, label %if_end94, label %assert_fail95, !prof !5

if_end94:                                         ; preds = %assert_end92, %if_then93
  %308 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %309 = load i64, i64* %308, align 8
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %assert_end98, label %assert_fail97, !prof !5

assert_fail95:                                    ; preds = %if_then93
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.45, i64 0, i64 0))
  ret i32 -1

assert_fail97:                                    ; preds = %if_end94
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %if_end94
  %313 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %314 = load i32, i32* %313, align 4
  %315 = icmp eq i32 %314, 1
  br i1 %315, label %assert_end100, label %assert_fail99, !prof !5

assert_fail99:                                    ; preds = %assert_end98
  %316 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %316(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %assert_end98
  %317 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %318 = load i32, i32* %317, align 4
  %319 = icmp eq i32 %35, %318
  br i1 %319, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %321 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_compute_(i8* %27, i8* %37, i8* %49, i8* %43, i32 %35)
  ret i32 %321
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_nn_relu_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %5 = alloca %4, align 8
  %6 = getelementptr inbounds %4, %4* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %4, %4* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %4, %4* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %4, %4* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %4, %4* %5, i64 0, i32 4
  store i32 %4, i32* %10, align 8
  %11 = bitcast %4* %5 to i8*
  %12 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %13 = call i32 %12(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda, i8* nonnull %11, i32 0)
  ret i32 %13
}

define private i32 @__tvm_parallel_lambda(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to <32 x float>**
  %13 = load <32 x float>*, <32 x float>** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 221
  %20 = sdiv i32 %19, %18
  %21 = add nsw i32 %0, 1
  %22 = mul nsw i32 %20, %21
  %23 = icmp slt i32 %22, 222
  %24 = select i1 %23, i32 %22, i32 222
  %25 = mul nsw i32 %20, %0
  %26 = icmp slt i32 %25, 222
  %27 = select i1 %26, i32 %25, i32 222
  %28 = icmp slt i32 %27, %24
  br i1 %28, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %29 = sext i32 %27 to i64
  %30 = sext i32 %24 to i64
  %31 = bitcast float* %7 to <32 x float>*
  %32 = getelementptr inbounds float, float* %7, i64 96
  %33 = bitcast float* %32 to <32 x float>*
  %34 = getelementptr inbounds float, float* %7, i64 192
  %35 = bitcast float* %34 to <32 x float>*
  %36 = getelementptr inbounds float, float* %7, i64 32
  %37 = bitcast float* %36 to <32 x float>*
  %38 = getelementptr inbounds float, float* %7, i64 128
  %39 = bitcast float* %38 to <32 x float>*
  %40 = getelementptr inbounds float, float* %7, i64 224
  %41 = bitcast float* %40 to <32 x float>*
  %42 = getelementptr inbounds float, float* %7, i64 64
  %43 = bitcast float* %42 to <32 x float>*
  %44 = getelementptr inbounds float, float* %7, i64 160
  %45 = bitcast float* %44 to <32 x float>*
  %46 = getelementptr inbounds float, float* %7, i64 256
  %47 = bitcast float* %46 to <32 x float>*
  %48 = getelementptr inbounds float, float* %7, i64 288
  %49 = bitcast float* %48 to <32 x float>*
  %50 = getelementptr inbounds float, float* %7, i64 384
  %51 = bitcast float* %50 to <32 x float>*
  %52 = getelementptr inbounds float, float* %7, i64 480
  %53 = bitcast float* %52 to <32 x float>*
  %54 = getelementptr inbounds float, float* %7, i64 320
  %55 = bitcast float* %54 to <32 x float>*
  %56 = getelementptr inbounds float, float* %7, i64 416
  %57 = bitcast float* %56 to <32 x float>*
  %58 = getelementptr inbounds float, float* %7, i64 512
  %59 = bitcast float* %58 to <32 x float>*
  %60 = getelementptr inbounds float, float* %7, i64 352
  %61 = bitcast float* %60 to <32 x float>*
  %62 = getelementptr inbounds float, float* %7, i64 448
  %63 = bitcast float* %62 to <32 x float>*
  %64 = getelementptr inbounds float, float* %7, i64 544
  %65 = bitcast float* %64 to <32 x float>*
  %66 = getelementptr inbounds float, float* %7, i64 576
  %67 = bitcast float* %66 to <32 x float>*
  %68 = getelementptr inbounds float, float* %7, i64 672
  %69 = bitcast float* %68 to <32 x float>*
  %70 = getelementptr inbounds float, float* %7, i64 768
  %71 = bitcast float* %70 to <32 x float>*
  %72 = getelementptr inbounds float, float* %7, i64 608
  %73 = bitcast float* %72 to <32 x float>*
  %74 = getelementptr inbounds float, float* %7, i64 704
  %75 = bitcast float* %74 to <32 x float>*
  %76 = getelementptr inbounds float, float* %7, i64 800
  %77 = bitcast float* %76 to <32 x float>*
  %78 = getelementptr inbounds float, float* %7, i64 640
  %79 = bitcast float* %78 to <32 x float>*
  %80 = getelementptr inbounds float, float* %7, i64 736
  %81 = bitcast float* %80 to <32 x float>*
  %82 = getelementptr inbounds float, float* %7, i64 832
  %83 = bitcast float* %82 to <32 x float>*
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_end12
  %indvars.iv27 = phi i64 [ %29, %for_body.preheader ], [ %99, %for_end12 ]
  %84 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %85 = tail call i8* %84(i32 1, i32 %16, i64 28416, i32 2, i32 32)
  %86 = bitcast i8* %85 to float*
  %87 = mul i64 %indvars.iv27, 672
  %88 = add i64 %87, 1344
  %sext = mul i64 %indvars.iv27, 2886218022912
  %89 = ashr exact i64 %sext, 32
  %90 = load <32 x float>, <32 x float>* %31, align 64, !tbaa !199
  %91 = load <32 x float>, <32 x float>* %33, align 64, !tbaa !199
  %92 = load <32 x float>, <32 x float>* %35, align 64, !tbaa !199
  %93 = load <32 x float>, <32 x float>* %37, align 64, !tbaa !199
  %94 = load <32 x float>, <32 x float>* %39, align 64, !tbaa !199
  %95 = load <32 x float>, <32 x float>* %41, align 64, !tbaa !199
  %96 = load <32 x float>, <32 x float>* %43, align 64, !tbaa !199
  %97 = load <32 x float>, <32 x float>* %45, align 64, !tbaa !199
  %98 = load <32 x float>, <32 x float>* %47, align 64, !tbaa !199
  %99 = add nsw i64 %indvars.iv27, 1
  %100 = mul i64 %99, 672
  %101 = load <32 x float>, <32 x float>* %49, align 64, !tbaa !199
  %102 = load <32 x float>, <32 x float>* %51, align 64, !tbaa !199
  %103 = load <32 x float>, <32 x float>* %53, align 64, !tbaa !199
  %104 = load <32 x float>, <32 x float>* %55, align 64, !tbaa !199
  %105 = load <32 x float>, <32 x float>* %57, align 64, !tbaa !199
  %106 = load <32 x float>, <32 x float>* %59, align 64, !tbaa !199
  %107 = load <32 x float>, <32 x float>* %61, align 64, !tbaa !199
  %108 = load <32 x float>, <32 x float>* %63, align 64, !tbaa !199
  %109 = load <32 x float>, <32 x float>* %65, align 64, !tbaa !199
  %110 = load <32 x float>, <32 x float>* %67, align 64, !tbaa !199
  %111 = load <32 x float>, <32 x float>* %69, align 64, !tbaa !199
  %112 = load <32 x float>, <32 x float>* %71, align 64, !tbaa !199
  %113 = load <32 x float>, <32 x float>* %73, align 64, !tbaa !199
  %114 = load <32 x float>, <32 x float>* %75, align 64, !tbaa !199
  %115 = load <32 x float>, <32 x float>* %77, align 64, !tbaa !199
  %116 = load <32 x float>, <32 x float>* %79, align 64, !tbaa !199
  %117 = load <32 x float>, <32 x float>* %81, align 64, !tbaa !199
  %118 = load <32 x float>, <32 x float>* %83, align 64, !tbaa !199
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end12, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_begin4.preheader
  %119 = mul nsw i64 %indvars.iv27, 7104
  %120 = load <32 x float>, <32 x float>* %13, align 64, !tbaa !202
  br label %for_body11

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_begin4.preheader ]
  %121 = mul nuw nsw i64 %indvars.iv, 3
  %122 = add nsw i64 %89, %121
  %123 = getelementptr inbounds float, float* %4, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !211
  %125 = insertelement <32 x float> undef, float %124, i32 0
  %126 = shufflevector <32 x float> %125, <32 x float> undef, <32 x i32> zeroinitializer
  %127 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %126, <32 x float> %90, <32 x float> zeroinitializer)
  %128 = add nsw i64 %122, 3
  %129 = getelementptr inbounds float, float* %4, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !211
  %131 = insertelement <32 x float> undef, float %130, i32 0
  %132 = shufflevector <32 x float> %131, <32 x float> undef, <32 x i32> zeroinitializer
  %133 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %132, <32 x float> %91, <32 x float> %127)
  %134 = add nsw i64 %122, 6
  %135 = getelementptr inbounds float, float* %4, i64 %134
  %136 = load float, float* %135, align 4, !tbaa !211
  %137 = insertelement <32 x float> undef, float %136, i32 0
  %138 = shufflevector <32 x float> %137, <32 x float> undef, <32 x i32> zeroinitializer
  %139 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %138, <32 x float> %92, <32 x float> %133)
  %140 = add nsw i64 %122, 1
  %141 = getelementptr inbounds float, float* %4, i64 %140
  %142 = load float, float* %141, align 4, !tbaa !211
  %143 = insertelement <32 x float> undef, float %142, i32 0
  %144 = shufflevector <32 x float> %143, <32 x float> undef, <32 x i32> zeroinitializer
  %145 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %144, <32 x float> %93, <32 x float> %139)
  %146 = add nsw i64 %122, 4
  %147 = getelementptr inbounds float, float* %4, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !211
  %149 = insertelement <32 x float> undef, float %148, i32 0
  %150 = shufflevector <32 x float> %149, <32 x float> undef, <32 x i32> zeroinitializer
  %151 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %150, <32 x float> %94, <32 x float> %145)
  %152 = add nsw i64 %122, 7
  %153 = getelementptr inbounds float, float* %4, i64 %152
  %154 = load float, float* %153, align 4, !tbaa !211
  %155 = insertelement <32 x float> undef, float %154, i32 0
  %156 = shufflevector <32 x float> %155, <32 x float> undef, <32 x i32> zeroinitializer
  %157 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %156, <32 x float> %95, <32 x float> %151)
  %158 = add nsw i64 %122, 2
  %159 = getelementptr inbounds float, float* %4, i64 %158
  %160 = load float, float* %159, align 4, !tbaa !211
  %161 = insertelement <32 x float> undef, float %160, i32 0
  %162 = shufflevector <32 x float> %161, <32 x float> undef, <32 x i32> zeroinitializer
  %163 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %162, <32 x float> %96, <32 x float> %157)
  %164 = add nsw i64 %122, 5
  %165 = getelementptr inbounds float, float* %4, i64 %164
  %166 = load float, float* %165, align 4, !tbaa !211
  %167 = insertelement <32 x float> undef, float %166, i32 0
  %168 = shufflevector <32 x float> %167, <32 x float> undef, <32 x i32> zeroinitializer
  %169 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %168, <32 x float> %97, <32 x float> %163)
  %170 = add nsw i64 %122, 8
  %171 = getelementptr inbounds float, float* %4, i64 %170
  %172 = load float, float* %171, align 4, !tbaa !211
  %173 = insertelement <32 x float> undef, float %172, i32 0
  %174 = shufflevector <32 x float> %173, <32 x float> undef, <32 x i32> zeroinitializer
  %175 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %174, <32 x float> %98, <32 x float> %169)
  %176 = add i64 %100, %121
  %sext29 = shl i64 %176, 32
  %177 = ashr exact i64 %sext29, 32
  %178 = getelementptr inbounds float, float* %4, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !211
  %180 = insertelement <32 x float> undef, float %179, i32 0
  %181 = shufflevector <32 x float> %180, <32 x float> undef, <32 x i32> zeroinitializer
  %182 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %181, <32 x float> %101, <32 x float> %175)
  %183 = add nsw i64 %177, 3
  %184 = getelementptr inbounds float, float* %4, i64 %183
  %185 = load float, float* %184, align 4, !tbaa !211
  %186 = insertelement <32 x float> undef, float %185, i32 0
  %187 = shufflevector <32 x float> %186, <32 x float> undef, <32 x i32> zeroinitializer
  %188 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %187, <32 x float> %102, <32 x float> %182)
  %189 = add nsw i64 %177, 6
  %190 = getelementptr inbounds float, float* %4, i64 %189
  %191 = load float, float* %190, align 4, !tbaa !211
  %192 = insertelement <32 x float> undef, float %191, i32 0
  %193 = shufflevector <32 x float> %192, <32 x float> undef, <32 x i32> zeroinitializer
  %194 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %193, <32 x float> %103, <32 x float> %188)
  %195 = add nsw i64 %177, 1
  %196 = getelementptr inbounds float, float* %4, i64 %195
  %197 = load float, float* %196, align 4, !tbaa !211
  %198 = insertelement <32 x float> undef, float %197, i32 0
  %199 = shufflevector <32 x float> %198, <32 x float> undef, <32 x i32> zeroinitializer
  %200 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %199, <32 x float> %104, <32 x float> %194)
  %201 = add nsw i64 %177, 4
  %202 = getelementptr inbounds float, float* %4, i64 %201
  %203 = load float, float* %202, align 4, !tbaa !211
  %204 = insertelement <32 x float> undef, float %203, i32 0
  %205 = shufflevector <32 x float> %204, <32 x float> undef, <32 x i32> zeroinitializer
  %206 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %205, <32 x float> %105, <32 x float> %200)
  %207 = add nsw i64 %177, 7
  %208 = getelementptr inbounds float, float* %4, i64 %207
  %209 = load float, float* %208, align 4, !tbaa !211
  %210 = insertelement <32 x float> undef, float %209, i32 0
  %211 = shufflevector <32 x float> %210, <32 x float> undef, <32 x i32> zeroinitializer
  %212 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %211, <32 x float> %106, <32 x float> %206)
  %213 = add nsw i64 %177, 2
  %214 = getelementptr inbounds float, float* %4, i64 %213
  %215 = load float, float* %214, align 4, !tbaa !211
  %216 = insertelement <32 x float> undef, float %215, i32 0
  %217 = shufflevector <32 x float> %216, <32 x float> undef, <32 x i32> zeroinitializer
  %218 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %217, <32 x float> %107, <32 x float> %212)
  %219 = add nsw i64 %177, 5
  %220 = getelementptr inbounds float, float* %4, i64 %219
  %221 = load float, float* %220, align 4, !tbaa !211
  %222 = insertelement <32 x float> undef, float %221, i32 0
  %223 = shufflevector <32 x float> %222, <32 x float> undef, <32 x i32> zeroinitializer
  %224 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %223, <32 x float> %108, <32 x float> %218)
  %225 = add nsw i64 %177, 8
  %226 = getelementptr inbounds float, float* %4, i64 %225
  %227 = load float, float* %226, align 4, !tbaa !211
  %228 = insertelement <32 x float> undef, float %227, i32 0
  %229 = shufflevector <32 x float> %228, <32 x float> undef, <32 x i32> zeroinitializer
  %230 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %229, <32 x float> %109, <32 x float> %224)
  %231 = add i64 %88, %121
  %sext30 = shl i64 %231, 32
  %232 = ashr exact i64 %sext30, 32
  %233 = getelementptr inbounds float, float* %4, i64 %232
  %234 = load float, float* %233, align 4, !tbaa !211
  %235 = insertelement <32 x float> undef, float %234, i32 0
  %236 = shufflevector <32 x float> %235, <32 x float> undef, <32 x i32> zeroinitializer
  %237 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %110, <32 x float> %230)
  %238 = add nsw i64 %232, 3
  %239 = getelementptr inbounds float, float* %4, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !211
  %241 = insertelement <32 x float> undef, float %240, i32 0
  %242 = shufflevector <32 x float> %241, <32 x float> undef, <32 x i32> zeroinitializer
  %243 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %111, <32 x float> %237)
  %244 = add nsw i64 %232, 6
  %245 = getelementptr inbounds float, float* %4, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !211
  %247 = insertelement <32 x float> undef, float %246, i32 0
  %248 = shufflevector <32 x float> %247, <32 x float> undef, <32 x i32> zeroinitializer
  %249 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %112, <32 x float> %243)
  %250 = add nsw i64 %232, 1
  %251 = getelementptr inbounds float, float* %4, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !211
  %253 = insertelement <32 x float> undef, float %252, i32 0
  %254 = shufflevector <32 x float> %253, <32 x float> undef, <32 x i32> zeroinitializer
  %255 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %113, <32 x float> %249)
  %256 = add nsw i64 %232, 4
  %257 = getelementptr inbounds float, float* %4, i64 %256
  %258 = load float, float* %257, align 4, !tbaa !211
  %259 = insertelement <32 x float> undef, float %258, i32 0
  %260 = shufflevector <32 x float> %259, <32 x float> undef, <32 x i32> zeroinitializer
  %261 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %260, <32 x float> %114, <32 x float> %255)
  %262 = add nsw i64 %232, 7
  %263 = getelementptr inbounds float, float* %4, i64 %262
  %264 = load float, float* %263, align 4, !tbaa !211
  %265 = insertelement <32 x float> undef, float %264, i32 0
  %266 = shufflevector <32 x float> %265, <32 x float> undef, <32 x i32> zeroinitializer
  %267 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %266, <32 x float> %115, <32 x float> %261)
  %268 = add nsw i64 %232, 2
  %269 = getelementptr inbounds float, float* %4, i64 %268
  %270 = load float, float* %269, align 4, !tbaa !211
  %271 = insertelement <32 x float> undef, float %270, i32 0
  %272 = shufflevector <32 x float> %271, <32 x float> undef, <32 x i32> zeroinitializer
  %273 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %272, <32 x float> %116, <32 x float> %267)
  %274 = add nsw i64 %232, 5
  %275 = getelementptr inbounds float, float* %4, i64 %274
  %276 = load float, float* %275, align 4, !tbaa !211
  %277 = insertelement <32 x float> undef, float %276, i32 0
  %278 = shufflevector <32 x float> %277, <32 x float> undef, <32 x i32> zeroinitializer
  %279 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %278, <32 x float> %117, <32 x float> %273)
  %280 = add nsw i64 %232, 8
  %281 = getelementptr inbounds float, float* %4, i64 %280
  %282 = load float, float* %281, align 4, !tbaa !211
  %283 = insertelement <32 x float> undef, float %282, i32 0
  %284 = shufflevector <32 x float> %283, <32 x float> undef, <32 x i32> zeroinitializer
  %285 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %284, <32 x float> %118, <32 x float> %279)
  %286 = shl nsw i64 %indvars.iv, 5
  %287 = getelementptr inbounds float, float* %86, i64 %286
  %288 = bitcast float* %287 to <32 x float>*
  store <32 x float> %285, <32 x float>* %288, align 64, !tbaa !214
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 222
  br i1 %exitcond, label %for_begin10.preheader, label %for_begin4.preheader, !prof !55

for_body11:                                       ; preds = %for_body11, %for_begin10.preheader
  %indvars.iv24 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next25, %for_body11 ]
  %289 = shl nsw i64 %indvars.iv24, 5
  %290 = add nsw i64 %289, %119
  %291 = getelementptr inbounds float, float* %86, i64 %289
  %292 = bitcast float* %291 to <32 x float>*
  %293 = load <32 x float>, <32 x float>* %292, align 64, !tbaa !214
  %294 = fadd <32 x float> %120, %293
  %295 = fcmp ogt <32 x float> %294, zeroinitializer
  %296 = select <32 x i1> %295, <32 x float> %294, <32 x float> zeroinitializer
  %297 = getelementptr inbounds float, float* %10, i64 %290
  %298 = bitcast float* %297 to <32 x float>*
  store <32 x float> %296, <32 x float>* %298, align 64, !tbaa !217
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 1
  %exitcond26 = icmp eq i64 %indvars.iv.next25, 222
  br i1 %exitcond26, label %for_end12, label %for_body11, !prof !55

for_end12:                                        ; preds = %for_body11
  %299 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %300 = tail call i32 %299(i32 1, i32 %16, i8* nonnull %85)
  %301 = icmp slt i64 %99, %30
  br i1 %301, label %for_body, label %for_end, !prof !5
}

; Function Attrs: nounwind readnone speculatable
declare <32 x float> @llvm.fmuladd.v32f32(<32 x float>, <32 x float>, <32 x float>) #1

define dllexport i32 @fused_layout_transform_2(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !220
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !234
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 4
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.52, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 1
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 2
  %50 = and i1 %46, %49
  %51 = and i1 %43, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !236
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !250
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 3
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !252
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 224
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !255
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 224
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = icmp eq i64* %19, null
  br i1 %72, label %if_end, label %if_then, !prof !55

if_then:                                          ; preds = %assert_end18
  %73 = bitcast i64* %19 to <4 x i64>*
  %74 = load <4 x i64>, <4 x i64>* %73, align 8, !tbaa !257
  %75 = trunc <4 x i64> %74 to <4 x i32>
  %76 = icmp eq <4 x i32> %75, <i32 150528, i32 50176, i32 224, i32 1>
  %rdx.shuf49 = shufflevector <4 x i1> %76, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %76, %rdx.shuf49
  %rdx.shuf51 = shufflevector <4 x i1> %bin.rdx50, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %bin.rdx50, %rdx.shuf51
  %77 = extractelement <4 x i1> %bin.rdx52, i32 0
  br i1 %77, label %if_end, label %assert_fail19, !prof !5

if_end:                                           ; preds = %assert_end18, %if_then
  %78 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %assert_end22, label %assert_fail21, !prof !5

assert_fail19:                                    ; preds = %if_then
  %81 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %81(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_fail21:                                    ; preds = %if_end
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %if_end
  %83 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 5
  br i1 %85, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %86(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %87 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 32
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 2
  %96 = and i1 %92, %95
  %97 = and i1 %89, %96
  br i1 %97, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %99 = load i64, i64* %27, align 8, !tbaa !269
  %100 = trunc i64 %99 to i32
  %101 = icmp eq i32 %100, 1
  br i1 %101, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %102 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %102(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %103 = getelementptr inbounds i64, i64* %27, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !283
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %107 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %107(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %108 = getelementptr inbounds i64, i64* %27, i64 2
  %109 = load i64, i64* %108, align 8, !tbaa !285
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 224
  br i1 %111, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %113 = getelementptr inbounds i64, i64* %27, i64 3
  %114 = load i64, i64* %113, align 8, !tbaa !288
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 224
  br i1 %116, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %118 = getelementptr inbounds i64, i64* %27, i64 4
  %119 = load i64, i64* %118, align 8, !tbaa !290
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 3
  br i1 %121, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %123 = icmp eq i64* %29, null
  br i1 %123, label %if_end38, label %if_then37, !prof !55

if_then37:                                        ; preds = %assert_end36
  %124 = bitcast i64* %29 to <4 x i64>*
  %125 = load <4 x i64>, <4 x i64>* %124, align 8, !tbaa !294
  %126 = trunc <4 x i64> %125 to <4 x i32>
  %127 = icmp eq <4 x i32> %126, <i32 150528, i32 150528, i32 672, i32 3>
  %128 = getelementptr inbounds i64, i64* %29, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !306
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 1
  %rdx.shuf = shufflevector <4 x i1> %127, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %127, %rdx.shuf
  %rdx.shuf47 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx48 = and <4 x i1> %bin.rdx, %rdx.shuf47
  %132 = extractelement <4 x i1> %bin.rdx48, i32 0
  %133 = and i1 %132, %131
  br i1 %133, label %if_end38, label %assert_fail39, !prof !5

if_end38:                                         ; preds = %assert_end36, %if_then37
  %134 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %135 = load i64, i64* %134, align 8
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %assert_end42, label %assert_fail41, !prof !5

assert_fail39:                                    ; preds = %if_then37
  %137 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %137(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_fail41:                                    ; preds = %if_end38
  %138 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %138(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.24, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %if_end38
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %140, 1
  br i1 %141, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %142 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %142(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %23, %144
  br i1 %145, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %146 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %146(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %147 = tail call fastcc i32 @fused_layout_transform_2_compute_(i8* %25, i8* %15)
  ret i32 %147
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_2_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %5, align 8
  %3 = getelementptr inbounds %5, %5* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %5, %5* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = bitcast %5* %2 to i8*
  %6 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %7 = call i32 %6(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.59, i8* nonnull %5, i32 0)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind
define private i32 @__tvm_parallel_lambda.59(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 223
  %11 = sdiv i32 %10, %9
  %12 = add nsw i32 %0, 1
  %13 = mul nsw i32 %11, %12
  %14 = icmp slt i32 %13, 224
  %15 = select i1 %14, i32 %13, i32 224
  %16 = mul nsw i32 %11, %0
  %17 = icmp slt i32 %16, 224
  %18 = select i1 %17, i32 %16, i32 224
  %19 = icmp slt i32 %18, %15
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = sext i32 %18 to i64
  %21 = sext i32 %15 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %20, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %22 = mul nsw i64 %indvars.iv4, 672
  %23 = mul nsw i64 %indvars.iv4, 224
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %24 = mul nuw nsw i64 %indvars.iv, 3
  %25 = add nsw i64 %24, %22
  %26 = add nsw i64 %indvars.iv, %23
  %27 = add nsw i64 %26, 50176
  %28 = add nsw i64 %26, 100352
  %29 = getelementptr inbounds float, float* %7, i64 %26
  %30 = load float, float* %29, align 4, !tbaa !310
  %31 = insertelement <3 x float> undef, float %30, i32 0
  %32 = getelementptr inbounds float, float* %7, i64 %27
  %33 = load float, float* %32, align 4, !tbaa !310
  %34 = insertelement <3 x float> %31, float %33, i32 1
  %35 = getelementptr inbounds float, float* %7, i64 %28
  %36 = load float, float* %35, align 4, !tbaa !310
  %37 = insertelement <3 x float> %34, float %36, i32 2
  %38 = getelementptr inbounds float, float* %4, i64 %25
  %39 = bitcast float* %38 to <3 x float>*
  store <3 x float> %37, <3 x float>* %39, align 4, !tbaa !313
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 224
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !55

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %40 = icmp slt i64 %indvars.iv.next5, %21
  br i1 %40, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_reshape_multiply(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.60, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !316
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !330
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 1
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 2
  %50 = and i1 %46, %49
  %51 = and i1 %43, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !332
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !346
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !348
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 222
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !351
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 222
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !353
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !55

if_then:                                          ; preds = %assert_end20
  %78 = bitcast i64* %19 to <4 x i64>*
  %79 = load <4 x i64>, <4 x i64>* %78, align 8, !tbaa !357
  %80 = trunc <4 x i64> %79 to <4 x i32>
  %81 = icmp eq <4 x i32> %80, <i32 1577088, i32 1577088, i32 7104, i32 32>
  %82 = getelementptr inbounds i64, i64* %19, i64 4
  %83 = load i64, i64* %82, align 8, !tbaa !369
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 1
  %rdx.shuf = shufflevector <4 x i1> %81, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %81, %rdx.shuf
  %rdx.shuf43 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx44 = and <4 x i1> %bin.rdx, %rdx.shuf43
  %86 = extractelement <4 x i1> %bin.rdx44, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 2
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %98 = load i16, i16* %97, align 2
  %99 = icmp eq i16 %98, 1
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %104, 2
  %106 = and i1 %102, %105
  %107 = and i1 %99, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !373
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !387
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1577088
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = icmp eq i64* %29, null
  br i1 %118, label %if_end34, label %if_then33, !prof !55

if_then33:                                        ; preds = %assert_end32
  %119 = load i64, i64* %29, align 8, !tbaa !389
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 1577088
  %122 = getelementptr inbounds i64, i64* %29, i64 1
  %123 = load i64, i64* %122, align 8, !tbaa !403
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 1
  %126 = and i1 %121, %125
  br i1 %126, label %if_end34, label %assert_fail35, !prof !5

if_end34:                                         ; preds = %assert_end32, %if_then33
  %127 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end38, label %assert_fail37, !prof !5

assert_fail35:                                    ; preds = %if_then33
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_fail37:                                    ; preds = %if_end34
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.24, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %if_end34
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 1
  br i1 %134, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %23, %137
  br i1 %138, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  tail call fastcc void @fused_layout_transform_reshape_multiply_compute_(i8* %25, i8* %15)
  ret i32 0
}

; Function Attrs: nofree noinline norecurse nounwind
define private fastcc void @fused_layout_transform_reshape_multiply_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #3 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_body ]
  %4 = shl nsw i64 %indvars.iv, 4
  %5 = trunc i64 %4 to i32
  %6 = insertelement <16 x i32> undef, i32 %5, i32 0
  %7 = trunc i64 %4 to i32
  %8 = or i32 %7, 1
  %9 = insertelement <16 x i32> %6, i32 %8, i32 1
  %10 = trunc i64 %4 to i32
  %11 = or i32 %10, 2
  %12 = insertelement <16 x i32> %9, i32 %11, i32 2
  %13 = trunc i64 %4 to i32
  %14 = or i32 %13, 3
  %15 = insertelement <16 x i32> %12, i32 %14, i32 3
  %16 = trunc i64 %4 to i32
  %17 = or i32 %16, 4
  %18 = insertelement <16 x i32> %15, i32 %17, i32 4
  %19 = trunc i64 %4 to i32
  %20 = or i32 %19, 5
  %21 = insertelement <16 x i32> %18, i32 %20, i32 5
  %22 = trunc i64 %4 to i32
  %23 = or i32 %22, 6
  %24 = insertelement <16 x i32> %21, i32 %23, i32 6
  %25 = trunc i64 %4 to i32
  %26 = or i32 %25, 7
  %27 = insertelement <16 x i32> %24, i32 %26, i32 7
  %28 = trunc i64 %4 to i32
  %29 = or i32 %28, 8
  %30 = insertelement <16 x i32> %27, i32 %29, i32 8
  %31 = trunc i64 %4 to i32
  %32 = or i32 %31, 9
  %33 = insertelement <16 x i32> %30, i32 %32, i32 9
  %34 = trunc i64 %4 to i32
  %35 = or i32 %34, 10
  %36 = insertelement <16 x i32> %33, i32 %35, i32 10
  %37 = trunc i64 %4 to i32
  %38 = or i32 %37, 11
  %39 = insertelement <16 x i32> %36, i32 %38, i32 11
  %40 = trunc i64 %4 to i32
  %41 = or i32 %40, 12
  %42 = insertelement <16 x i32> %39, i32 %41, i32 12
  %43 = trunc i64 %4 to i32
  %44 = or i32 %43, 13
  %45 = insertelement <16 x i32> %42, i32 %44, i32 13
  %46 = trunc i64 %4 to i32
  %47 = or i32 %46, 14
  %48 = insertelement <16 x i32> %45, i32 %47, i32 14
  %49 = trunc i64 %4 to i32
  %50 = or i32 %49, 15
  %51 = insertelement <16 x i32> %48, i32 %50, i32 15
  %52 = sdiv <16 x i32> %51, <i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284>
  %53 = mul <16 x i32> %52, <i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284, i32 49284>
  %.decomposed = sub <16 x i32> %51, %53
  %54 = icmp sgt <16 x i32> %.decomposed, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %54, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %55 = zext <16 x i1> %not. to <16 x i32>
  %56 = sub nsw <16 x i32> %52, %55
  %57 = shl nsw <16 x i32> %.decomposed, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %58 = add nsw <16 x i32> %57, <i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088, i32 1577088>
  %59 = select <16 x i1> %54, <16 x i32> %57, <16 x i32> %58
  %60 = add nsw <16 x i32> %59, %56
  %61 = extractelement <16 x i32> %60, i64 0
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds float, float* %2, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !405
  %65 = insertelement <16 x float> undef, float %64, i32 0
  %66 = extractelement <16 x i32> %60, i64 1
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %2, i64 %67
  %69 = load float, float* %68, align 4, !tbaa !405
  %70 = insertelement <16 x float> %65, float %69, i32 1
  %71 = extractelement <16 x i32> %60, i64 2
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float* %2, i64 %72
  %74 = load float, float* %73, align 4, !tbaa !405
  %75 = insertelement <16 x float> %70, float %74, i32 2
  %76 = extractelement <16 x i32> %60, i64 3
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds float, float* %2, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !405
  %80 = insertelement <16 x float> %75, float %79, i32 3
  %81 = extractelement <16 x i32> %60, i64 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds float, float* %2, i64 %82
  %84 = load float, float* %83, align 4, !tbaa !405
  %85 = insertelement <16 x float> %80, float %84, i32 4
  %86 = extractelement <16 x i32> %60, i64 5
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %2, i64 %87
  %89 = load float, float* %88, align 4, !tbaa !405
  %90 = insertelement <16 x float> %85, float %89, i32 5
  %91 = extractelement <16 x i32> %60, i64 6
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds float, float* %2, i64 %92
  %94 = load float, float* %93, align 4, !tbaa !405
  %95 = insertelement <16 x float> %90, float %94, i32 6
  %96 = extractelement <16 x i32> %60, i64 7
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds float, float* %2, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !405
  %100 = insertelement <16 x float> %95, float %99, i32 7
  %101 = extractelement <16 x i32> %60, i64 8
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds float, float* %2, i64 %102
  %104 = load float, float* %103, align 4, !tbaa !405
  %105 = insertelement <16 x float> %100, float %104, i32 8
  %106 = extractelement <16 x i32> %60, i64 9
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds float, float* %2, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !405
  %110 = insertelement <16 x float> %105, float %109, i32 9
  %111 = extractelement <16 x i32> %60, i64 10
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds float, float* %2, i64 %112
  %114 = load float, float* %113, align 4, !tbaa !405
  %115 = insertelement <16 x float> %110, float %114, i32 10
  %116 = extractelement <16 x i32> %60, i64 11
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float* %2, i64 %117
  %119 = load float, float* %118, align 4, !tbaa !405
  %120 = insertelement <16 x float> %115, float %119, i32 11
  %121 = extractelement <16 x i32> %60, i64 12
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds float, float* %2, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !405
  %125 = insertelement <16 x float> %120, float %124, i32 12
  %126 = extractelement <16 x i32> %60, i64 13
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %2, i64 %127
  %129 = load float, float* %128, align 4, !tbaa !405
  %130 = insertelement <16 x float> %125, float %129, i32 13
  %131 = extractelement <16 x i32> %60, i64 14
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds float, float* %2, i64 %132
  %134 = load float, float* %133, align 4, !tbaa !405
  %135 = insertelement <16 x float> %130, float %134, i32 14
  %136 = extractelement <16 x i32> %60, i64 15
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds float, float* %2, i64 %137
  %139 = load float, float* %138, align 4, !tbaa !405
  %140 = insertelement <16 x float> %135, float %139, i32 15
  %141 = getelementptr inbounds float, float* %3, i64 %4
  %142 = bitcast float* %141 to <16 x float>*
  store <16 x float> %140, <16 x float>* %142, align 64, !tbaa !408
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 98568
  br i1 %exitcond, label %for_end, label %for_body, !prof !55

for_end:                                          ; preds = %for_body
  ret void
}

define dllexport i32 @fused_nn_dense_add(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.70, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !411
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !425
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !428
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %54 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %54(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.71, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %55 = getelementptr inbounds i8, i8* %1, i64 4
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 4, !tbaa !430
  switch i32 %57, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %59 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %59(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %60(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %61 = icmp eq i32 %33, 1
  br i1 %61, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 2
  br i1 %65, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %67 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %68 = load i16, i16* %67, align 2
  %69 = icmp eq i16 %68, 1
  %70 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 32
  %73 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 2
  %76 = and i1 %72, %75
  %77 = and i1 %69, %76
  br i1 %77, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %79 = load i64, i64* %29, align 8, !tbaa !432
  %80 = trunc i64 %79 to i32
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %83 = getelementptr inbounds i64, i64* %29, i64 1
  %84 = load i64, i64* %83, align 8, !tbaa !446
  %85 = trunc i64 %84 to i32
  %86 = icmp eq i32 %85, 1577088
  br i1 %86, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %87(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %88 = icmp eq i64* %31, null
  br i1 %88, label %if_end, label %if_then, !prof !55

if_then:                                          ; preds = %assert_end18
  %89 = load i64, i64* %31, align 8, !tbaa !448
  %90 = trunc i64 %89 to i32
  %91 = icmp eq i32 %90, 1577088
  %92 = getelementptr inbounds i64, i64* %31, i64 1
  %93 = load i64, i64* %92, align 8, !tbaa !462
  %94 = trunc i64 %93 to i32
  %95 = icmp eq i32 %94, 1
  %96 = and i1 %91, %95
  br i1 %96, label %if_end, label %assert_fail19, !prof !5

if_end:                                           ; preds = %assert_end18, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end22, label %assert_fail21, !prof !5

assert_fail19:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_fail21:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 2
  br i1 %104, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %107 = load i16, i16* %106, align 2
  %108 = icmp eq i16 %107, 1
  %109 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 32
  %112 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %113 = load i8, i8* %112, align 1
  %114 = icmp eq i8 %113, 2
  %115 = and i1 %111, %114
  %116 = and i1 %108, %115
  br i1 %116, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %118 = load i64, i64* %39, align 8, !tbaa !464
  %119 = trunc i64 %118 to i32
  %120 = icmp eq i32 %119, 10
  br i1 %120, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %122 = getelementptr inbounds i64, i64* %39, i64 1
  %123 = load i64, i64* %122, align 8, !tbaa !478
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 1577088
  br i1 %125, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %127 = icmp eq i64* %41, null
  br i1 %127, label %if_end32, label %if_then31, !prof !55

if_then31:                                        ; preds = %assert_end30
  %128 = load i64, i64* %41, align 8, !tbaa !480
  %129 = trunc i64 %128 to i32
  %130 = icmp eq i32 %129, 1577088
  %131 = getelementptr inbounds i64, i64* %41, i64 1
  %132 = load i64, i64* %131, align 8, !tbaa !494
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 1
  %135 = and i1 %130, %134
  br i1 %135, label %if_end32, label %assert_fail33, !prof !5

if_end32:                                         ; preds = %assert_end30, %if_then31
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %137 = load i64, i64* %136, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %assert_end36, label %assert_fail35, !prof !5

assert_fail33:                                    ; preds = %if_then31
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_fail35:                                    ; preds = %if_end32
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.24, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %if_end32
  %141 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %35, %146
  br i1 %147, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %149 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.79, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %153 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %154 = load i16, i16* %153, align 2
  %155 = icmp eq i16 %154, 1
  %156 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %157 = load i8, i8* %156, align 1
  %158 = icmp eq i8 %157, 32
  %159 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %160 = load i8, i8* %159, align 1
  %161 = icmp eq i8 %160, 2
  %162 = and i1 %158, %161
  %163 = and i1 %155, %162
  br i1 %163, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.28, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %165 = load i64, i64* %45, align 8, !tbaa !496
  %166 = trunc i64 %165 to i32
  %167 = icmp eq i32 %166, 10
  br i1 %167, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %168 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %168(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.80, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %169 = icmp eq i64* %47, null
  br i1 %169, label %if_end48, label %if_then47, !prof !55

if_then47:                                        ; preds = %assert_end46
  %170 = load i64, i64* %47, align 8, !tbaa !510
  %171 = trunc i64 %170 to i32
  %172 = icmp eq i32 %171, 1
  br i1 %172, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %173 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %174 = load i64, i64* %173, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.81, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %177(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %178 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = icmp eq i32 %179, 1
  br i1 %180, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %181 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %181(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %182 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = icmp eq i32 %35, %183
  br i1 %184, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %185(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.37, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %186 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %187 = load i32, i32* %186, align 4
  %188 = icmp eq i32 %187, 2
  br i1 %188, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.82, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %190 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %191 = load i16, i16* %190, align 2
  %192 = icmp eq i16 %191, 1
  %193 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %194 = load i8, i8* %193, align 1
  %195 = icmp eq i8 %194, 32
  %196 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %197 = load i8, i8* %196, align 1
  %198 = icmp eq i8 %197, 2
  %199 = and i1 %195, %198
  %200 = and i1 %192, %199
  br i1 %200, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %202 = load i64, i64* %51, align 8, !tbaa !524
  %203 = trunc i64 %202 to i32
  %204 = icmp eq i32 %203, 1
  br i1 %204, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %206 = getelementptr inbounds i64, i64* %51, i64 1
  %207 = load i64, i64* %206, align 8, !tbaa !538
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %208, 10
  br i1 %209, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %211 = icmp eq i64* %53, null
  br i1 %211, label %if_end66, label %if_then65, !prof !55

if_then65:                                        ; preds = %assert_end64
  %212 = load i64, i64* %53, align 8, !tbaa !540
  %213 = trunc i64 %212 to i32
  %214 = icmp eq i32 %213, 10
  %215 = getelementptr inbounds i64, i64* %53, i64 1
  %216 = load i64, i64* %215, align 8, !tbaa !554
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 1
  %219 = and i1 %214, %218
  br i1 %219, label %if_end66, label %assert_fail67, !prof !5

if_end66:                                         ; preds = %assert_end64, %if_then65
  %220 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %221 = load i64, i64* %220, align 8
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %assert_end70, label %assert_fail69, !prof !5

assert_fail67:                                    ; preds = %if_then65
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_fail69:                                    ; preds = %if_end66
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %if_end66
  %225 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %226 = load i32, i32* %225, align 4
  %227 = icmp eq i32 %226, 1
  br i1 %227, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %228 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %228(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %229 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = icmp eq i32 %35, %230
  br i1 %231, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %232 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %232(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %233 = tail call fastcc i32 @fused_nn_dense_add_compute_(i8* %27, i8* %37, i8* %49, i8* %43)
  ret i32 %233
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_dense_add_compute_(i8* noalias, i8* noalias, i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #0 {
entry:
  %4 = alloca [10 x float], align 16
  %5 = alloca %6, align 8
  %.sub = getelementptr inbounds [10 x float], [10 x float]* %4, i64 0, i64 0
  %6 = getelementptr inbounds %6, %6* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %6, %6* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %6, %6* %5, i64 0, i32 2
  store float* %.sub, float** %8, align 8
  %9 = bitcast %6* %5 to i8*
  %10 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %11 = call i32 %10(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.85, i8* nonnull %9, i32 0)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %for_begin.preheader, label %call_fail, !prof !5

for_begin.preheader:                              ; preds = %entry
  %13 = bitcast i8* %3 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !556
  %15 = bitcast [10 x float]* %4 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 16, !tbaa !559
  %17 = fadd <4 x float> %14, %16
  %18 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %17, <4 x float>* %18, align 4, !tbaa !562
  %19 = getelementptr inbounds i8, i8* %3, i64 16
  %20 = getelementptr inbounds [10 x float], [10 x float]* %4, i64 0, i64 4
  %21 = getelementptr inbounds i8, i8* %2, i64 16
  %22 = bitcast i8* %19 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !556
  %24 = bitcast float* %20 to <4 x float>*
  %25 = load <4 x float>, <4 x float>* %24, align 16, !tbaa !559
  %26 = fadd <4 x float> %23, %25
  %27 = bitcast i8* %21 to <4 x float>*
  store <4 x float> %26, <4 x float>* %27, align 4, !tbaa !562
  %28 = getelementptr inbounds i8, i8* %3, i64 32
  %29 = bitcast i8* %28 to float*
  %30 = load float, float* %29, align 4, !tbaa !556
  %31 = getelementptr inbounds [10 x float], [10 x float]* %4, i64 0, i64 8
  %32 = load float, float* %31, align 16, !tbaa !559
  %33 = fadd float %30, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 32
  %35 = bitcast i8* %34 to float*
  store float %33, float* %35, align 4, !tbaa !562
  %36 = getelementptr inbounds i8, i8* %3, i64 36
  %37 = bitcast i8* %36 to float*
  %38 = load float, float* %37, align 4, !tbaa !556
  %39 = getelementptr inbounds [10 x float], [10 x float]* %4, i64 0, i64 9
  %40 = load float, float* %39, align 4, !tbaa !559
  %41 = fadd float %38, %40
  %42 = getelementptr inbounds i8, i8* %2, i64 36
  %43 = bitcast i8* %42 to float*
  store float %41, float* %43, align 4, !tbaa !562
  br label %call_fail

call_fail:                                        ; preds = %for_begin.preheader, %entry
  ret i32 %11
}

; Function Attrs: nofree nounwind
define private i32 @__tvm_parallel_lambda.85(i32, %0* nocapture readonly, i8* nocapture readonly) #4 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 9
  %14 = sdiv i32 %13, %12
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %14, %15
  %17 = icmp slt i32 %16, 10
  %18 = select i1 %17, i32 %16, i32 10
  %19 = mul nsw i32 %14, %0
  %20 = icmp slt i32 %19, 10
  %21 = select i1 %20, i32 %19, i32 10
  %22 = icmp slt i32 %21, %18
  br i1 %22, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %23 = sext i32 %21 to i64
  %24 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %23, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %25 = mul nsw i64 %indvars.iv7, 1577088
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %.06 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %34, %for_body2 ]
  %26 = shl nsw i64 %indvars.iv, 4
  %27 = getelementptr inbounds float, float* %4, i64 %26
  %28 = bitcast float* %27 to <16 x float>*
  %29 = load <16 x float>, <16 x float>* %28, align 64, !tbaa !565
  %30 = add nsw i64 %26, %25
  %31 = getelementptr inbounds float, float* %7, i64 %30
  %32 = bitcast float* %31 to <16 x float>*
  %33 = load <16 x float>, <16 x float>* %32, align 64, !tbaa !568
  %34 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %29, <16 x float> %33, <16 x float> %.06)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 98568
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !55

for_end3:                                         ; preds = %for_body2
  %35 = getelementptr inbounds float, float* %10, i64 %indvars.iv7
  %.0.vec.extract = extractelement <16 x float> %34, i32 0
  %36 = fadd float %.0.vec.extract, 0.000000e+00
  %.4.vec.extract = extractelement <16 x float> %34, i32 1
  %37 = fadd float %.4.vec.extract, %36
  %.8.vec.extract = extractelement <16 x float> %34, i32 2
  %38 = fadd float %.8.vec.extract, %37
  %.12.vec.extract = extractelement <16 x float> %34, i32 3
  %39 = fadd float %.12.vec.extract, %38
  %.16.vec.extract = extractelement <16 x float> %34, i32 4
  %40 = fadd float %.16.vec.extract, %39
  %.20.vec.extract = extractelement <16 x float> %34, i32 5
  %41 = fadd float %.20.vec.extract, %40
  %.24.vec.extract = extractelement <16 x float> %34, i32 6
  %42 = fadd float %.24.vec.extract, %41
  %.28.vec.extract = extractelement <16 x float> %34, i32 7
  %43 = fadd float %.28.vec.extract, %42
  %.32.vec.extract = extractelement <16 x float> %34, i32 8
  %44 = fadd float %.32.vec.extract, %43
  %.36.vec.extract = extractelement <16 x float> %34, i32 9
  %45 = fadd float %.36.vec.extract, %44
  %.40.vec.extract = extractelement <16 x float> %34, i32 10
  %46 = fadd float %.40.vec.extract, %45
  %.44.vec.extract = extractelement <16 x float> %34, i32 11
  %47 = fadd float %.44.vec.extract, %46
  %.48.vec.extract = extractelement <16 x float> %34, i32 12
  %48 = fadd float %.48.vec.extract, %47
  %.52.vec.extract = extractelement <16 x float> %34, i32 13
  %49 = fadd float %.52.vec.extract, %48
  %.56.vec.extract = extractelement <16 x float> %34, i32 14
  %50 = fadd float %.56.vec.extract, %49
  %.60.vec.extract = extractelement <16 x float> %34, i32 15
  %51 = fadd float %.60.vec.extract, %50
  store float %51, float* %35, align 4, !tbaa !559
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %52 = icmp slt i64 %indvars.iv.next8, %24
  br i1 %52, label %for_begin1.preheader, label %for_end, !prof !5
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fmuladd.v16f32(<16 x float>, <16 x float>, <16 x float>) #1

define dllexport i32 @fused_nn_softmax_3(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.86, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !571
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.87, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !585
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.88, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 1
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 2
  %50 = and i1 %46, %49
  %51 = and i1 %43, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !587
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !601
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 10
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.89, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = icmp eq i64* %19, null
  br i1 %62, label %if_end, label %if_then, !prof !55

if_then:                                          ; preds = %assert_end14
  %63 = load i64, i64* %19, align 8, !tbaa !603
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 10
  %66 = getelementptr inbounds i64, i64* %19, i64 1
  %67 = load i64, i64* %66, align 8, !tbaa !617
  %68 = trunc i64 %67 to i32
  %69 = icmp eq i32 %68, 1
  %70 = and i1 %65, %69
  br i1 %70, label %if_end, label %assert_fail15, !prof !5

if_end:                                           ; preds = %assert_end14, %if_then
  %71 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %assert_end18, label %assert_fail17, !prof !5

assert_fail15:                                    ; preds = %if_then
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_fail17:                                    ; preds = %if_end
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %if_end
  %76 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 2
  br i1 %78, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %80 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %81 = load i16, i16* %80, align 2
  %82 = icmp eq i16 %81, 1
  %83 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 2
  %89 = and i1 %85, %88
  %90 = and i1 %82, %89
  br i1 %90, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %92 = load i64, i64* %27, align 8, !tbaa !619
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %96 = getelementptr inbounds i64, i64* %27, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !633
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 10
  br i1 %99, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.91, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %101 = icmp eq i64* %29, null
  br i1 %101, label %if_end28, label %if_then27, !prof !55

if_then27:                                        ; preds = %assert_end26
  %102 = load i64, i64* %29, align 8, !tbaa !635
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 10
  %105 = getelementptr inbounds i64, i64* %29, i64 1
  %106 = load i64, i64* %105, align 8, !tbaa !649
  %107 = trunc i64 %106 to i32
  %108 = icmp eq i32 %107, 1
  %109 = and i1 %104, %108
  br i1 %109, label %if_end28, label %assert_fail29, !prof !5

if_end28:                                         ; preds = %assert_end26, %if_then27
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then27
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.92, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end28
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %114(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.24, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end28
  %115 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %119 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %23, %120
  br i1 %121, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  tail call fastcc void @fused_nn_softmax_3_compute_(i8* %15, i8* %25)
  ret i32 0
}

; Function Attrs: nofree noinline nounwind
define private fastcc void @fused_nn_softmax_3_compute_(i8* noalias nocapture readonly, i8* noalias nocapture) unnamed_addr #5 {
entry:
  %2 = bitcast i8* %0 to <4 x float>*
  %3 = load <4 x float>, <4 x float>* %2, align 4, !tbaa !651
  %4 = extractelement <4 x float> %3, i32 0
  %5 = fcmp olt float %4, 0xC7EFFFFFE0000000
  %6 = select i1 %5, float 0xC7EFFFFFE0000000, float %4
  %7 = extractelement <4 x float> %3, i32 1
  %8 = fcmp ogt float %6, %7
  %9 = select i1 %8, float %6, float %7
  %10 = extractelement <4 x float> %3, i32 2
  %11 = fcmp ogt float %9, %10
  %12 = select i1 %11, float %9, float %10
  %13 = extractelement <4 x float> %3, i32 3
  %14 = fcmp ogt float %12, %13
  %15 = select i1 %14, float %12, float %13
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !651
  %19 = extractelement <4 x float> %18, i32 0
  %20 = fcmp ogt float %15, %19
  %21 = select i1 %20, float %15, float %19
  %22 = extractelement <4 x float> %18, i32 1
  %23 = fcmp ogt float %21, %22
  %24 = select i1 %23, float %21, float %22
  %25 = extractelement <4 x float> %18, i32 2
  %26 = fcmp ogt float %24, %25
  %27 = select i1 %26, float %24, float %25
  %28 = extractelement <4 x float> %18, i32 3
  %29 = fcmp ogt float %27, %28
  %30 = select i1 %29, float %27, float %28
  %31 = getelementptr inbounds i8, i8* %0, i64 32
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4, !tbaa !651
  %34 = fcmp ogt float %30, %33
  %35 = select i1 %34, float %30, float %33
  %36 = getelementptr inbounds i8, i8* %0, i64 36
  %37 = bitcast i8* %36 to float*
  %38 = load float, float* %37, align 4, !tbaa !651
  %39 = fcmp ogt float %35, %38
  %40 = select i1 %39, float %35, float %38
  %41 = insertelement <4 x float> undef, float %40, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fsub <4 x float> %3, %42
  %44 = call <4 x float> @llvm.exp.v4f32(<4 x float> %43)
  %45 = fsub <4 x float> %18, %42
  %46 = call <4 x float> @llvm.exp.v4f32(<4 x float> %45)
  %47 = fsub float %33, %40
  %48 = tail call float @llvm.exp.f32(float %47)
  %49 = fsub float %38, %40
  %50 = tail call float @llvm.exp.f32(float %49)
  %51 = extractelement <4 x float> %44, i32 0
  %52 = fadd float %51, 0.000000e+00
  %53 = extractelement <4 x float> %44, i32 1
  %54 = fadd float %52, %53
  %55 = extractelement <4 x float> %44, i32 2
  %56 = fadd float %54, %55
  %57 = extractelement <4 x float> %44, i32 3
  %58 = fadd float %56, %57
  %59 = extractelement <4 x float> %46, i32 0
  %60 = fadd float %58, %59
  %61 = extractelement <4 x float> %46, i32 1
  %62 = fadd float %60, %61
  %63 = extractelement <4 x float> %46, i32 2
  %64 = fadd float %62, %63
  %65 = extractelement <4 x float> %46, i32 3
  %66 = fadd float %64, %65
  %67 = fadd float %66, %48
  %68 = fadd float %67, %50
  %69 = insertelement <4 x float> undef, float %68, i32 0
  %70 = shufflevector <4 x float> %69, <4 x float> undef, <4 x i32> zeroinitializer
  %71 = fdiv <4 x float> %44, %70
  %72 = bitcast i8* %1 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !654
  %73 = getelementptr inbounds i8, i8* %1, i64 16
  %74 = fdiv <4 x float> %46, %70
  %75 = bitcast i8* %73 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 4, !tbaa !654
  %76 = fdiv float %48, %68
  %77 = getelementptr inbounds i8, i8* %1, i64 32
  %78 = bitcast i8* %77 to float*
  store float %76, float* %78, align 4, !tbaa !654
  %79 = fdiv float %50, %68
  %80 = getelementptr inbounds i8, i8* %1, i64 36
  %81 = bitcast i8* %80 to float*
  store float %79, float* %81, align 4, !tbaa !654
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.exp.f32(float) #1

define dllexport i32 @fused_nn_softmax_2(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.93, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !657
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.94, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !671
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.95, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 1
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 2
  %50 = and i1 %46, %49
  %51 = and i1 %43, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !673
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !687
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 10
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.89, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = icmp eq i64* %19, null
  br i1 %62, label %if_end, label %if_then, !prof !55

if_then:                                          ; preds = %assert_end14
  %63 = load i64, i64* %19, align 8, !tbaa !689
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 10
  %66 = getelementptr inbounds i64, i64* %19, i64 1
  %67 = load i64, i64* %66, align 8, !tbaa !703
  %68 = trunc i64 %67 to i32
  %69 = icmp eq i32 %68, 1
  %70 = and i1 %65, %69
  br i1 %70, label %if_end, label %assert_fail15, !prof !5

if_end:                                           ; preds = %assert_end14, %if_then
  %71 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %assert_end18, label %assert_fail17, !prof !5

assert_fail15:                                    ; preds = %if_then
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_fail17:                                    ; preds = %if_end
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %if_end
  %76 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 2
  br i1 %78, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %80 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %81 = load i16, i16* %80, align 2
  %82 = icmp eq i16 %81, 1
  %83 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 2
  %89 = and i1 %85, %88
  %90 = and i1 %82, %89
  br i1 %90, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %92 = load i64, i64* %27, align 8, !tbaa !705
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %96 = getelementptr inbounds i64, i64* %27, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !719
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 10
  br i1 %99, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.91, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %101 = icmp eq i64* %29, null
  br i1 %101, label %if_end28, label %if_then27, !prof !55

if_then27:                                        ; preds = %assert_end26
  %102 = load i64, i64* %29, align 8, !tbaa !721
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 10
  %105 = getelementptr inbounds i64, i64* %29, i64 1
  %106 = load i64, i64* %105, align 8, !tbaa !735
  %107 = trunc i64 %106 to i32
  %108 = icmp eq i32 %107, 1
  %109 = and i1 %104, %108
  br i1 %109, label %if_end28, label %assert_fail29, !prof !5

if_end28:                                         ; preds = %assert_end26, %if_then27
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then27
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.92, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end28
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %114(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.24, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end28
  %115 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %119 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %23, %120
  br i1 %121, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  tail call fastcc void @fused_nn_softmax_2_compute_(i8* %15, i8* %25)
  ret i32 0
}

; Function Attrs: nofree noinline nounwind
define private fastcc void @fused_nn_softmax_2_compute_(i8* noalias nocapture readonly, i8* noalias nocapture) unnamed_addr #5 {
entry:
  %2 = bitcast i8* %0 to <4 x float>*
  %3 = load <4 x float>, <4 x float>* %2, align 4, !tbaa !737
  %4 = extractelement <4 x float> %3, i32 0
  %5 = fcmp olt float %4, 0xC7EFFFFFE0000000
  %6 = select i1 %5, float 0xC7EFFFFFE0000000, float %4
  %7 = extractelement <4 x float> %3, i32 1
  %8 = fcmp ogt float %6, %7
  %9 = select i1 %8, float %6, float %7
  %10 = extractelement <4 x float> %3, i32 2
  %11 = fcmp ogt float %9, %10
  %12 = select i1 %11, float %9, float %10
  %13 = extractelement <4 x float> %3, i32 3
  %14 = fcmp ogt float %12, %13
  %15 = select i1 %14, float %12, float %13
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !737
  %19 = extractelement <4 x float> %18, i32 0
  %20 = fcmp ogt float %15, %19
  %21 = select i1 %20, float %15, float %19
  %22 = extractelement <4 x float> %18, i32 1
  %23 = fcmp ogt float %21, %22
  %24 = select i1 %23, float %21, float %22
  %25 = extractelement <4 x float> %18, i32 2
  %26 = fcmp ogt float %24, %25
  %27 = select i1 %26, float %24, float %25
  %28 = extractelement <4 x float> %18, i32 3
  %29 = fcmp ogt float %27, %28
  %30 = select i1 %29, float %27, float %28
  %31 = getelementptr inbounds i8, i8* %0, i64 32
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4, !tbaa !737
  %34 = fcmp ogt float %30, %33
  %35 = select i1 %34, float %30, float %33
  %36 = getelementptr inbounds i8, i8* %0, i64 36
  %37 = bitcast i8* %36 to float*
  %38 = load float, float* %37, align 4, !tbaa !737
  %39 = fcmp ogt float %35, %38
  %40 = select i1 %39, float %35, float %38
  %41 = insertelement <4 x float> undef, float %40, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fsub <4 x float> %3, %42
  %44 = call <4 x float> @llvm.exp.v4f32(<4 x float> %43)
  %45 = fsub <4 x float> %18, %42
  %46 = call <4 x float> @llvm.exp.v4f32(<4 x float> %45)
  %47 = fsub float %33, %40
  %48 = tail call float @llvm.exp.f32(float %47)
  %49 = fsub float %38, %40
  %50 = tail call float @llvm.exp.f32(float %49)
  %51 = extractelement <4 x float> %44, i32 0
  %52 = fadd float %51, 0.000000e+00
  %53 = extractelement <4 x float> %44, i32 1
  %54 = fadd float %52, %53
  %55 = extractelement <4 x float> %44, i32 2
  %56 = fadd float %54, %55
  %57 = extractelement <4 x float> %44, i32 3
  %58 = fadd float %56, %57
  %59 = extractelement <4 x float> %46, i32 0
  %60 = fadd float %58, %59
  %61 = extractelement <4 x float> %46, i32 1
  %62 = fadd float %60, %61
  %63 = extractelement <4 x float> %46, i32 2
  %64 = fadd float %62, %63
  %65 = extractelement <4 x float> %46, i32 3
  %66 = fadd float %64, %65
  %67 = fadd float %66, %48
  %68 = fadd float %67, %50
  %69 = insertelement <4 x float> undef, float %68, i32 0
  %70 = shufflevector <4 x float> %69, <4 x float> undef, <4 x i32> zeroinitializer
  %71 = fdiv <4 x float> %44, %70
  %72 = bitcast i8* %1 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !740
  %73 = getelementptr inbounds i8, i8* %1, i64 16
  %74 = fdiv <4 x float> %46, %70
  %75 = bitcast i8* %73 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 4, !tbaa !740
  %76 = fdiv float %48, %68
  %77 = getelementptr inbounds i8, i8* %1, i64 32
  %78 = bitcast i8* %77 to float*
  store float %76, float* %78, align 4, !tbaa !740
  %79 = fdiv float %50, %68
  %80 = getelementptr inbounds i8, i8* %1, i64 36
  %81 = bitcast i8* %80 to float*
  store float %79, float* %81, align 4, !tbaa !740
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.exp.v4f32(<4 x float>) #1

attributes #0 = { noinline }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nofree norecurse nounwind }
attributes #3 = { nofree noinline norecurse nounwind }
attributes #4 = { nofree nounwind }
attributes #5 = { nofree noinline nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, dwoId: 1)
!1 = !DIFile(filename: "model.tvm", directory: "/tmp/")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = !{!"branch_weights", i32 1048576, i32 1}
!6 = !{!7, !7, i64 0}
!7 = !{!"ctx_ptr", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"0x5600c22cb600.w1.b0", !11, i64 0}
!11 = !{!"0x5600c22cb600.w2.b0", !12, i64 0}
!12 = !{!"0x5600c22cb600.w4.b0", !13, i64 0}
!13 = !{!"0x5600c22cb600.w8.b0", !14, i64 0}
!14 = !{!"0x5600c22cb600.w16.b0", !15, i64 0}
!15 = !{!"0x5600c22cb600.w32.b0", !16, i64 0}
!16 = !{!"0x5600c22cb600.w64.b0", !17, i64 0}
!17 = !{!"0x5600c22cb600.w128.b0", !18, i64 0}
!18 = !{!"0x5600c22cb600.w256.b0", !19, i64 0}
!19 = !{!"0x5600c22cb600.w512.b0", !20, i64 0}
!20 = !{!"0x5600c22cb600.w1024.b0", !21, i64 0}
!21 = !{!"int32", !22, i64 0}
!22 = !{!"0x5600c22cb600", !8, i64 0}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x5600c22cb600.w1.b2", !25, i64 0}
!25 = !{!"0x5600c22cb600.w2.b2", !12, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"0x5600c22cb600.w1.b3", !25, i64 0}
!28 = !{!29, !29, i64 0}
!29 = !{!"0x5600c22cb600.w1.b1", !11, i64 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"0x5600c24399f0.w1.b0", !32, i64 0}
!32 = !{!"0x5600c24399f0.w2.b0", !33, i64 0}
!33 = !{!"0x5600c24399f0.w4.b0", !34, i64 0}
!34 = !{!"0x5600c24399f0.w8.b0", !35, i64 0}
!35 = !{!"0x5600c24399f0.w16.b0", !36, i64 0}
!36 = !{!"0x5600c24399f0.w32.b0", !37, i64 0}
!37 = !{!"0x5600c24399f0.w64.b0", !38, i64 0}
!38 = !{!"0x5600c24399f0.w128.b0", !39, i64 0}
!39 = !{!"0x5600c24399f0.w256.b0", !40, i64 0}
!40 = !{!"0x5600c24399f0.w512.b0", !41, i64 0}
!41 = !{!"0x5600c24399f0.w1024.b0", !42, i64 0}
!42 = !{!"int64", !43, i64 0}
!43 = !{!"0x5600c24399f0", !8, i64 0}
!44 = !{!45, !45, i64 0}
!45 = !{!"0x5600c24399f0.w1.b1", !32, i64 0}
!46 = !{!47, !47, i64 0}
!47 = !{!"0x5600c24399f0.w1.b2", !48, i64 0}
!48 = !{!"0x5600c24399f0.w2.b2", !33, i64 0}
!49 = !{!50, !50, i64 0}
!50 = !{!"0x5600c24399f0.w1.b3", !48, i64 0}
!51 = !{!52, !52, i64 0}
!52 = !{!"0x5600c24399f0.w1.b4", !53, i64 0}
!53 = !{!"0x5600c24399f0.w2.b4", !54, i64 0}
!54 = !{!"0x5600c24399f0.w4.b4", !34, i64 0}
!55 = !{!"branch_weights", i32 1, i32 1048576}
!56 = !{!57, !57, i64 0}
!57 = !{!"0x5600c249d7d0.w4.b0", !58, i64 0}
!58 = !{!"0x5600c249d7d0.w8.b0", !59, i64 0}
!59 = !{!"0x5600c249d7d0.w16.b0", !60, i64 0}
!60 = !{!"0x5600c249d7d0.w32.b0", !61, i64 0}
!61 = !{!"0x5600c249d7d0.w64.b0", !62, i64 0}
!62 = !{!"0x5600c249d7d0.w128.b0", !63, i64 0}
!63 = !{!"0x5600c249d7d0.w256.b0", !64, i64 0}
!64 = !{!"0x5600c249d7d0.w512.b0", !65, i64 0}
!65 = !{!"0x5600c249d7d0.w1024.b0", !66, i64 0}
!66 = !{!"int64", !67, i64 0}
!67 = !{!"0x5600c249d7d0", !8, i64 0}
!68 = !{!69, !69, i64 0}
!69 = !{!"0x5600c249d7d0.w1.b4", !70, i64 0}
!70 = !{!"0x5600c249d7d0.w2.b4", !71, i64 0}
!71 = !{!"0x5600c249d7d0.w4.b4", !58, i64 0}
!72 = !{!73, !73, i64 0}
!73 = !{!"0x5600c2332690.w1.b0", !74, i64 0}
!74 = !{!"0x5600c2332690.w2.b0", !75, i64 0}
!75 = !{!"0x5600c2332690.w4.b0", !76, i64 0}
!76 = !{!"0x5600c2332690.w8.b0", !77, i64 0}
!77 = !{!"0x5600c2332690.w16.b0", !78, i64 0}
!78 = !{!"0x5600c2332690.w32.b0", !79, i64 0}
!79 = !{!"0x5600c2332690.w64.b0", !80, i64 0}
!80 = !{!"0x5600c2332690.w128.b0", !81, i64 0}
!81 = !{!"0x5600c2332690.w256.b0", !82, i64 0}
!82 = !{!"0x5600c2332690.w512.b0", !83, i64 0}
!83 = !{!"0x5600c2332690.w1024.b0", !84, i64 0}
!84 = !{!"int64", !85, i64 0}
!85 = !{!"0x5600c2332690", !8, i64 0}
!86 = !{!87, !87, i64 0}
!87 = !{!"0x5600c2332690.w1.b1", !74, i64 0}
!88 = !{!89, !89, i64 0}
!89 = !{!"0x5600c2332690.w1.b2", !90, i64 0}
!90 = !{!"0x5600c2332690.w2.b2", !75, i64 0}
!91 = !{!92, !92, i64 0}
!92 = !{!"0x5600c2332690.w1.b3", !90, i64 0}
!93 = !{!94, !94, i64 0}
!94 = !{!"0x5600c2332690.w1.b4", !95, i64 0}
!95 = !{!"0x5600c2332690.w2.b4", !96, i64 0}
!96 = !{!"0x5600c2332690.w4.b4", !76, i64 0}
!97 = !{!98, !98, i64 0}
!98 = !{!"0x5600c2332690.w1.b5", !95, i64 0}
!99 = !{!100, !100, i64 0}
!100 = !{!"0x5600c23b6840.w4.b0", !101, i64 0}
!101 = !{!"0x5600c23b6840.w8.b0", !102, i64 0}
!102 = !{!"0x5600c23b6840.w16.b0", !103, i64 0}
!103 = !{!"0x5600c23b6840.w32.b0", !104, i64 0}
!104 = !{!"0x5600c23b6840.w64.b0", !105, i64 0}
!105 = !{!"0x5600c23b6840.w128.b0", !106, i64 0}
!106 = !{!"0x5600c23b6840.w256.b0", !107, i64 0}
!107 = !{!"0x5600c23b6840.w512.b0", !108, i64 0}
!108 = !{!"0x5600c23b6840.w1024.b0", !109, i64 0}
!109 = !{!"int64", !110, i64 0}
!110 = !{!"0x5600c23b6840", !8, i64 0}
!111 = !{!112, !112, i64 0}
!112 = !{!"0x5600c23b6840.w1.b4", !113, i64 0}
!113 = !{!"0x5600c23b6840.w2.b4", !114, i64 0}
!114 = !{!"0x5600c23b6840.w4.b4", !101, i64 0}
!115 = !{!116, !116, i64 0}
!116 = !{!"0x5600c23b6840.w1.b5", !113, i64 0}
!117 = !{!118, !118, i64 0}
!118 = !{!"0x5600c241f050.w1.b0", !119, i64 0}
!119 = !{!"0x5600c241f050.w2.b0", !120, i64 0}
!120 = !{!"0x5600c241f050.w4.b0", !121, i64 0}
!121 = !{!"0x5600c241f050.w8.b0", !122, i64 0}
!122 = !{!"0x5600c241f050.w16.b0", !123, i64 0}
!123 = !{!"0x5600c241f050.w32.b0", !124, i64 0}
!124 = !{!"0x5600c241f050.w64.b0", !125, i64 0}
!125 = !{!"0x5600c241f050.w128.b0", !126, i64 0}
!126 = !{!"0x5600c241f050.w256.b0", !127, i64 0}
!127 = !{!"0x5600c241f050.w512.b0", !128, i64 0}
!128 = !{!"0x5600c241f050.w1024.b0", !129, i64 0}
!129 = !{!"int64", !130, i64 0}
!130 = !{!"0x5600c241f050", !8, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"0x5600c241f050.w1.b1", !119, i64 0}
!133 = !{!134, !134, i64 0}
!134 = !{!"0x5600c241f050.w1.b2", !135, i64 0}
!135 = !{!"0x5600c241f050.w2.b2", !120, i64 0}
!136 = !{!137, !137, i64 0}
!137 = !{!"0x5600c241f050.w1.b3", !135, i64 0}
!138 = !{!139, !139, i64 0}
!139 = !{!"0x5600c241f050.w1.b4", !140, i64 0}
!140 = !{!"0x5600c241f050.w2.b4", !141, i64 0}
!141 = !{!"0x5600c241f050.w4.b4", !121, i64 0}
!142 = !{!143, !143, i64 0}
!143 = !{!"0x5600c24c3d80.w4.b0", !144, i64 0}
!144 = !{!"0x5600c24c3d80.w8.b0", !145, i64 0}
!145 = !{!"0x5600c24c3d80.w16.b0", !146, i64 0}
!146 = !{!"0x5600c24c3d80.w32.b0", !147, i64 0}
!147 = !{!"0x5600c24c3d80.w64.b0", !148, i64 0}
!148 = !{!"0x5600c24c3d80.w128.b0", !149, i64 0}
!149 = !{!"0x5600c24c3d80.w256.b0", !150, i64 0}
!150 = !{!"0x5600c24c3d80.w512.b0", !151, i64 0}
!151 = !{!"0x5600c24c3d80.w1024.b0", !152, i64 0}
!152 = !{!"int64", !153, i64 0}
!153 = !{!"0x5600c24c3d80", !8, i64 0}
!154 = !{!155, !155, i64 0}
!155 = !{!"0x5600c24c3d80.w1.b4", !156, i64 0}
!156 = !{!"0x5600c24c3d80.w2.b4", !157, i64 0}
!157 = !{!"0x5600c24c3d80.w4.b4", !144, i64 0}
!158 = !{!159, !159, i64 0}
!159 = !{!"0x5600c2465ef0.w1.b0", !160, i64 0}
!160 = !{!"0x5600c2465ef0.w2.b0", !161, i64 0}
!161 = !{!"0x5600c2465ef0.w4.b0", !162, i64 0}
!162 = !{!"0x5600c2465ef0.w8.b0", !163, i64 0}
!163 = !{!"0x5600c2465ef0.w16.b0", !164, i64 0}
!164 = !{!"0x5600c2465ef0.w32.b0", !165, i64 0}
!165 = !{!"0x5600c2465ef0.w64.b0", !166, i64 0}
!166 = !{!"0x5600c2465ef0.w128.b0", !167, i64 0}
!167 = !{!"0x5600c2465ef0.w256.b0", !168, i64 0}
!168 = !{!"0x5600c2465ef0.w512.b0", !169, i64 0}
!169 = !{!"0x5600c2465ef0.w1024.b0", !170, i64 0}
!170 = !{!"int64", !171, i64 0}
!171 = !{!"0x5600c2465ef0", !8, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"0x5600c2465ef0.w1.b1", !160, i64 0}
!174 = !{!175, !175, i64 0}
!175 = !{!"0x5600c2465ef0.w1.b2", !176, i64 0}
!176 = !{!"0x5600c2465ef0.w2.b2", !161, i64 0}
!177 = !{!178, !178, i64 0}
!178 = !{!"0x5600c2465ef0.w1.b3", !176, i64 0}
!179 = !{!180, !180, i64 0}
!180 = !{!"0x5600c2465ef0.w1.b4", !181, i64 0}
!181 = !{!"0x5600c2465ef0.w2.b4", !182, i64 0}
!182 = !{!"0x5600c2465ef0.w4.b4", !162, i64 0}
!183 = !{!184, !184, i64 0}
!184 = !{!"0x5600c2465f40.w4.b0", !185, i64 0}
!185 = !{!"0x5600c2465f40.w8.b0", !186, i64 0}
!186 = !{!"0x5600c2465f40.w16.b0", !187, i64 0}
!187 = !{!"0x5600c2465f40.w32.b0", !188, i64 0}
!188 = !{!"0x5600c2465f40.w64.b0", !189, i64 0}
!189 = !{!"0x5600c2465f40.w128.b0", !190, i64 0}
!190 = !{!"0x5600c2465f40.w256.b0", !191, i64 0}
!191 = !{!"0x5600c2465f40.w512.b0", !192, i64 0}
!192 = !{!"0x5600c2465f40.w1024.b0", !193, i64 0}
!193 = !{!"int64", !194, i64 0}
!194 = !{!"0x5600c2465f40", !8, i64 0}
!195 = !{!196, !196, i64 0}
!196 = !{!"0x5600c2465f40.w1.b4", !197, i64 0}
!197 = !{!"0x5600c2465f40.w2.b4", !198, i64 0}
!198 = !{!"0x5600c2465f40.w4.b4", !185, i64 0}
!199 = !{!200, !200, i64 0}
!200 = !{!"float32", !201, i64 0}
!201 = !{!"0x5600c24c8740", !8, i64 0}
!202 = !{!203, !203, i64 0}
!203 = !{!"0x5600c24c8b10.w32.b0", !204, i64 0}
!204 = !{!"0x5600c24c8b10.w64.b0", !205, i64 0}
!205 = !{!"0x5600c24c8b10.w128.b0", !206, i64 0}
!206 = !{!"0x5600c24c8b10.w256.b0", !207, i64 0}
!207 = !{!"0x5600c24c8b10.w512.b0", !208, i64 0}
!208 = !{!"0x5600c24c8b10.w1024.b0", !209, i64 0}
!209 = !{!"float32", !210, i64 0}
!210 = !{!"0x5600c24c8b10", !8, i64 0}
!211 = !{!212, !212, i64 0}
!212 = !{!"float32", !213, i64 0}
!213 = !{!"0x5600c22cb7f0", !8, i64 0}
!214 = !{!215, !215, i64 0}
!215 = !{!"float32", !216, i64 0}
!216 = !{!"0x5600c2332460", !8, i64 0}
!217 = !{!218, !218, i64 0}
!218 = !{!"float32", !219, i64 0}
!219 = !{!"0x5600c23b6490", !8, i64 0}
!220 = !{!221, !221, i64 0}
!221 = !{!"0x5600c23d7530.w1.b0", !222, i64 0}
!222 = !{!"0x5600c23d7530.w2.b0", !223, i64 0}
!223 = !{!"0x5600c23d7530.w4.b0", !224, i64 0}
!224 = !{!"0x5600c23d7530.w8.b0", !225, i64 0}
!225 = !{!"0x5600c23d7530.w16.b0", !226, i64 0}
!226 = !{!"0x5600c23d7530.w32.b0", !227, i64 0}
!227 = !{!"0x5600c23d7530.w64.b0", !228, i64 0}
!228 = !{!"0x5600c23d7530.w128.b0", !229, i64 0}
!229 = !{!"0x5600c23d7530.w256.b0", !230, i64 0}
!230 = !{!"0x5600c23d7530.w512.b0", !231, i64 0}
!231 = !{!"0x5600c23d7530.w1024.b0", !232, i64 0}
!232 = !{!"int32", !233, i64 0}
!233 = !{!"0x5600c23d7530", !8, i64 0}
!234 = !{!235, !235, i64 0}
!235 = !{!"0x5600c23d7530.w1.b1", !222, i64 0}
!236 = !{!237, !237, i64 0}
!237 = !{!"0x5600c2601780.w1.b0", !238, i64 0}
!238 = !{!"0x5600c2601780.w2.b0", !239, i64 0}
!239 = !{!"0x5600c2601780.w4.b0", !240, i64 0}
!240 = !{!"0x5600c2601780.w8.b0", !241, i64 0}
!241 = !{!"0x5600c2601780.w16.b0", !242, i64 0}
!242 = !{!"0x5600c2601780.w32.b0", !243, i64 0}
!243 = !{!"0x5600c2601780.w64.b0", !244, i64 0}
!244 = !{!"0x5600c2601780.w128.b0", !245, i64 0}
!245 = !{!"0x5600c2601780.w256.b0", !246, i64 0}
!246 = !{!"0x5600c2601780.w512.b0", !247, i64 0}
!247 = !{!"0x5600c2601780.w1024.b0", !248, i64 0}
!248 = !{!"int64", !249, i64 0}
!249 = !{!"0x5600c2601780", !8, i64 0}
!250 = !{!251, !251, i64 0}
!251 = !{!"0x5600c2601780.w1.b1", !238, i64 0}
!252 = !{!253, !253, i64 0}
!253 = !{!"0x5600c2601780.w1.b2", !254, i64 0}
!254 = !{!"0x5600c2601780.w2.b2", !239, i64 0}
!255 = !{!256, !256, i64 0}
!256 = !{!"0x5600c2601780.w1.b3", !254, i64 0}
!257 = !{!258, !258, i64 0}
!258 = !{!"0x5600c2601b00.w4.b0", !259, i64 0}
!259 = !{!"0x5600c2601b00.w8.b0", !260, i64 0}
!260 = !{!"0x5600c2601b00.w16.b0", !261, i64 0}
!261 = !{!"0x5600c2601b00.w32.b0", !262, i64 0}
!262 = !{!"0x5600c2601b00.w64.b0", !263, i64 0}
!263 = !{!"0x5600c2601b00.w128.b0", !264, i64 0}
!264 = !{!"0x5600c2601b00.w256.b0", !265, i64 0}
!265 = !{!"0x5600c2601b00.w512.b0", !266, i64 0}
!266 = !{!"0x5600c2601b00.w1024.b0", !267, i64 0}
!267 = !{!"int64", !268, i64 0}
!268 = !{!"0x5600c2601b00", !8, i64 0}
!269 = !{!270, !270, i64 0}
!270 = !{!"0x5600c2601d50.w1.b0", !271, i64 0}
!271 = !{!"0x5600c2601d50.w2.b0", !272, i64 0}
!272 = !{!"0x5600c2601d50.w4.b0", !273, i64 0}
!273 = !{!"0x5600c2601d50.w8.b0", !274, i64 0}
!274 = !{!"0x5600c2601d50.w16.b0", !275, i64 0}
!275 = !{!"0x5600c2601d50.w32.b0", !276, i64 0}
!276 = !{!"0x5600c2601d50.w64.b0", !277, i64 0}
!277 = !{!"0x5600c2601d50.w128.b0", !278, i64 0}
!278 = !{!"0x5600c2601d50.w256.b0", !279, i64 0}
!279 = !{!"0x5600c2601d50.w512.b0", !280, i64 0}
!280 = !{!"0x5600c2601d50.w1024.b0", !281, i64 0}
!281 = !{!"int64", !282, i64 0}
!282 = !{!"0x5600c2601d50", !8, i64 0}
!283 = !{!284, !284, i64 0}
!284 = !{!"0x5600c2601d50.w1.b1", !271, i64 0}
!285 = !{!286, !286, i64 0}
!286 = !{!"0x5600c2601d50.w1.b2", !287, i64 0}
!287 = !{!"0x5600c2601d50.w2.b2", !272, i64 0}
!288 = !{!289, !289, i64 0}
!289 = !{!"0x5600c2601d50.w1.b3", !287, i64 0}
!290 = !{!291, !291, i64 0}
!291 = !{!"0x5600c2601d50.w1.b4", !292, i64 0}
!292 = !{!"0x5600c2601d50.w2.b4", !293, i64 0}
!293 = !{!"0x5600c2601d50.w4.b4", !273, i64 0}
!294 = !{!295, !295, i64 0}
!295 = !{!"0x5600c2601d00.w4.b0", !296, i64 0}
!296 = !{!"0x5600c2601d00.w8.b0", !297, i64 0}
!297 = !{!"0x5600c2601d00.w16.b0", !298, i64 0}
!298 = !{!"0x5600c2601d00.w32.b0", !299, i64 0}
!299 = !{!"0x5600c2601d00.w64.b0", !300, i64 0}
!300 = !{!"0x5600c2601d00.w128.b0", !301, i64 0}
!301 = !{!"0x5600c2601d00.w256.b0", !302, i64 0}
!302 = !{!"0x5600c2601d00.w512.b0", !303, i64 0}
!303 = !{!"0x5600c2601d00.w1024.b0", !304, i64 0}
!304 = !{!"int64", !305, i64 0}
!305 = !{!"0x5600c2601d00", !8, i64 0}
!306 = !{!307, !307, i64 0}
!307 = !{!"0x5600c2601d00.w1.b4", !308, i64 0}
!308 = !{!"0x5600c2601d00.w2.b4", !309, i64 0}
!309 = !{!"0x5600c2601d00.w4.b4", !296, i64 0}
!310 = !{!311, !311, i64 0}
!311 = !{!"float32", !312, i64 0}
!312 = !{!"0x5600c23d7670", !8, i64 0}
!313 = !{!314, !314, i64 0}
!314 = !{!"float32", !315, i64 0}
!315 = !{!"0x5600c23d7620", !8, i64 0}
!316 = !{!317, !317, i64 0}
!317 = !{!"0x5600c24afdb0.w1.b0", !318, i64 0}
!318 = !{!"0x5600c24afdb0.w2.b0", !319, i64 0}
!319 = !{!"0x5600c24afdb0.w4.b0", !320, i64 0}
!320 = !{!"0x5600c24afdb0.w8.b0", !321, i64 0}
!321 = !{!"0x5600c24afdb0.w16.b0", !322, i64 0}
!322 = !{!"0x5600c24afdb0.w32.b0", !323, i64 0}
!323 = !{!"0x5600c24afdb0.w64.b0", !324, i64 0}
!324 = !{!"0x5600c24afdb0.w128.b0", !325, i64 0}
!325 = !{!"0x5600c24afdb0.w256.b0", !326, i64 0}
!326 = !{!"0x5600c24afdb0.w512.b0", !327, i64 0}
!327 = !{!"0x5600c24afdb0.w1024.b0", !328, i64 0}
!328 = !{!"int32", !329, i64 0}
!329 = !{!"0x5600c24afdb0", !8, i64 0}
!330 = !{!331, !331, i64 0}
!331 = !{!"0x5600c24afdb0.w1.b1", !318, i64 0}
!332 = !{!333, !333, i64 0}
!333 = !{!"0x5600c25f95e0.w1.b0", !334, i64 0}
!334 = !{!"0x5600c25f95e0.w2.b0", !335, i64 0}
!335 = !{!"0x5600c25f95e0.w4.b0", !336, i64 0}
!336 = !{!"0x5600c25f95e0.w8.b0", !337, i64 0}
!337 = !{!"0x5600c25f95e0.w16.b0", !338, i64 0}
!338 = !{!"0x5600c25f95e0.w32.b0", !339, i64 0}
!339 = !{!"0x5600c25f95e0.w64.b0", !340, i64 0}
!340 = !{!"0x5600c25f95e0.w128.b0", !341, i64 0}
!341 = !{!"0x5600c25f95e0.w256.b0", !342, i64 0}
!342 = !{!"0x5600c25f95e0.w512.b0", !343, i64 0}
!343 = !{!"0x5600c25f95e0.w1024.b0", !344, i64 0}
!344 = !{!"int64", !345, i64 0}
!345 = !{!"0x5600c25f95e0", !8, i64 0}
!346 = !{!347, !347, i64 0}
!347 = !{!"0x5600c25f95e0.w1.b1", !334, i64 0}
!348 = !{!349, !349, i64 0}
!349 = !{!"0x5600c25f95e0.w1.b2", !350, i64 0}
!350 = !{!"0x5600c25f95e0.w2.b2", !335, i64 0}
!351 = !{!352, !352, i64 0}
!352 = !{!"0x5600c25f95e0.w1.b3", !350, i64 0}
!353 = !{!354, !354, i64 0}
!354 = !{!"0x5600c25f95e0.w1.b4", !355, i64 0}
!355 = !{!"0x5600c25f95e0.w2.b4", !356, i64 0}
!356 = !{!"0x5600c25f95e0.w4.b4", !336, i64 0}
!357 = !{!358, !358, i64 0}
!358 = !{!"0x5600c22fc8b0.w4.b0", !359, i64 0}
!359 = !{!"0x5600c22fc8b0.w8.b0", !360, i64 0}
!360 = !{!"0x5600c22fc8b0.w16.b0", !361, i64 0}
!361 = !{!"0x5600c22fc8b0.w32.b0", !362, i64 0}
!362 = !{!"0x5600c22fc8b0.w64.b0", !363, i64 0}
!363 = !{!"0x5600c22fc8b0.w128.b0", !364, i64 0}
!364 = !{!"0x5600c22fc8b0.w256.b0", !365, i64 0}
!365 = !{!"0x5600c22fc8b0.w512.b0", !366, i64 0}
!366 = !{!"0x5600c22fc8b0.w1024.b0", !367, i64 0}
!367 = !{!"int64", !368, i64 0}
!368 = !{!"0x5600c22fc8b0", !8, i64 0}
!369 = !{!370, !370, i64 0}
!370 = !{!"0x5600c22fc8b0.w1.b4", !371, i64 0}
!371 = !{!"0x5600c22fc8b0.w2.b4", !372, i64 0}
!372 = !{!"0x5600c22fc8b0.w4.b4", !359, i64 0}
!373 = !{!374, !374, i64 0}
!374 = !{!"0x5600c22fcb00.w1.b0", !375, i64 0}
!375 = !{!"0x5600c22fcb00.w2.b0", !376, i64 0}
!376 = !{!"0x5600c22fcb00.w4.b0", !377, i64 0}
!377 = !{!"0x5600c22fcb00.w8.b0", !378, i64 0}
!378 = !{!"0x5600c22fcb00.w16.b0", !379, i64 0}
!379 = !{!"0x5600c22fcb00.w32.b0", !380, i64 0}
!380 = !{!"0x5600c22fcb00.w64.b0", !381, i64 0}
!381 = !{!"0x5600c22fcb00.w128.b0", !382, i64 0}
!382 = !{!"0x5600c22fcb00.w256.b0", !383, i64 0}
!383 = !{!"0x5600c22fcb00.w512.b0", !384, i64 0}
!384 = !{!"0x5600c22fcb00.w1024.b0", !385, i64 0}
!385 = !{!"int64", !386, i64 0}
!386 = !{!"0x5600c22fcb00", !8, i64 0}
!387 = !{!388, !388, i64 0}
!388 = !{!"0x5600c22fcb00.w1.b1", !375, i64 0}
!389 = !{!390, !390, i64 0}
!390 = !{!"0x5600c25f97e0.w1.b0", !391, i64 0}
!391 = !{!"0x5600c25f97e0.w2.b0", !392, i64 0}
!392 = !{!"0x5600c25f97e0.w4.b0", !393, i64 0}
!393 = !{!"0x5600c25f97e0.w8.b0", !394, i64 0}
!394 = !{!"0x5600c25f97e0.w16.b0", !395, i64 0}
!395 = !{!"0x5600c25f97e0.w32.b0", !396, i64 0}
!396 = !{!"0x5600c25f97e0.w64.b0", !397, i64 0}
!397 = !{!"0x5600c25f97e0.w128.b0", !398, i64 0}
!398 = !{!"0x5600c25f97e0.w256.b0", !399, i64 0}
!399 = !{!"0x5600c25f97e0.w512.b0", !400, i64 0}
!400 = !{!"0x5600c25f97e0.w1024.b0", !401, i64 0}
!401 = !{!"int64", !402, i64 0}
!402 = !{!"0x5600c25f97e0", !8, i64 0}
!403 = !{!404, !404, i64 0}
!404 = !{!"0x5600c25f97e0.w1.b1", !391, i64 0}
!405 = !{!406, !406, i64 0}
!406 = !{!"float32", !407, i64 0}
!407 = !{!"0x5600c24e7790", !8, i64 0}
!408 = !{!409, !409, i64 0}
!409 = !{!"float32", !410, i64 0}
!410 = !{!"0x5600c24e7700", !8, i64 0}
!411 = !{!412, !412, i64 0}
!412 = !{!"0x5600c2461ef0.w1.b0", !413, i64 0}
!413 = !{!"0x5600c2461ef0.w2.b0", !414, i64 0}
!414 = !{!"0x5600c2461ef0.w4.b0", !415, i64 0}
!415 = !{!"0x5600c2461ef0.w8.b0", !416, i64 0}
!416 = !{!"0x5600c2461ef0.w16.b0", !417, i64 0}
!417 = !{!"0x5600c2461ef0.w32.b0", !418, i64 0}
!418 = !{!"0x5600c2461ef0.w64.b0", !419, i64 0}
!419 = !{!"0x5600c2461ef0.w128.b0", !420, i64 0}
!420 = !{!"0x5600c2461ef0.w256.b0", !421, i64 0}
!421 = !{!"0x5600c2461ef0.w512.b0", !422, i64 0}
!422 = !{!"0x5600c2461ef0.w1024.b0", !423, i64 0}
!423 = !{!"int32", !424, i64 0}
!424 = !{!"0x5600c2461ef0", !8, i64 0}
!425 = !{!426, !426, i64 0}
!426 = !{!"0x5600c2461ef0.w1.b2", !427, i64 0}
!427 = !{!"0x5600c2461ef0.w2.b2", !414, i64 0}
!428 = !{!429, !429, i64 0}
!429 = !{!"0x5600c2461ef0.w1.b3", !427, i64 0}
!430 = !{!431, !431, i64 0}
!431 = !{!"0x5600c2461ef0.w1.b1", !413, i64 0}
!432 = !{!433, !433, i64 0}
!433 = !{!"0x5600c231d1c0.w1.b0", !434, i64 0}
!434 = !{!"0x5600c231d1c0.w2.b0", !435, i64 0}
!435 = !{!"0x5600c231d1c0.w4.b0", !436, i64 0}
!436 = !{!"0x5600c231d1c0.w8.b0", !437, i64 0}
!437 = !{!"0x5600c231d1c0.w16.b0", !438, i64 0}
!438 = !{!"0x5600c231d1c0.w32.b0", !439, i64 0}
!439 = !{!"0x5600c231d1c0.w64.b0", !440, i64 0}
!440 = !{!"0x5600c231d1c0.w128.b0", !441, i64 0}
!441 = !{!"0x5600c231d1c0.w256.b0", !442, i64 0}
!442 = !{!"0x5600c231d1c0.w512.b0", !443, i64 0}
!443 = !{!"0x5600c231d1c0.w1024.b0", !444, i64 0}
!444 = !{!"int64", !445, i64 0}
!445 = !{!"0x5600c231d1c0", !8, i64 0}
!446 = !{!447, !447, i64 0}
!447 = !{!"0x5600c231d1c0.w1.b1", !434, i64 0}
!448 = !{!449, !449, i64 0}
!449 = !{!"0x5600c231d390.w1.b0", !450, i64 0}
!450 = !{!"0x5600c231d390.w2.b0", !451, i64 0}
!451 = !{!"0x5600c231d390.w4.b0", !452, i64 0}
!452 = !{!"0x5600c231d390.w8.b0", !453, i64 0}
!453 = !{!"0x5600c231d390.w16.b0", !454, i64 0}
!454 = !{!"0x5600c231d390.w32.b0", !455, i64 0}
!455 = !{!"0x5600c231d390.w64.b0", !456, i64 0}
!456 = !{!"0x5600c231d390.w128.b0", !457, i64 0}
!457 = !{!"0x5600c231d390.w256.b0", !458, i64 0}
!458 = !{!"0x5600c231d390.w512.b0", !459, i64 0}
!459 = !{!"0x5600c231d390.w1024.b0", !460, i64 0}
!460 = !{!"int64", !461, i64 0}
!461 = !{!"0x5600c231d390", !8, i64 0}
!462 = !{!463, !463, i64 0}
!463 = !{!"0x5600c231d390.w1.b1", !450, i64 0}
!464 = !{!465, !465, i64 0}
!465 = !{!"0x5600c2399cd0.w1.b0", !466, i64 0}
!466 = !{!"0x5600c2399cd0.w2.b0", !467, i64 0}
!467 = !{!"0x5600c2399cd0.w4.b0", !468, i64 0}
!468 = !{!"0x5600c2399cd0.w8.b0", !469, i64 0}
!469 = !{!"0x5600c2399cd0.w16.b0", !470, i64 0}
!470 = !{!"0x5600c2399cd0.w32.b0", !471, i64 0}
!471 = !{!"0x5600c2399cd0.w64.b0", !472, i64 0}
!472 = !{!"0x5600c2399cd0.w128.b0", !473, i64 0}
!473 = !{!"0x5600c2399cd0.w256.b0", !474, i64 0}
!474 = !{!"0x5600c2399cd0.w512.b0", !475, i64 0}
!475 = !{!"0x5600c2399cd0.w1024.b0", !476, i64 0}
!476 = !{!"int64", !477, i64 0}
!477 = !{!"0x5600c2399cd0", !8, i64 0}
!478 = !{!479, !479, i64 0}
!479 = !{!"0x5600c2399cd0.w1.b1", !466, i64 0}
!480 = !{!481, !481, i64 0}
!481 = !{!"0x5600c2566c40.w1.b0", !482, i64 0}
!482 = !{!"0x5600c2566c40.w2.b0", !483, i64 0}
!483 = !{!"0x5600c2566c40.w4.b0", !484, i64 0}
!484 = !{!"0x5600c2566c40.w8.b0", !485, i64 0}
!485 = !{!"0x5600c2566c40.w16.b0", !486, i64 0}
!486 = !{!"0x5600c2566c40.w32.b0", !487, i64 0}
!487 = !{!"0x5600c2566c40.w64.b0", !488, i64 0}
!488 = !{!"0x5600c2566c40.w128.b0", !489, i64 0}
!489 = !{!"0x5600c2566c40.w256.b0", !490, i64 0}
!490 = !{!"0x5600c2566c40.w512.b0", !491, i64 0}
!491 = !{!"0x5600c2566c40.w1024.b0", !492, i64 0}
!492 = !{!"int64", !493, i64 0}
!493 = !{!"0x5600c2566c40", !8, i64 0}
!494 = !{!495, !495, i64 0}
!495 = !{!"0x5600c2566c40.w1.b1", !482, i64 0}
!496 = !{!497, !497, i64 0}
!497 = !{!"0x5600c237a550.w1.b0", !498, i64 0}
!498 = !{!"0x5600c237a550.w2.b0", !499, i64 0}
!499 = !{!"0x5600c237a550.w4.b0", !500, i64 0}
!500 = !{!"0x5600c237a550.w8.b0", !501, i64 0}
!501 = !{!"0x5600c237a550.w16.b0", !502, i64 0}
!502 = !{!"0x5600c237a550.w32.b0", !503, i64 0}
!503 = !{!"0x5600c237a550.w64.b0", !504, i64 0}
!504 = !{!"0x5600c237a550.w128.b0", !505, i64 0}
!505 = !{!"0x5600c237a550.w256.b0", !506, i64 0}
!506 = !{!"0x5600c237a550.w512.b0", !507, i64 0}
!507 = !{!"0x5600c237a550.w1024.b0", !508, i64 0}
!508 = !{!"int64", !509, i64 0}
!509 = !{!"0x5600c237a550", !8, i64 0}
!510 = !{!511, !511, i64 0}
!511 = !{!"0x5600c237a5a0.w1.b0", !512, i64 0}
!512 = !{!"0x5600c237a5a0.w2.b0", !513, i64 0}
!513 = !{!"0x5600c237a5a0.w4.b0", !514, i64 0}
!514 = !{!"0x5600c237a5a0.w8.b0", !515, i64 0}
!515 = !{!"0x5600c237a5a0.w16.b0", !516, i64 0}
!516 = !{!"0x5600c237a5a0.w32.b0", !517, i64 0}
!517 = !{!"0x5600c237a5a0.w64.b0", !518, i64 0}
!518 = !{!"0x5600c237a5a0.w128.b0", !519, i64 0}
!519 = !{!"0x5600c237a5a0.w256.b0", !520, i64 0}
!520 = !{!"0x5600c237a5a0.w512.b0", !521, i64 0}
!521 = !{!"0x5600c237a5a0.w1024.b0", !522, i64 0}
!522 = !{!"int64", !523, i64 0}
!523 = !{!"0x5600c237a5a0", !8, i64 0}
!524 = !{!525, !525, i64 0}
!525 = !{!"0x5600c23aab60.w1.b0", !526, i64 0}
!526 = !{!"0x5600c23aab60.w2.b0", !527, i64 0}
!527 = !{!"0x5600c23aab60.w4.b0", !528, i64 0}
!528 = !{!"0x5600c23aab60.w8.b0", !529, i64 0}
!529 = !{!"0x5600c23aab60.w16.b0", !530, i64 0}
!530 = !{!"0x5600c23aab60.w32.b0", !531, i64 0}
!531 = !{!"0x5600c23aab60.w64.b0", !532, i64 0}
!532 = !{!"0x5600c23aab60.w128.b0", !533, i64 0}
!533 = !{!"0x5600c23aab60.w256.b0", !534, i64 0}
!534 = !{!"0x5600c23aab60.w512.b0", !535, i64 0}
!535 = !{!"0x5600c23aab60.w1024.b0", !536, i64 0}
!536 = !{!"int64", !537, i64 0}
!537 = !{!"0x5600c23aab60", !8, i64 0}
!538 = !{!539, !539, i64 0}
!539 = !{!"0x5600c23aab60.w1.b1", !526, i64 0}
!540 = !{!541, !541, i64 0}
!541 = !{!"0x5600c23aabb0.w1.b0", !542, i64 0}
!542 = !{!"0x5600c23aabb0.w2.b0", !543, i64 0}
!543 = !{!"0x5600c23aabb0.w4.b0", !544, i64 0}
!544 = !{!"0x5600c23aabb0.w8.b0", !545, i64 0}
!545 = !{!"0x5600c23aabb0.w16.b0", !546, i64 0}
!546 = !{!"0x5600c23aabb0.w32.b0", !547, i64 0}
!547 = !{!"0x5600c23aabb0.w64.b0", !548, i64 0}
!548 = !{!"0x5600c23aabb0.w128.b0", !549, i64 0}
!549 = !{!"0x5600c23aabb0.w256.b0", !550, i64 0}
!550 = !{!"0x5600c23aabb0.w512.b0", !551, i64 0}
!551 = !{!"0x5600c23aabb0.w1024.b0", !552, i64 0}
!552 = !{!"int64", !553, i64 0}
!553 = !{!"0x5600c23aabb0", !8, i64 0}
!554 = !{!555, !555, i64 0}
!555 = !{!"0x5600c23aabb0.w1.b1", !542, i64 0}
!556 = !{!557, !557, i64 0}
!557 = !{!"float32", !558, i64 0}
!558 = !{!"0x5600c2461fe0", !8, i64 0}
!559 = !{!560, !560, i64 0}
!560 = !{!"float32", !561, i64 0}
!561 = !{!"0x5600c243d690", !8, i64 0}
!562 = !{!563, !563, i64 0}
!563 = !{!"float32", !564, i64 0}
!564 = !{!"0x5600c23a9e10", !8, i64 0}
!565 = !{!566, !566, i64 0}
!566 = !{!"float32", !567, i64 0}
!567 = !{!"0x5600c2462030", !8, i64 0}
!568 = !{!569, !569, i64 0}
!569 = !{!"float32", !570, i64 0}
!570 = !{!"0x5600c2604bd0", !8, i64 0}
!571 = !{!572, !572, i64 0}
!572 = !{!"0x5600c22aad80.w1.b0", !573, i64 0}
!573 = !{!"0x5600c22aad80.w2.b0", !574, i64 0}
!574 = !{!"0x5600c22aad80.w4.b0", !575, i64 0}
!575 = !{!"0x5600c22aad80.w8.b0", !576, i64 0}
!576 = !{!"0x5600c22aad80.w16.b0", !577, i64 0}
!577 = !{!"0x5600c22aad80.w32.b0", !578, i64 0}
!578 = !{!"0x5600c22aad80.w64.b0", !579, i64 0}
!579 = !{!"0x5600c22aad80.w128.b0", !580, i64 0}
!580 = !{!"0x5600c22aad80.w256.b0", !581, i64 0}
!581 = !{!"0x5600c22aad80.w512.b0", !582, i64 0}
!582 = !{!"0x5600c22aad80.w1024.b0", !583, i64 0}
!583 = !{!"int32", !584, i64 0}
!584 = !{!"0x5600c22aad80", !8, i64 0}
!585 = !{!586, !586, i64 0}
!586 = !{!"0x5600c22aad80.w1.b1", !573, i64 0}
!587 = !{!588, !588, i64 0}
!588 = !{!"0x5600c2456220.w1.b0", !589, i64 0}
!589 = !{!"0x5600c2456220.w2.b0", !590, i64 0}
!590 = !{!"0x5600c2456220.w4.b0", !591, i64 0}
!591 = !{!"0x5600c2456220.w8.b0", !592, i64 0}
!592 = !{!"0x5600c2456220.w16.b0", !593, i64 0}
!593 = !{!"0x5600c2456220.w32.b0", !594, i64 0}
!594 = !{!"0x5600c2456220.w64.b0", !595, i64 0}
!595 = !{!"0x5600c2456220.w128.b0", !596, i64 0}
!596 = !{!"0x5600c2456220.w256.b0", !597, i64 0}
!597 = !{!"0x5600c2456220.w512.b0", !598, i64 0}
!598 = !{!"0x5600c2456220.w1024.b0", !599, i64 0}
!599 = !{!"int64", !600, i64 0}
!600 = !{!"0x5600c2456220", !8, i64 0}
!601 = !{!602, !602, i64 0}
!602 = !{!"0x5600c2456220.w1.b1", !589, i64 0}
!603 = !{!604, !604, i64 0}
!604 = !{!"0x5600c2395ac0.w1.b0", !605, i64 0}
!605 = !{!"0x5600c2395ac0.w2.b0", !606, i64 0}
!606 = !{!"0x5600c2395ac0.w4.b0", !607, i64 0}
!607 = !{!"0x5600c2395ac0.w8.b0", !608, i64 0}
!608 = !{!"0x5600c2395ac0.w16.b0", !609, i64 0}
!609 = !{!"0x5600c2395ac0.w32.b0", !610, i64 0}
!610 = !{!"0x5600c2395ac0.w64.b0", !611, i64 0}
!611 = !{!"0x5600c2395ac0.w128.b0", !612, i64 0}
!612 = !{!"0x5600c2395ac0.w256.b0", !613, i64 0}
!613 = !{!"0x5600c2395ac0.w512.b0", !614, i64 0}
!614 = !{!"0x5600c2395ac0.w1024.b0", !615, i64 0}
!615 = !{!"int64", !616, i64 0}
!616 = !{!"0x5600c2395ac0", !8, i64 0}
!617 = !{!618, !618, i64 0}
!618 = !{!"0x5600c2395ac0.w1.b1", !605, i64 0}
!619 = !{!620, !620, i64 0}
!620 = !{!"0x5600c245c640.w1.b0", !621, i64 0}
!621 = !{!"0x5600c245c640.w2.b0", !622, i64 0}
!622 = !{!"0x5600c245c640.w4.b0", !623, i64 0}
!623 = !{!"0x5600c245c640.w8.b0", !624, i64 0}
!624 = !{!"0x5600c245c640.w16.b0", !625, i64 0}
!625 = !{!"0x5600c245c640.w32.b0", !626, i64 0}
!626 = !{!"0x5600c245c640.w64.b0", !627, i64 0}
!627 = !{!"0x5600c245c640.w128.b0", !628, i64 0}
!628 = !{!"0x5600c245c640.w256.b0", !629, i64 0}
!629 = !{!"0x5600c245c640.w512.b0", !630, i64 0}
!630 = !{!"0x5600c245c640.w1024.b0", !631, i64 0}
!631 = !{!"int64", !632, i64 0}
!632 = !{!"0x5600c245c640", !8, i64 0}
!633 = !{!634, !634, i64 0}
!634 = !{!"0x5600c245c640.w1.b1", !621, i64 0}
!635 = !{!636, !636, i64 0}
!636 = !{!"0x5600c2395b10.w1.b0", !637, i64 0}
!637 = !{!"0x5600c2395b10.w2.b0", !638, i64 0}
!638 = !{!"0x5600c2395b10.w4.b0", !639, i64 0}
!639 = !{!"0x5600c2395b10.w8.b0", !640, i64 0}
!640 = !{!"0x5600c2395b10.w16.b0", !641, i64 0}
!641 = !{!"0x5600c2395b10.w32.b0", !642, i64 0}
!642 = !{!"0x5600c2395b10.w64.b0", !643, i64 0}
!643 = !{!"0x5600c2395b10.w128.b0", !644, i64 0}
!644 = !{!"0x5600c2395b10.w256.b0", !645, i64 0}
!645 = !{!"0x5600c2395b10.w512.b0", !646, i64 0}
!646 = !{!"0x5600c2395b10.w1024.b0", !647, i64 0}
!647 = !{!"int64", !648, i64 0}
!648 = !{!"0x5600c2395b10", !8, i64 0}
!649 = !{!650, !650, i64 0}
!650 = !{!"0x5600c2395b10.w1.b1", !637, i64 0}
!651 = !{!652, !652, i64 0}
!652 = !{!"float32", !653, i64 0}
!653 = !{!"0x5600c2555bf0", !8, i64 0}
!654 = !{!655, !655, i64 0}
!655 = !{!"float32", !656, i64 0}
!656 = !{!"0x5600c22aadd0", !8, i64 0}
!657 = !{!658, !658, i64 0}
!658 = !{!"0x5600c23ba680.w1.b0", !659, i64 0}
!659 = !{!"0x5600c23ba680.w2.b0", !660, i64 0}
!660 = !{!"0x5600c23ba680.w4.b0", !661, i64 0}
!661 = !{!"0x5600c23ba680.w8.b0", !662, i64 0}
!662 = !{!"0x5600c23ba680.w16.b0", !663, i64 0}
!663 = !{!"0x5600c23ba680.w32.b0", !664, i64 0}
!664 = !{!"0x5600c23ba680.w64.b0", !665, i64 0}
!665 = !{!"0x5600c23ba680.w128.b0", !666, i64 0}
!666 = !{!"0x5600c23ba680.w256.b0", !667, i64 0}
!667 = !{!"0x5600c23ba680.w512.b0", !668, i64 0}
!668 = !{!"0x5600c23ba680.w1024.b0", !669, i64 0}
!669 = !{!"int32", !670, i64 0}
!670 = !{!"0x5600c23ba680", !8, i64 0}
!671 = !{!672, !672, i64 0}
!672 = !{!"0x5600c23ba680.w1.b1", !659, i64 0}
!673 = !{!674, !674, i64 0}
!674 = !{!"0x5600c231f360.w1.b0", !675, i64 0}
!675 = !{!"0x5600c231f360.w2.b0", !676, i64 0}
!676 = !{!"0x5600c231f360.w4.b0", !677, i64 0}
!677 = !{!"0x5600c231f360.w8.b0", !678, i64 0}
!678 = !{!"0x5600c231f360.w16.b0", !679, i64 0}
!679 = !{!"0x5600c231f360.w32.b0", !680, i64 0}
!680 = !{!"0x5600c231f360.w64.b0", !681, i64 0}
!681 = !{!"0x5600c231f360.w128.b0", !682, i64 0}
!682 = !{!"0x5600c231f360.w256.b0", !683, i64 0}
!683 = !{!"0x5600c231f360.w512.b0", !684, i64 0}
!684 = !{!"0x5600c231f360.w1024.b0", !685, i64 0}
!685 = !{!"int64", !686, i64 0}
!686 = !{!"0x5600c231f360", !8, i64 0}
!687 = !{!688, !688, i64 0}
!688 = !{!"0x5600c231f360.w1.b1", !675, i64 0}
!689 = !{!690, !690, i64 0}
!690 = !{!"0x5600c2360160.w1.b0", !691, i64 0}
!691 = !{!"0x5600c2360160.w2.b0", !692, i64 0}
!692 = !{!"0x5600c2360160.w4.b0", !693, i64 0}
!693 = !{!"0x5600c2360160.w8.b0", !694, i64 0}
!694 = !{!"0x5600c2360160.w16.b0", !695, i64 0}
!695 = !{!"0x5600c2360160.w32.b0", !696, i64 0}
!696 = !{!"0x5600c2360160.w64.b0", !697, i64 0}
!697 = !{!"0x5600c2360160.w128.b0", !698, i64 0}
!698 = !{!"0x5600c2360160.w256.b0", !699, i64 0}
!699 = !{!"0x5600c2360160.w512.b0", !700, i64 0}
!700 = !{!"0x5600c2360160.w1024.b0", !701, i64 0}
!701 = !{!"int64", !702, i64 0}
!702 = !{!"0x5600c2360160", !8, i64 0}
!703 = !{!704, !704, i64 0}
!704 = !{!"0x5600c2360160.w1.b1", !691, i64 0}
!705 = !{!706, !706, i64 0}
!706 = !{!"0x5600c21e3b70.w1.b0", !707, i64 0}
!707 = !{!"0x5600c21e3b70.w2.b0", !708, i64 0}
!708 = !{!"0x5600c21e3b70.w4.b0", !709, i64 0}
!709 = !{!"0x5600c21e3b70.w8.b0", !710, i64 0}
!710 = !{!"0x5600c21e3b70.w16.b0", !711, i64 0}
!711 = !{!"0x5600c21e3b70.w32.b0", !712, i64 0}
!712 = !{!"0x5600c21e3b70.w64.b0", !713, i64 0}
!713 = !{!"0x5600c21e3b70.w128.b0", !714, i64 0}
!714 = !{!"0x5600c21e3b70.w256.b0", !715, i64 0}
!715 = !{!"0x5600c21e3b70.w512.b0", !716, i64 0}
!716 = !{!"0x5600c21e3b70.w1024.b0", !717, i64 0}
!717 = !{!"int64", !718, i64 0}
!718 = !{!"0x5600c21e3b70", !8, i64 0}
!719 = !{!720, !720, i64 0}
!720 = !{!"0x5600c21e3b70.w1.b1", !707, i64 0}
!721 = !{!722, !722, i64 0}
!722 = !{!"0x5600c2155cd0.w1.b0", !723, i64 0}
!723 = !{!"0x5600c2155cd0.w2.b0", !724, i64 0}
!724 = !{!"0x5600c2155cd0.w4.b0", !725, i64 0}
!725 = !{!"0x5600c2155cd0.w8.b0", !726, i64 0}
!726 = !{!"0x5600c2155cd0.w16.b0", !727, i64 0}
!727 = !{!"0x5600c2155cd0.w32.b0", !728, i64 0}
!728 = !{!"0x5600c2155cd0.w64.b0", !729, i64 0}
!729 = !{!"0x5600c2155cd0.w128.b0", !730, i64 0}
!730 = !{!"0x5600c2155cd0.w256.b0", !731, i64 0}
!731 = !{!"0x5600c2155cd0.w512.b0", !732, i64 0}
!732 = !{!"0x5600c2155cd0.w1024.b0", !733, i64 0}
!733 = !{!"int64", !734, i64 0}
!734 = !{!"0x5600c2155cd0", !8, i64 0}
!735 = !{!736, !736, i64 0}
!736 = !{!"0x5600c2155cd0.w1.b1", !723, i64 0}
!737 = !{!738, !738, i64 0}
!738 = !{!"float32", !739, i64 0}
!739 = !{!"0x5600c2464000", !8, i64 0}
!740 = !{!741, !741, i64 0}
!741 = !{!"float32", !742, i64 0}
!742 = !{!"0x5600c22eca10", !8, i64 0}

Evaluate inference time cost...
Mean inference time (std dev): 26.88 ms (0.10 ms)
